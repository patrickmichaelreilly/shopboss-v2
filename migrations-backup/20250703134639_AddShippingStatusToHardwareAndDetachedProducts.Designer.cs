// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopBoss.Web.Data;

#nullable disable

namespace ShopBoss.Web.Migrations
{
    [DbContext(typeof(ShopBossDbContext))]
    [Migration("20250703134639_AddShippingStatusToHardwareAndDetachedProducts")]
    partial class AddShippingStatusToHardwareAndDetachedProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ShopBoss.Web.Models.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Bin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Column")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Row")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StorageRackId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Status");

                    b.HasIndex("StorageRackId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("StorageRackId", "Row", "Column")
                        .IsUnique();

                    b.ToTable("Bins");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.DetachedProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingBottom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingTop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("DetachedProducts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Hardware", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Hardware");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("WorkOrderId");

                    b.ToTable("NestSheets");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Part", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingBottom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingTop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NestSheetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubassemblyId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NestSheetId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubassemblyId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.ScanHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NestSheetId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PartsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Barcode");

                    b.HasIndex("NestSheetId");

                    b.HasIndex("Station");

                    b.HasIndex("Timestamp");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ScanHistory");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.StorageRack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Columns")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Height")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPortable")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rows")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.ToTable("StorageRacks");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Subassembly", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentSubassemblyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubassemblyId");

                    b.HasIndex("ProductId");

                    b.ToTable("Subassemblies");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.WorkOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Bin", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShopBoss.Web.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShopBoss.Web.Models.StorageRack", "StorageRack")
                        .WithMany("Bins")
                        .HasForeignKey("StorageRackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Part");

                    b.Navigation("Product");

                    b.Navigation("StorageRack");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.DetachedProduct", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("DetachedProducts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Hardware", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("Hardware")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("NestSheets")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Part", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.NestSheet", "NestSheet")
                        .WithMany("Parts")
                        .HasForeignKey("NestSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopBoss.Web.Models.Product", "Product")
                        .WithMany("Parts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShopBoss.Web.Models.Subassembly", "Subassembly")
                        .WithMany("Parts")
                        .HasForeignKey("SubassemblyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NestSheet");

                    b.Navigation("Product");

                    b.Navigation("Subassembly");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Product", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("Products")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.ScanHistory", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.NestSheet", "NestSheet")
                        .WithMany()
                        .HasForeignKey("NestSheetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NestSheet");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Subassembly", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.Subassembly", "ParentSubassembly")
                        .WithMany("ChildSubassemblies")
                        .HasForeignKey("ParentSubassemblyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShopBoss.Web.Models.Product", "Product")
                        .WithMany("Subassemblies")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentSubassembly");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Product", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("Subassemblies");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.StorageRack", b =>
                {
                    b.Navigation("Bins");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Subassembly", b =>
                {
                    b.Navigation("ChildSubassemblies");

                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.WorkOrder", b =>
                {
                    b.Navigation("DetachedProducts");

                    b.Navigation("Hardware");

                    b.Navigation("NestSheets");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
