// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopBoss.Web.Data;

#nullable disable

namespace ShopBoss.Web.Migrations
{
    [DbContext(typeof(ShopBossDbContext))]
    [Migration("20250714160000_RemoveOldBooleanStatusColumns")]
    partial class RemoveOldBooleanStatusColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ShopBoss.Web.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Station")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityType", "EntityId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Bin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Column")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentPartId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentPartName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentProductId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("Row")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageRackId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StorageRackId");

                    b.ToTable("Bins");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.DetachedProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingBottom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingTop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("DetachedProducts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Hardware", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MicrovellumId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Hardware");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("NestSheets");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Part", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingBottom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingLeft")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingRight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EdgebandingTop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NestSheetId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubassemblyId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NestSheetId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StatusUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.ScanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScannedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ScanTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ScanHistory");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.StorageRack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Columns")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rows")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StorageRacks");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Subassembly", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Length")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentSubassemblyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Width")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subassemblies");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.SystemBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackupDirectory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BackupType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManifestJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggerReason")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemBackups");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.SystemHealthStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChecked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SystemHealthStatus");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.WorkOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Bin", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.StorageRack", "StorageRack")
                        .WithMany("Bins")
                        .HasForeignKey("StorageRackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageRack");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.DetachedProduct", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("DetachedProducts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Hardware", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("Hardware")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("NestSheets")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Part", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.NestSheet", "NestSheet")
                        .WithMany("Parts")
                        .HasForeignKey("NestSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NestSheet");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.Product", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany("Products")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.ScanHistory", b =>
                {
                    b.HasOne("ShopBoss.Web.Models.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.NestSheet", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.StorageRack", b =>
                {
                    b.Navigation("Bins");
                });

            modelBuilder.Entity("ShopBoss.Web.Models.WorkOrder", b =>
                {
                    b.Navigation("DetachedProducts");

                    b.Navigation("Hardware");

                    b.Navigation("NestSheets");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}