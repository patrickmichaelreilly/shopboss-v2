@model string
@* Standalone Status Management Panel - Phase M1
   This panel provides comprehensive manual status override capabilities for ALL entities.
   Works with existing WorkOrderTreeApiController and tree data structure.
   Phase M1: UI first, no validation - everything is possible! *@

<div class="status-management-panel">
    <div class="card">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0">
                <i class="bi bi-gear-fill"></i> Manual Status Management
            </h5>
        </div>
        <div class="card-body">
            <!-- Work Order Tree Display (using WorkOrderTreeView component) -->
            <div id="workOrderTree" class="tree-view mb-4" style="min-height: 400px;">
                <div class="text-center text-muted">
                    <i class="bi bi-info-circle"></i> Loading work order data...
                </div>
            </div>


            <!-- Manual Override Status Management Instructions -->
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 
                <strong>Individual Status Management:</strong> Use the dropdown next to each item in the tree above to change its status. Status changes are applied immediately.
            </div>

            <!-- Work Order Audit History (Always Visible) -->
            <div class="mb-4">
                <h6 class="mb-3">
                    <i class="bi bi-clock-history"></i> Work Order Audit History
                </h6>
                <div class="card">
                    <div class="card-body" style="max-height: 400px; overflow-y: auto; border: 1px solid #dee2e6;">
                        <div id="auditHistoryContent">
                            <div class="text-center text-muted">
                                <i class="bi bi-info-circle"></i> Loading audit history...
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>

<style>
    .status-management-panel {
        margin-top: 1rem;
    }

    .tree-view {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        background-color: #ffffff;
    }

    /* Tree hierarchy indentation styles */
    .tree-node {
        padding: 0.25rem 0;
    }
    
    .tree-node.level-0 { margin-left: 0; }
    .tree-node.level-1 { margin-left: 1.5rem; }
    .tree-node.level-2 { margin-left: 3rem; }
    .tree-node.level-3 { margin-left: 4.5rem; }
    .tree-node.level-4 { margin-left: 6rem; }
    
    .tree-toggle {
        cursor: pointer;
        user-select: none;
        color: #6c757d;
        display: inline-flex !important;
        align-items: center;
        justify-content: center;
        min-width: 16px;
        height: 16px;
    }
    
    .tree-toggle:hover {
        color: #495057;
        background-color: #e9ecef;
        border-radius: 2px;
    }
    
    .tree-toggle i {
        font-size: 12px !important;
        line-height: 1;
    }
    

    .audit-entry {
        padding: 0.25rem 0.5rem;
        border-bottom: 1px solid #e9ecef;
        font-size: 0.8rem;
        line-height: 1.2;
    }

    .audit-entry:last-child {
        border-bottom: none;
    }

    .audit-timestamp {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .audit-details {
        margin-top: 0.1rem;
        font-size: 0.75rem;
    }

    .old-value {
        color: #dc3545;
        text-decoration: line-through;
    }

    .new-value {
        color: #28a745;
        font-weight: 500;
    }


</style>

<script>
    // Status Management Panel - Phase M1
    // Integrates with existing tree infrastructure, no validation yet!
    document.addEventListener('DOMContentLoaded', function() {
        const workOrderId = '@Model'; // Model contains the work order ID
        const auditHistoryContent = document.getElementById('auditHistoryContent');
        
        let treeView = null;

        // Initialize WorkOrderTreeView component
        function initializeTreeView() {
            try {
                treeView = new WorkOrderTreeView('workOrderTree', {
                    mode: 'modify',
                    apiUrl: '/api/WorkOrderTreeApi',
                    workOrderId: workOrderId,
                    onStatusChange: handleStatusChange,
                    onDataLoaded: handleDataLoaded
                });
            } catch (error) {
                console.error('Error initializing tree view:', error);
                document.getElementById('workOrderTree').innerHTML = '<div class="alert alert-danger">Failed to initialize tree view</div>';
            }
        }

        // Handle tree data loaded event
        function handleDataLoaded(data) {
            console.log('Tree data loaded:', data);
            // Load audit history when tree is ready
            loadAuditHistoryForWorkOrder();
        }


        // Handle individual status changes (copied from ModifyWorkOrderUnified)
        async function handleStatusChange(nodeId, newStatus, itemType) {
            try {
                console.log(`Status change: ${nodeId} -> ${newStatus} (${itemType})`);
                
                // Map frontend item types to backend expectations
                let backendItemType = itemType;
                if (itemType === 'detached_product') {
                    backendItemType = 'detachedproduct';
                }
                
                // Enable cascading for products to update child parts
                const shouldCascade = itemType === 'product';
                
                // Call the existing UpdateStatus endpoint
                const response = await fetch('/Admin/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        itemId: nodeId,
                        itemType: backendItemType,
                        newStatus: newStatus,
                        workOrderId: workOrderId,
                        cascadeToChildren: shouldCascade
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showSuccess(`${itemType} status updated to ${newStatus}`);
                    
                    // Refresh statistics and audit history immediately after successful status change
                    refreshStatistics();
                    refreshAuditHistory();
                    
                    // Only refresh if cascading was enabled (for products)
                    // This ensures child part status updates are reflected
                    if (shouldCascade) {
                        setTimeout(() => {
                            if (treeView && treeView.refresh) {
                                treeView.refresh();
                            }
                            // Refresh statistics and audit history again after cascading updates
                            refreshStatistics();
                            refreshAuditHistory();
                        }, 750); // Increased delay to ensure DB commit
                    }
                } else {
                    showError(`Failed to update status: ${result.message}`);
                    // Refresh tree to revert changes
                    if (treeView && treeView.refresh) {
                        treeView.refresh();
                    }
                }
            } catch (error) {
                console.error('Error updating status:', error);
                showError('Error updating status');
                if (treeView && treeView.refresh) {
                    treeView.refresh();
                }
            }
        }




        // Load audit history for the entire work order
        async function loadAuditHistoryForWorkOrder() {
            auditHistoryContent.innerHTML = '<div class="text-center"><span class="spinner-border spinner-border-sm"></span> Loading...</div>';

            try {
                const response = await fetch(`/api/WorkOrderStatistics/${workOrderId}/audit`);
                if (!response.ok) throw new Error('Failed to load audit history');
                
                const data = await response.json();
                if (data.success) {
                    renderAuditHistory(data.auditEntries);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error loading audit history:', error);
                auditHistoryContent.innerHTML = '<div class="alert alert-danger">Failed to load audit history</div>';
            }
        }

        // Refresh audit history after status changes
        function refreshAuditHistory() {
            loadAuditHistoryForWorkOrder();
        }

        // Render audit history
        function renderAuditHistory(entries) {
            if (entries.length === 0) {
                auditHistoryContent.innerHTML = '<div class="text-muted">No audit history found</div>';
                return;
            }

            auditHistoryContent.innerHTML = entries.map(entry => {
                const entityInfo = entry.entityType && entry.entityId ? 
                    ` ${entry.entityType} ${entry.entityId.substring(0, 8)}...` : '';
                const timestamp = new Date(entry.timestamp).toLocaleString();
                const station = entry.station || 'System';
                const valueChange = entry.oldValue && entry.newValue ? renderValueChange(entry.oldValue, entry.newValue) : '';
                
                return `
                    <div class="audit-entry">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <strong>${entry.action}</strong>${entityInfo} 
                                <span class="text-muted">at ${station}</span>
                                ${valueChange}
                            </div>
                            <span class="audit-timestamp">${timestamp}</span>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Render old/new value changes
        function renderValueChange(oldValue, newValue) {
            try {
                const oldObj = JSON.parse(oldValue);
                const newObj = JSON.parse(newValue);
                
                return `(<span class="old-value">${oldObj.Status || 'N/A'}</span>→<span class="new-value">${newObj.Status || 'N/A'}</span>)`;
            } catch {
                return '';
            }
        }


        // Utility functions for user feedback (copied from ModifyWorkOrderUnified)
        function showLoading(show) {
            // For now, just log - could add loading overlay later
            console.log('Loading:', show);
        }

        function showSuccess(message) {
            showAlert(message, 'success');
        }

        function showError(message) {
            showAlert(message, 'danger');
        }

        function showAlert(message, type) {
            // Create alert element
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1050; max-width: 400px;';
            alertDiv.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alertDiv);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Function to refresh statistics (called from parent page)
        function refreshStatistics() {
            if (typeof updateStatisticsCards === 'function') {
                fetch(`/api/WorkOrderStatistics/${workOrderId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateStatisticsCards(data.statistics);
                        }
                    })
                    .catch(error => console.error('Error refreshing statistics:', error));
            }
        }

        // Initialize
        initializeTreeView();
    });
</script>