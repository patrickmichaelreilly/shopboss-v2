<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ShopBoss</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ShopBoss.Web.styles.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Admin" asp-action="Index">
                    <img src="~/Dog.svg" alt="ShopBoss Logo" style="height: 40px; width: auto; margin-right: 8px;">ShopBoss
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Shop Stations
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" asp-controller="Cnc" asp-action="Index">CNC Station</a></li>
                                <li><a class="dropdown-item" asp-controller="Sorting" asp-action="Index">Sorting Station</a></li>
                                <li><a class="dropdown-item" asp-controller="Assembly" asp-action="Index">Assembly Station</a></li>
                                <li><a class="dropdown-item" asp-controller="Shipping" asp-action="Index">Shipping Station</a></li>
                            </ul>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                Configuration
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" asp-controller="Admin" asp-action="RackConfiguration">
                                    <i class="fas fa-layer-group me-2"></i>Rack Configuration
                                </a></li>
                                <li><a class="dropdown-item" asp-controller="Admin" asp-action="BackupManagement">
                                    <i class="fas fa-database me-2"></i>Backup Management
                                </a></li>
                                <li><a class="dropdown-item" asp-controller="Admin" asp-action="HealthDashboard">
                                    <i class="fas fa-heartbeat me-2"></i>Health Dashboard
                                </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#" onclick="showComingSoon('Other Settings')">Other Settings</a></li>
                            </ul>
                        </li>
                    </ul>
                    <ul class="navbar-nav">
                        <li class="nav-item me-2" id="healthStatusNavItem">
                            <a class="nav-link" asp-controller="Admin" asp-action="HealthDashboard" title="System Health Dashboard">
                                <i id="healthStatusIcon" class="fas fa-heartbeat text-success"></i>
                                <span id="healthStatusText" class="d-none d-md-inline ms-1">Healthy</span>
                            </a>
                        </li>
                        <li class="nav-item dropdown" id="activeWorkOrderNavItem">
                            <a class="nav-link dropdown-toggle work-order-nav-link" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" id="activeWorkOrderDropdown">
                                <div class="work-order-content">
                                    <i class="fas fa-star text-warning me-2"></i>
                                    <strong>Active:</strong>
                                    <span id="activeWorkOrderName" class="work-order-name ms-2">Loading...</span>
                                </div>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" id="workOrderDropdownMenu">
                                <li><span class="dropdown-item-text text-muted">Loading work orders...</span></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container-fluid py-4">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["InfoMessage"] != null)
        {
            <div class="alert alert-info alert-dismissible fade show" role="alert">
                @TempData["InfoMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        @RenderBody()
    </main>

    <footer class="bg-light mt-5 py-4">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-6">
                    <p class="text-muted mb-0">
                        &copy; @DateTime.Now.Year ShopBoss. All rights reserved.
                    </p>
                </div>
                <div class="col-md-6 text-end">
                    <small class="text-muted">Microvellum Work Order Management System</small>
                </div>
            </div>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- SignalR -->
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    
    <script>
        // Global Active Work Order functionality
        function showComingSoon(featureName) {
            alert(`${featureName} is coming soon! This feature will be implemented in future phases of the ShopBoss development roadmap.`);
        }

        // Load all work orders for dropdown
        function loadWorkOrderDropdown() {
            fetch('/Admin/GetAllWorkOrders')
                .then(response => response.json())
                .then(data => {
                    console.log('Work orders response:', data); // Debug logging
                    if (data.success) {
                        updateWorkOrderDropdown(data.workOrders, data.activeWorkOrderId);
                    } else {
                        console.error('Error loading work orders:', data.message);
                        updateWorkOrderDropdown([], null);
                    }
                })
                .catch(error => {
                    console.error('Error loading work orders:', error);
                    updateWorkOrderDropdown([], null);
                });
        }

        // Update the dropdown with work orders
        function updateWorkOrderDropdown(workOrders, activeWorkOrderId) {
            const activeNameSpan = document.getElementById('activeWorkOrderName');
            const dropdownMenu = document.getElementById('workOrderDropdownMenu');
            const dropdown = document.getElementById('activeWorkOrderDropdown');
            
            // Update active work order display
            const activeWorkOrder = workOrders.find(w => w.isActive || w.id === activeWorkOrderId);
            if (activeWorkOrder) {
                activeNameSpan.textContent = activeWorkOrder.name;
                activeNameSpan.className = 'work-order-name ms-2';
                dropdown.classList.remove('text-muted');
            } else {
                activeNameSpan.textContent = 'None';
                activeNameSpan.className = 'work-order-name ms-2';
                dropdown.classList.add('text-muted');
            }

            // Clear and rebuild dropdown menu
            dropdownMenu.innerHTML = '';

            if (workOrders.length === 0) {
                dropdownMenu.innerHTML += `
                    <li><span class="dropdown-item-text text-muted">No work orders available</span></li>
                `;
            } else {
                workOrders.forEach(workOrder => {
                    console.log('Processing work order:', workOrder); // Debug logging
                    
                    // Safe property access with fallbacks (using lowercase property names)
                    const workOrderId = workOrder.id || '';
                    const workOrderName = workOrder.name || 'Unnamed Work Order';
                    const importedDate = workOrder.importedDate || new Date();
                    const isActive = workOrder.isActive || workOrder.id === activeWorkOrderId;
                    
                    const activeClass = isActive ? 'active' : '';
                    
                    // Safely escape quotes in work order name
                    const escapedName = workOrderName.replace(/'/g, "\\'").replace(/"/g, '\\"');
                    
                    dropdownMenu.innerHTML += `
                        <li>
                            <a class="dropdown-item ${activeClass}" href="#" onclick="setActiveWorkOrderFromDropdown('${workOrderId}', '${escapedName}', event); return false;">
                                <div>
                                    <div class="fw-bold">${workOrderName}</div>
                                    <small class="text-muted">Imported: ${new Date(importedDate).toLocaleDateString()}</small>
                                </div>
                            </a>
                        </li>
                    `;
                });
            }
        }

        // Set active work order from dropdown
        function setActiveWorkOrderFromDropdown(workOrderId, workOrderName, event) {
            // Prevent any default behavior and event bubbling
            if (event) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
            }
            
            // Show loading state
            const activeNameSpan = document.getElementById('activeWorkOrderName');
            const originalText = activeNameSpan.textContent;
            activeNameSpan.textContent = 'Switching...';
            
            fetch('/Admin/SetActiveWorkOrderJson', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    id: workOrderId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message briefly
                    activeNameSpan.textContent = data.workOrderName;
                    activeNameSpan.className = 'work-order-name ms-2';
                    
                    // Check if we're on the admin page
                    if (window.location.pathname === '/Admin' || window.location.pathname === '/Admin/Index' || window.location.pathname.startsWith('/Admin?')) {
                        // For admin work orders page, just reload the work order dropdown and update the active work order display
                        setTimeout(() => {
                            loadWorkOrderDropdown();
                            // Update the active work order display on the admin page
                            const activeWorkOrderSpan = document.querySelector('small.text-muted strong');
                            if (activeWorkOrderSpan) {
                                activeWorkOrderSpan.textContent = data.workOrderName;
                                activeWorkOrderSpan.className = 'text-warning';
                            }
                        }, 500);
                    } else {
                        setTimeout(() => {
                            window.location.reload();
                        }, 500);
                    }
                } else {
                    console.error('Error setting active work order:', data.message);
                    activeNameSpan.textContent = originalText;
                    showWorkOrderChangeNotification(data.message || 'Error setting active work order', 'error');
                }
            })
            .catch(error => {
                console.error('Error setting active work order:', error);
                activeNameSpan.textContent = originalText;
                showWorkOrderChangeNotification('Network error occurred', 'error');
            });
        }

        // Show notification for work order change
        function showWorkOrderChangeNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
            
            // Remove any existing notifications
            const existingAlert = document.querySelector('.work-order-notification');
            if (existingAlert) {
                existingAlert.remove();
            }
            
            // Create new notification
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show work-order-notification" role="alert" style="position: fixed; top: 80px; right: 20px; z-index: 1050; min-width: 300px;">
                    <i class="fas ${icon} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove after 3 seconds
            setTimeout(() => {
                const notification = document.querySelector('.work-order-notification');
                if (notification) {
                    notification.remove();
                }
            }, 3000);
        }

        // Load work order dropdown on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadWorkOrderDropdown();
            initializeHealthStatusMonitoring();
        });

        // Health Status Monitoring
        function initializeHealthStatusMonitoring() {
            // Initialize SignalR connection for health monitoring
            const healthConnection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/status")
                .withAutomaticReconnect()
                .build();

            // Start connection
            healthConnection.start().then(function () {
                console.log("Health monitoring connected");
            }).catch(function (err) {
                console.log("Health monitoring unavailable:", err);
            });

            // Listen for health updates
            healthConnection.on("HealthUpdate", function (healthData) {
                if (healthData?.OverallStatus) {
                    updateHealthStatusDisplay(healthData.OverallStatus, healthData.ErrorMessage);
                }
            });
        }


        // Update health status display in navbar
        function updateHealthStatusDisplay(status, errorMessage) {
            const healthIcon = document.getElementById('healthStatusIcon');
            const healthText = document.getElementById('healthStatusText');
            
            if (!healthIcon || !healthText) return;

            let iconClass, textClass, statusText, title;
            
            switch (status) {
                case 'Healthy':
                    iconClass = 'fas fa-heartbeat text-success';
                    textClass = 'text-success';
                    statusText = 'Healthy';
                    title = 'System Health: Healthy';
                    break;
                case 'Warning':
                    iconClass = 'fas fa-exclamation-triangle text-warning';
                    textClass = 'text-warning';
                    statusText = 'Warning';
                    title = 'System Health: Warning - Click for details';
                    break;
                case 'Critical':
                    iconClass = 'fas fa-times-circle text-danger';
                    textClass = 'text-danger';
                    statusText = 'Critical';
                    title = 'System Health: Critical - Click for details';
                    break;
                case 'Error':
                    iconClass = 'fas fa-exclamation-circle text-danger';
                    textClass = 'text-danger';
                    statusText = 'Error';
                    title = errorMessage ? `System Health: Error - ${errorMessage}` : 'System Health: Error';
                    break;
                default:
                    iconClass = 'fas fa-question-circle text-muted';
                    textClass = 'text-muted';
                    statusText = 'Unknown';
                    title = 'System Health: Unknown';
            }
            
            healthIcon.className = iconClass;
            healthText.className = `d-none d-md-inline ms-1 ${textClass}`;
            healthText.textContent = statusText;
            healthIcon.parentElement.title = title;
        }
    </script>
    
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
