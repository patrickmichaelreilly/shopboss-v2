@{
    // Generate unique ID for this scanner instance
    string containerId = "scanner-" + Guid.NewGuid().ToString("N")[..8];
}

<!-- Compact Scanner Header Button -->
<button type="button" class="btn btn-outline-secondary btn-sm d-flex align-items-center gap-2 compact-scanner-button" 
        data-bs-toggle="modal" 
        data-bs-target="#scanner-modal-@containerId"
        id="scanner-button-@containerId"
        title="Open Scanner">
    <div class="scanner-health-indicator" id="scanner-health-@containerId">
        <i class="fas fa-circle text-success"></i>
    </div>
    <i class="fas fa-barcode scanner-icon"></i>
    <span class="scanner-title">Scanner</span>
</button>

<!-- Scanner Modal -->
<div class="modal fade" id="scanner-modal-@containerId" tabindex="-1" aria-labelledby="scannerModalLabel-@containerId" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scannerModalLabel-@containerId">
                    <i class="fas fa-barcode me-2"></i>Scanner
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Scanner Interface Content -->
                <div class="scanner-interface-container">
                    <!-- Scanner Input -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-qrcode"></i>
                                </span>
                                <input type="text" 
                                       id="scanner-input-@containerId" 
                                       class="form-control form-control-lg universal-scanner-input" 
                                       placeholder="Scan barcode or enter command..."
                                       data-container="@containerId"
                                       autocomplete="off"
                                       spellcheck="false">
                                <button type="button" 
                                        id="scanner-clear-@containerId" 
                                        class="btn btn-outline-secondary">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button type="button" 
                                    id="scanner-submit-@containerId" 
                                    class="btn btn-primary btn-lg w-100">
                                <i class="fas fa-search me-2"></i>Process
                            </button>
                        </div>
                    </div>
                    
                    <!-- Status Display -->
                    <div id="scanner-status-@containerId" class="scanner-status mb-3" style="display: none;">
                        <div class="alert mb-0" role="alert">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status" style="display: none;">
                                    <span class="visually-hidden">Processing...</span>
                                </div>
                                <span class="status-message"></span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Results Display -->
                    <div id="scanner-results-@containerId" class="scanner-results mb-3" style="display: none;">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Scan Result</h6>
                            </div>
                            <div class="card-body">
                                <div class="result-content"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Recent Scans -->
                    <div id="recent-scans-@containerId" class="recent-scans" style="display: none;">
                        <h6><i class="fas fa-history me-2"></i>Recent Scans</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Barcode</th>
                                        <th>Result</th>
                                    </tr>
                                </thead>
                                <tbody class="recent-scans-body">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.compact-scanner-button {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    color: #495057;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
    cursor: pointer;
}

.compact-scanner-button:hover {
    background: #e9ecef;
    border-color: #adb5bd;
    color: #495057;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.compact-scanner-button:active {
    transform: translateY(0);
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.compact-scanner-button .scanner-health-indicator {
    width: 12px;
    height: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.compact-scanner-button .scanner-health-indicator.ready {
    color: #28a745;
}

.compact-scanner-button .scanner-health-indicator.not-ready {
    color: #6c757d;
}

.compact-scanner-button .scanner-health-indicator.processing {
    color: #007bff;
    animation: pulse 1s infinite;
}

.compact-scanner-button .scanner-icon {
    font-size: 1rem;
    color: #6c757d;
}

.compact-scanner-button .scanner-title {
    font-size: 0.9rem;
    font-weight: 500;
    color: #495057;
}

.scanner-interface-container .form-control-lg {
    font-size: 1.1rem;
    padding: 0.75rem 1rem;
    font-family: 'Courier New', monospace;
}

.scanner-interface-container .scanner-status .alert {
    margin-bottom: 0;
}

.scanner-interface-container .scanner-results {
    max-height: 300px;
    overflow-y: auto;
}

.scanner-interface-container .recent-scans {
    max-height: 200px;
    overflow-y: auto;
}

.scanner-interface-container .recent-scans table {
    font-size: 0.875rem;
}

.scanner-interface-container code {
    background-color: #f8f9fa;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
}

.scanner-interface-container .status-message {
    flex-grow: 1;
}

@@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
}

</style>

<script>
// Self-Contained CompactScanner - Embedded in Compact Scanner Partial
class UniversalScanner {
    constructor(containerId, options = {}) {
        this.containerId = containerId;
        this.clearOnSuccess = options.clearOnSuccess !== false;
        this.showRecentScans = options.showRecentScans !== false;
        
        this.input = document.getElementById(`scanner-input-${containerId}`);
        this.submitButton = document.getElementById(`scanner-submit-${containerId}`);
        this.clearButton = document.getElementById(`scanner-clear-${containerId}`);
        this.statusDiv = document.getElementById(`scanner-status-${containerId}`);
        this.resultsDiv = document.getElementById(`scanner-results-${containerId}`);
        this.recentScansDiv = document.getElementById(`recent-scans-${containerId}`);
        
        this.isProcessing = false;
        this.lastScanTime = 0;
        this.scanCooldown = 100;
        
        this.init();
    }
    
    init() {
        if (!this.input) {
            console.error(`Scanner input not found for container: ${this.containerId}`);
            return;
        }
        
        // Event listeners
        this.input.addEventListener('keydown', (e) => this.handleKeydown(e));
        this.input.addEventListener('input', (e) => this.handleInput(e));
        this.submitButton?.addEventListener('click', () => this.processScan());
        this.clearButton?.addEventListener('click', () => this.clearInput());
        
        // Set up document-level key listener for barcode scanning
        this.setupDocumentKeyListener();
        
        // Initialize health indicator
        this.updateHealthIndicator('ready', 'Scanner Ready');
        
    }
    
    handleKeydown(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            this.processScan();
        } else if (event.key === 'Escape') {
            event.preventDefault();
            this.clearInput();
        }
    }
    
    handleInput(event) {
        const value = event.target.value.trim();
        
        // Auto-submit for certain patterns (like quick barcode scans)
        if (value.length > 8 && this.looksLikeBarcode(value)) {
            setTimeout(() => {
                if (this.input.value === value) {
                    this.processScan();
                }
            }, 100);
        }
    }
    
    looksLikeBarcode(value) {
        return /^[A-Z0-9\-:]{8,}$/i.test(value) || 
               value.includes(':') || 
               value.includes('-');
    }
    
    async processScan() {
        const barcode = this.input.value.trim();
        
        if (!barcode) {
            this.showStatus('warning', '⚠️ Please enter a barcode');
            return;
        }
        
        // Cooldown check
        const now = Date.now();
        if (now - this.lastScanTime < this.scanCooldown) {
            return;
        }
        this.lastScanTime = now;
        
        if (this.isProcessing) {
            return;
        }
        
        this.isProcessing = true;
        this.setProcessingState(true);
        this.updateHealthIndicator('processing', 'Processing scan...');
        
        try {
            this.lastScannedBarcode = barcode;
            
            // Check if this is a command barcode
            if (this.isCommandBarcode(barcode)) {
                this.handleCommand(barcode);
                return;
            }
            
            // Emit scan event for station-specific handling
            this.emitScanEvent(barcode);
            
            // Show basic feedback
            this.showStatus('info', `📡 Scan received: ${barcode}`, false);
            
            // Clear input if configured
            if (this.clearOnSuccess) {
                this.clearInput();
            }
            
            // Add to recent scans
            if (this.showRecentScans) {
                this.addToRecentScans({
                    barcode: barcode,
                    result: 'Forwarded to station handler',
                    success: true,
                    timestamp: new Date()
                });
            }
            
        } catch (error) {
            console.error('Scan processing error:', error);
            this.showStatus('danger', '❌ Error processing scan.');
        } finally {
            this.isProcessing = false;
            this.setProcessingState(false);
            this.updateHealthIndicator('ready', 'Scanner Ready');
        }
    }
    
    // Command barcode detection and handling
    isCommandBarcode(barcode) {
        return barcode.toUpperCase().startsWith('NAV-');
    }
    
    handleCommand(barcode) {
        const command = barcode.toUpperCase();
        
        if (command.startsWith('NAV-')) {
            this.handleNavigationCommand(command);
            return;
        }
        
        this.showStatus('warning', `❓ Unknown command: ${barcode}`);
        this.addToRecentScans({
            barcode: barcode,
            result: 'Unknown command',
            success: false,
            timestamp: new Date()
        });
    }
    
    handleNavigationCommand(command) {
        const destination = command.replace('NAV-', '');
        let url = null;
        let stationName = '';
        
        switch (destination) {
            case 'ADMIN':
                url = '/Admin';
                stationName = 'Admin Station';
                break;
            case 'CNC':
                url = '/Cnc';
                stationName = 'CNC Station';
                break;
            case 'SORTING':
                url = '/Sorting';
                stationName = 'Sorting Station';
                break;
            case 'ASSEMBLY':
                url = '/Assembly';
                stationName = 'Assembly Station';
                break;
            case 'SHIPPING':
                url = '/Shipping';
                stationName = 'Shipping Station';
                break;
            default:
                this.showStatus('warning', `❓ Unknown navigation destination: ${destination}`);
                this.addToRecentScans({
                    barcode: command,
                    result: 'Unknown navigation destination',
                    success: false,
                    timestamp: new Date()
                });
                return;
        }
        
        this.showStatus('success', `🧭 Navigating to ${stationName}...`, false);
        this.addToRecentScans({
            barcode: command,
            result: `Navigating to ${stationName}`,
            success: true,
            timestamp: new Date()
        });
        
        setTimeout(() => {
            window.location.href = url;
        }, 1500);
    }
    
    emitScanEvent(barcode) {
        const scanEvent = new CustomEvent('scanReceived', {
            detail: {
                barcode: barcode,
                timestamp: new Date(),
                containerId: this.containerId,
                scanner: this
            },
            bubbles: true
        });
        
        document.dispatchEvent(scanEvent);
    }
    
    showScanResult(success, message, autoHide = true) {
        const statusType = success ? 'success' : 'danger';
        this.showStatus(statusType, message, autoHide);
    }
    
    showStatus(type, message, autoHide = true) {
        if (!this.statusDiv) return;
        
        const alertClass = `alert-${type}`;
        const alert = this.statusDiv.querySelector('.alert');
        
        alert.className = `alert ${alertClass}`;
        alert.querySelector('.status-message').textContent = message;
        
        this.statusDiv.style.display = 'block';
        
        if (autoHide && type === 'success') {
            setTimeout(() => {
                this.statusDiv.style.display = 'none';
            }, 3000);
        }
    }
    
    addToRecentScans(scan) {
        if (!this.recentScansDiv) return;
        
        const tbody = this.recentScansDiv.querySelector('.recent-scans-body');
        if (!tbody) return;
        
        const row = document.createElement('tr');
        const statusIcon = scan.success ? '✅' : '❌';
        const timeStr = scan.timestamp.toLocaleTimeString();
        
        row.innerHTML = `
            <td class="text-muted small">${timeStr}</td>
            <td><code>${this.escapeHtml(scan.barcode)}</code></td>
            <td class="small">${statusIcon} ${this.escapeHtml(scan.result)}</td>
        `;
        
        tbody.insertBefore(row, tbody.firstChild);
        
        // Keep only last 10 scans
        while (tbody.children.length > 10) {
            tbody.removeChild(tbody.lastChild);
        }
        
        this.recentScansDiv.style.display = 'block';
    }
    
    clearInput() {
        if (this.input) {
            this.input.value = '';
        }
        
        if (this.statusDiv) {
            this.statusDiv.style.display = 'none';
        }
        
        if (this.resultsDiv) {
            this.resultsDiv.style.display = 'none';
        }
    }
    
    setProcessingState(processing) {
        if (this.submitButton) {
            this.submitButton.disabled = processing;
        }
        
        if (this.input) {
            this.input.disabled = processing;
        }
        
        const spinner = this.statusDiv?.querySelector('.spinner-border');
        if (spinner) {
            spinner.style.display = processing ? 'inline-block' : 'none';
        }
        
        if (processing) {
            this.showStatus('info', '🔍 Processing scan...', false);
        }
    }
    
    setupDocumentKeyListener() {
        this.barcodeBuffer = '';
        this.barcodeTimeout = null;
        
        this.documentKeyHandler = (e) => {
            if (e.key === 'Enter') {
                if (this.barcodeBuffer.trim()) {
                    const barcode = this.barcodeBuffer.trim();
                    this.barcodeBuffer = '';
                    this.emitScanEvent(barcode);
                }
                return;
            }
            
            if (e.key.length === 1) {
                this.barcodeBuffer += e.key;
                
                clearTimeout(this.barcodeTimeout);
                this.barcodeTimeout = setTimeout(() => {
                    this.barcodeBuffer = '';
                }, 2000);
            }
        };
        
        document.addEventListener('keydown', this.documentKeyHandler);
        
        window.addEventListener('beforeunload', () => {
            document.removeEventListener('keydown', this.documentKeyHandler);
            clearTimeout(this.barcodeTimeout);
        });
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    updateHealthIndicator(status = 'ready', message = '') {
        const healthIndicator = document.getElementById(`scanner-health-${this.containerId}`);
        if (!healthIndicator) return;
        
        healthIndicator.classList.remove('ready', 'not-ready', 'processing');
        healthIndicator.classList.add('ready');
        healthIndicator.title = 'Scanner Ready';
    }
}

// Station Detection and Handler Registration System
class StationScanHandler {
    constructor() {
        this.stationType = this.detectStationType();
        this.endpoints = this.getStationEndpoints();
        this.scanHandler = null;
        
        this.setupScanHandler();
    }
    
    detectStationType() {
        const path = window.location.pathname.toLowerCase();
        
        if (path.includes('/sorting')) return 'sorting';
        if (path.includes('/assembly')) return 'assembly';
        if (path.includes('/cnc')) return 'cnc';
        if (path.includes('/shipping')) return 'shipping';
        
        return 'unknown';
    }
    
    getStationEndpoints() {
        const endpoints = {
            sorting: ['/Sorting/ScanPart'],
            assembly: ['/Assembly/ScanPartForAssembly'],
            cnc: ['/Cnc/ScanNestSheet'],
            shipping: ['/Shipping/ScanPart']
        };
        
        return endpoints[this.stationType] || [];
    }
    
    setupScanHandler() {
        if (this.stationType === 'unknown' || this.endpoints.length === 0) {
            return;
        }
        
        // Clean up existing handler
        if (this.scanHandler) {
            document.removeEventListener('scanReceived', this.scanHandler);
        }
        
        this.scanHandler = (event) => this.handleStationScan(event);
        document.addEventListener('scanReceived', this.scanHandler);
        
        
        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (this.scanHandler) {
                document.removeEventListener('scanReceived', this.scanHandler);
            }
        });
    }
    
    async handleStationScan(event) {
        const { barcode, containerId, scanner } = event.detail;
        
        
        // Try each endpoint until one succeeds
        for (const endpoint of this.endpoints) {
            try {
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `barcode=${encodeURIComponent(barcode)}`
                });
                
                const data = await response.json();
                
                if (data.success) {
                    scanner.showScanResult(true, data.message || 'Scan successful');
                    scanner.addToRecentScans({
                        barcode: barcode,
                        result: data.message || 'Processed successfully',
                        success: true,
                        timestamp: new Date()
                    });
                    return; // Success - don't try other endpoints
                } else {
                    // Continue to next endpoint if this one didn't handle it
                }
            } catch (error) {
                console.error(`Error with endpoint ${endpoint}:`, error);
                // Continue to next endpoint
            }
        }
        
        // If we get here, no endpoint handled the scan
        scanner.showScanResult(false, `No handler found for barcode: ${barcode}`);
        scanner.addToRecentScans({
            barcode: barcode,
            result: 'No matching handler',
            success: false,
            timestamp: new Date()
        });
    }
}

// Global scanner instances registry
window.universalScanners = window.universalScanners || {};

// Auto-initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize station handler
    window.stationScanHandler = new StationScanHandler();
    
    // Find all scanner containers and auto-initialize
    const scannerInputs = document.querySelectorAll('.universal-scanner-input');
    
    scannerInputs.forEach(input => {
        const containerId = input.dataset.container;
        
        if (containerId && !window.universalScanners[containerId]) {
            const scanner = new UniversalScanner(containerId, {
                clearOnSuccess: true,
                showRecentScans: true
            });
            window.universalScanners[containerId] = scanner;
        }
    });
    
});
</script>

