@model ShopBoss.Web.Services.TimelineData

@{
    var projectId = Model.Project.Id;
    var timelineId = ViewData["TimelineId"]?.ToString() ?? $"timeline-{projectId}";
}

<div id="@timelineId" class="timeline-container border rounded p-3">
    @if (Model.TaskBlocks.Any() || Model.UnblockedEvents.Any())
    {
        <!-- TaskBlocks with their events -->
        @foreach (var block in Model.TaskBlocks.OrderBy(tb => tb.DisplayOrder))
        {
            <div class="task-block mb-2" data-block-id="@block.Id">
                <div class="task-block-header d-flex justify-content-between align-items-center p-2 bg-light border rounded">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-folder me-2 text-primary"></i>
                        <h6 class="mb-0 fw-bold">@block.Name</h6>
                        @if (!string.IsNullOrEmpty(block.Description))
                        {
                            <small class="text-muted ms-2">• @block.Description</small>
                        }
                        <span class="badge bg-info ms-2">@block.Events.Count events</span>
                    </div>
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary btn-sm" 
                                onclick="editTaskBlock('@block.Id', '@block.Name', '@(block.Description ?? "")')" 
                                title="Edit block">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                onclick="deleteTaskBlock('@block.Id')" 
                                title="Delete block">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Events within this block -->
                <div class="task-block-events ms-3 mt-1">
                    @foreach (var evt in block.Events.OrderBy(e => e.BlockDisplayOrder ?? 0).ThenBy(e => e.EventDate))
                    {
                        <div class="timeline-event blocked-event" data-event-id="@evt.Id">
                            <div class="event-content">
                                <div class="event-header d-flex justify-content-between align-items-center mb-1">
                                    <div class="event-metadata">
                                        <span class="badge bg-@(evt.EventType == "comment" ? "info" : "secondary") me-1">@evt.EventType</span>
                                        @if (evt.RowNumber.HasValue)
                                        {
                                            <span class="badge bg-primary me-1">Row @evt.RowNumber</span>
                                        }
                                        <small class="text-muted me-1">@evt.EventDate.ToString("yyyy-MM-dd HH:mm")</small>
                                        <small class="text-muted">by @(evt.CreatedBy ?? "Unknown")</small>
                                    </div>
                                    <button type="button" class="btn btn-outline-warning btn-sm" 
                                            onclick="unassignEventFromBlock('@evt.Id')" 
                                            title="Remove from block">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="event-description mb-1">
                                    @if (evt.EventType == "attachment" && !string.IsNullOrEmpty(evt.AttachmentId))
                                    {
                                        @* Render attachment event as downloadable link *@
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-file text-muted me-2" style="font-size: 0.9em;"></i>
                                            <a href="@Url.Action("DownloadFile", "Project", new { id = evt.AttachmentId })" 
                                               class="text-decoration-none me-2" style="font-size: 0.9em;">
                                                @{
                                                    var fileName = evt.Description.Replace("File uploaded: ", "").Replace("File deleted: ", "");
                                                    if (fileName.Contains(" ("))
                                                    {
                                                        fileName = fileName.Substring(0, fileName.IndexOf(" ("));
                                                    }
                                                }
                                                @fileName
                                            </a>
                                            @if (evt.Description.Contains("deleted"))
                                            {
                                                <span class="badge bg-danger" style="font-size: 0.7em;">Deleted</span>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-sm btn-link text-danger p-0 ms-2" 
                                                        onclick="deleteFile('@evt.AttachmentId', '@Model.Project.Id')" title="Delete">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                        </div>
                                    }
                                    else if (evt.EventType == "purchase_order")
                                    {
                                        @* Render purchase order event with inline details *@
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-file-invoice text-muted me-2" style="font-size: 0.9em;"></i>
                                            @if (!string.IsNullOrEmpty(evt.PurchaseOrderId))
                                            {
                                                @* Active purchase order with edit/delete buttons *@
                                                <div class="flex-grow-1" style="font-size: 0.9em;">
                                                    @{
                                                        // Extract PO details from description
                                                        var poDetails = evt.Description;
                                                        if (poDetails.Contains(":"))
                                                        {
                                                            poDetails = poDetails.Substring(poDetails.IndexOf(":") + 1).Trim();
                                                        }
                                                    }
                                                    <strong>@poDetails.Split(" - ")[0]</strong>
                                                    @if (poDetails.Contains(" - ") && poDetails.Split(" - ").Length > 1)
                                                    {
                                                        <small class="text-muted ms-2">• @poDetails.Split(" - ")[1]</small>
                                                    }
                                                    @if (evt.Description.Contains("status changed") && evt.Description.Contains("→"))
                                                    {
                                                        var statusPart = evt.Description.Substring(evt.Description.IndexOf("→") + 1).Trim();
                                                        var statusBadgeClass = statusPart switch
                                                        {
                                                            "Pending" => "bg-warning",
                                                            "Ordered" => "bg-primary",
                                                            "Received" => "bg-success",
                                                            "Cancelled" => "bg-danger",
                                                            _ => "bg-secondary"
                                                        };
                                                        <small class="text-muted ms-2">• <span class="badge @statusBadgeClass" style="font-size: 0.7em;">@statusPart</span></small>
                                                    }
                                                </div>
                                                <div class="d-flex">
                                                    <button type="button" class="btn btn-sm btn-link text-primary p-0 me-2" 
                                                            onclick="editPurchaseOrder('@evt.PurchaseOrderId', '@Model.Project.Id')" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                            onclick="deletePurchaseOrder('@evt.PurchaseOrderId', '@Model.Project.Id')" title="Delete">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                @* Deleted purchase order - just show description *@
                                                <span class="text-muted" style="font-size: 0.9em;">@evt.Description</span>
                                            }
                                        </div>
                                    }
                                    else if (evt.EventType == "work_order")
                                    {
                                        @* Render work order event *@
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-cog text-primary me-2" style="font-size: 0.9em;" title="Manufacturing Work Order"></i>
                                            <div class="flex-grow-1" style="font-size: 0.9em;">
                                                <strong>@evt.Description</strong>
                                                @if (evt.WorkOrder != null)
                                                {
                                                    <small class="text-muted ms-2">• Imported: @evt.WorkOrder.ImportedDate.ToString("MM/dd/yy")</small>
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(evt.WorkOrderId))
                                            {
                                                <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                        onclick="detachWorkOrder('@evt.WorkOrderId', '@Model.Project.Id')" title="Remove">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            }
                                        </div>
                                    }
                                    else if (evt.EventType == "custom_work_order")
                                    {
                                        @* Render custom work order event *@
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-wrench text-info me-2" style="font-size: 0.9em;" title="Custom Work Order"></i>
                                            <div class="flex-grow-1" style="font-size: 0.9em;">
                                                <strong>@evt.Description</strong>
                                                @if (evt.CustomWorkOrder != null)
                                                {
                                                    <small class="text-muted ms-2">
                                                        • @evt.CustomWorkOrder.WorkOrderType.ToString()
                                                        @{
                                                            var statusBadgeClass = evt.CustomWorkOrder.Status switch
                                                            {
                                                                CustomWorkOrderStatus.Pending => "bg-warning",
                                                                CustomWorkOrderStatus.InProgress => "bg-primary",
                                                                CustomWorkOrderStatus.Completed => "bg-success",
                                                                CustomWorkOrderStatus.Cancelled => "bg-danger",
                                                                _ => "bg-secondary"
                                                            };
                                                        }
                                                        • <span class="badge @statusBadgeClass" style="font-size: 0.7em;">@evt.CustomWorkOrder.Status</span>
                                                    </small>
                                                }
                                            </div>
                                            @if (!string.IsNullOrEmpty(evt.CustomWorkOrderId))
                                            {
                                                <div class="d-flex">
                                                    <button type="button" class="btn btn-sm btn-link text-primary p-0 me-2" 
                                                            onclick="editCustomWorkOrder('@evt.CustomWorkOrderId', '@Model.Project.Id')" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                            onclick="deleteCustomWorkOrder('@evt.CustomWorkOrderId', '@Model.Project.Id')" title="Delete">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        @evt.Description
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Unblocked Events -->
        @if (Model.UnblockedEvents.Any())
        {
            <div class="unblocked-events">
                <div class="section-header d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 text-muted">
                        <i class="fas fa-clock me-1"></i>Unblocked Events (@Model.UnblockedEvents.Count)
                    </h6>
                    <button type="button" class="btn btn-outline-primary btn-sm" 
                            onclick="showCreateTaskBlock('@projectId')" 
                            title="Create new block">
                        <i class="fas fa-plus me-1"></i>New Block
                    </button>
                </div>
                
                @foreach (var evt in Model.UnblockedEvents.OrderBy(e => e.EventDate))
                {
                    <div class="timeline-event unblocked-event" data-event-id="@evt.Id">
                        <div class="event-content">
                            <div class="event-header d-flex align-items-center mb-1">
                                <input type="checkbox" class="form-check-input me-2 event-selector" 
                                       value="@evt.Id" title="Select for blocking">
                                <div class="event-metadata flex-grow-1">
                                    <span class="badge bg-@(evt.EventType == "comment" ? "info" : "secondary") me-1">@evt.EventType</span>
                                    @if (evt.RowNumber.HasValue)
                                    {
                                        <span class="badge bg-primary me-1">Row @evt.RowNumber</span>
                                    }
                                    <small class="text-muted me-1">@evt.EventDate.ToString("yyyy-MM-dd HH:mm")</small>
                                    <small class="text-muted">by @(evt.CreatedBy ?? "Unknown")</small>
                                </div>
                            </div>
                            <div class="event-description mb-1">
                                @if (evt.EventType == "attachment" && !string.IsNullOrEmpty(evt.AttachmentId))
                                {
                                    @* Render attachment event as downloadable link *@
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-file text-muted me-2" style="font-size: 0.9em;"></i>
                                        <a href="@Url.Action("DownloadFile", "Project", new { id = evt.AttachmentId })" 
                                           class="text-decoration-none me-2" style="font-size: 0.9em;">
                                            @{
                                                var fileName = evt.Description.Replace("File uploaded: ", "").Replace("File deleted: ", "");
                                                if (fileName.Contains(" ("))
                                                {
                                                    fileName = fileName.Substring(0, fileName.IndexOf(" ("));
                                                }
                                            }
                                            @fileName
                                        </a>
                                        @if (evt.Description.Contains("deleted"))
                                        {
                                            <span class="badge bg-danger" style="font-size: 0.7em;">Deleted</span>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-sm btn-link text-danger p-0 ms-2" 
                                                    onclick="deleteFile('@evt.AttachmentId', '@Model.Project.Id')" title="Delete">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                    </div>
                                }
                                else if (evt.EventType == "purchase_order")
                                {
                                    @* Render purchase order event with inline details *@
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-file-invoice text-muted me-2" style="font-size: 0.9em;"></i>
                                        @if (!string.IsNullOrEmpty(evt.PurchaseOrderId))
                                        {
                                            @* Active purchase order with edit/delete buttons *@
                                            <div class="flex-grow-1" style="font-size: 0.9em;">
                                                @{
                                                    // Extract PO details from description
                                                    var poDetails = evt.Description;
                                                    if (poDetails.Contains(":"))
                                                    {
                                                        poDetails = poDetails.Substring(poDetails.IndexOf(":") + 1).Trim();
                                                    }
                                                }
                                                <strong>@poDetails.Split(" - ")[0]</strong>
                                                @if (poDetails.Contains(" - ") && poDetails.Split(" - ").Length > 1)
                                                {
                                                    <small class="text-muted ms-2">• @poDetails.Split(" - ")[1]</small>
                                                }
                                                @if (evt.Description.Contains("status changed") && evt.Description.Contains("→"))
                                                {
                                                    var statusPart = evt.Description.Substring(evt.Description.IndexOf("→") + 1).Trim();
                                                    var statusBadgeClass = statusPart switch
                                                    {
                                                        "Pending" => "bg-warning",
                                                        "Ordered" => "bg-primary",
                                                        "Received" => "bg-success",
                                                        "Cancelled" => "bg-danger",
                                                        _ => "bg-secondary"
                                                    };
                                                    <small class="text-muted ms-2">• <span class="badge @statusBadgeClass" style="font-size: 0.7em;">@statusPart</span></small>
                                                }
                                            </div>
                                            <div class="d-flex">
                                                <button type="button" class="btn btn-sm btn-link text-primary p-0 me-2" 
                                                        onclick="editPurchaseOrder('@evt.PurchaseOrderId', '@Model.Project.Id')" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                        onclick="deletePurchaseOrder('@evt.PurchaseOrderId', '@Model.Project.Id')" title="Delete">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            @* Deleted purchase order - just show description *@
                                            <span class="text-muted" style="font-size: 0.9em;">@evt.Description</span>
                                        }
                                    </div>
                                }
                                else if (evt.EventType == "work_order")
                                {
                                    @* Render work order event *@
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-cog text-primary me-2" style="font-size: 0.9em;" title="Manufacturing Work Order"></i>
                                        <div class="flex-grow-1" style="font-size: 0.9em;">
                                            <strong>@evt.Description</strong>
                                            @if (evt.WorkOrder != null)
                                            {
                                                <small class="text-muted ms-2">• Imported: @evt.WorkOrder.ImportedDate.ToString("MM/dd/yy")</small>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(evt.WorkOrderId))
                                        {
                                            <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                    onclick="detachWorkOrder('@evt.WorkOrderId', '@Model.Project.Id')" title="Remove">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        }
                                    </div>
                                }
                                else if (evt.EventType == "custom_work_order")
                                {
                                    @* Render custom work order event *@
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-wrench text-info me-2" style="font-size: 0.9em;" title="Custom Work Order"></i>
                                        <div class="flex-grow-1" style="font-size: 0.9em;">
                                            <strong>@evt.Description</strong>
                                            @if (evt.CustomWorkOrder != null)
                                            {
                                                <small class="text-muted ms-2">
                                                    • @evt.CustomWorkOrder.WorkOrderType.ToString()
                                                    @{
                                                        var statusBadgeClass = evt.CustomWorkOrder.Status switch
                                                        {
                                                            CustomWorkOrderStatus.Pending => "bg-warning",
                                                            CustomWorkOrderStatus.InProgress => "bg-primary",
                                                            CustomWorkOrderStatus.Completed => "bg-success",
                                                            CustomWorkOrderStatus.Cancelled => "bg-danger",
                                                            _ => "bg-secondary"
                                                        };
                                                    }
                                                    • <span class="badge @statusBadgeClass" style="font-size: 0.7em;">@evt.CustomWorkOrder.Status</span>
                                                </small>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(evt.CustomWorkOrderId))
                                        {
                                            <div class="d-flex">
                                                <button type="button" class="btn btn-sm btn-link text-primary p-0 me-2" 
                                                        onclick="editCustomWorkOrder('@evt.CustomWorkOrderId', '@Model.Project.Id')" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-link text-danger p-0" 
                                                        onclick="deleteCustomWorkOrder('@evt.CustomWorkOrderId', '@Model.Project.Id')" title="Delete">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    @evt.Description
                                }
                            </div>
                        </div>
                    </div>
                }
                
                <!-- Bulk Actions for Unblocked Events -->
                <div class="bulk-actions mt-3 d-none" id="bulk-actions-@projectId">
                    <div class="d-flex gap-2 align-items-center p-2 bg-light rounded">
                        <small class="text-muted">Selected: <span id="selected-count-@projectId">0</span></small>
                        <button type="button" class="btn btn-sm btn-primary" 
                                onclick="assignSelectedToNewBlock('@projectId')">
                            <i class="fas fa-plus me-1"></i>Create Block
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary" 
                                onclick="showAssignToExistingBlock('@projectId')">
                            <i class="fas fa-folder-plus me-1"></i>Add to Existing
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" 
                                onclick="clearSelection('@projectId')">
                            Clear
                        </button>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center text-muted py-4">
            <i class="fas fa-history fa-2x mb-2"></i>
            <p>No timeline events found</p>
            <small>Events will appear here after SmartSheet data is imported</small>
        </div>
    }
</div>

<style>
    .timeline-event {
        margin-bottom: 4px;
        padding: 2px 0;
    }
    
    .timeline-event .event-content {
        /* No padding needed since we removed the marker */
    }
    
    .timeline-event .event-header {
        margin-bottom: 2px;
    }
    
    .timeline-event .event-metadata {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 2px;
    }
    
    .timeline-event .event-description {
        margin-bottom: 1px;
        line-height: 1.2;
    }
    
    .timeline-event .badge {
        font-size: 0.7em;
    }
    
    .task-block {
        border: 1px solid #dee2e6;
        border-radius: 6px;
        background-color: #f8f9fa;
    }
    
    .task-block-header {
        border-bottom: 1px solid #dee2e6;
    }
    
    .task-block-events {
        background-color: white;
        padding: 8px;
        border-radius: 0 0 6px 6px;
    }
    
    .event-selector {
        cursor: pointer;
    }
    
    .bulk-actions {
        border-top: 1px solid #dee2e6;
        margin-top: 8px;
        padding-top: 5px;
    }
    
    .section-header {
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 4px;
    }
</style>