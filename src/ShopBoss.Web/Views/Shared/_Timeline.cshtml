@model ShopBoss.Web.Services.TimelineData

@{
    var projectId = Model.Project.Id;
    var timelineId = ViewData["TimelineId"]?.ToString() ?? $"timeline-{projectId}";
}

<div id="@timelineId" class="timeline-container border rounded p-3">
    @if (Model.TaskBlocks.Any() || Model.UnblockedEvents.Any())
    {
        <!-- TaskBlocks with their events (recursive nesting) -->
        @foreach (var block in Model.TaskBlocks)
        {
            ViewData["NestingLevel"] = 0;
            @await Html.PartialAsync("_TaskBlockRecursive", block, ViewData)
        }

        <!-- Unblocked Events -->
        @foreach (var evt in Model.UnblockedEvents)
        {
            <div class="timeline-event unblocked-event" data-event-id="@evt.Id">
                <div class="event-primary d-flex align-items-center">
                    @* Left icon as drag handle *@
                    @if (evt.EventType == "attachment")
                    {
                        <i class="fas fa-paperclip event-icon text-muted" title="Attachment"></i>
                    }
                    else if (evt.EventType == "comment")
                    {
                        <i class="fas fa-comment event-icon text-muted" title="Comment"></i>
                    }
                    else if (evt.EventType == "purchase-order")
                    {
                        <i class="fas fa-shopping-cart event-icon text-muted" title="Purchase Order"></i>
                    }
                    else if (evt.EventType == "work-order")
                    {
                        <i class="fas fa-cog event-icon text-muted" title="Work Order"></i>
                    }
                    else
                    {
                        <i class="fas fa-clipboard-list event-icon text-muted" title="Event"></i>
                    }

                    @* Primary text *@
                    <div>
                        @if (evt.EventType == "attachment" && evt.Attachment != null)
                        {
                            <a href="/Project/DownloadFile/@evt.Attachment.Id" class="text-decoration-none" title="Download @evt.Attachment.FileName">
                                <strong>@evt.Attachment.OriginalFileName</strong>
                            </a>
                            @if (evt.RowNumber.HasValue)
                            {
                                <span class="badge bg-primary row-badge">Row @evt.RowNumber</span>
                            }
                        }
                        else
                        {
                            <strong>@(String.IsNullOrEmpty(evt.Description) ? evt.EventType : evt.Description.Split('\n')[0])</strong>
                            @if (evt.RowNumber.HasValue)
                            {
                                <span class="badge bg-primary row-badge">Row @evt.RowNumber</span>
                            }
                        }

                        @* Delete button inline after primary text and badge *@
                        <button type="button" class="btn btn-sm btn-link text-danger p-0 ms-2"
                                data-action="delete-event" data-project-id="@projectId"
                                data-event-id="@evt.Id"
                                @if (evt.Attachment != null) { <text>data-attachment-id="@evt.Attachment.Id"</text>; }
                                title="Delete">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                @* Secondary details *@
                <div class="event-secondary text-muted small mt-1">
                    @if (evt.EventType == "attachment" && evt.Attachment != null)
                    {
                        <span>@((evt.Attachment.FileSize / 1024.0 / 1024.0).ToString("F2")) MB</span>
                    }
                    @if (!string.IsNullOrEmpty(evt.Description))
                    {
                        <div>@evt.Description</div>
                    }
                    <div>@evt.EventDate.ToString("yyyy-MM-dd HH:mm") by @(evt.CreatedBy ?? "Unknown")</div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center text-muted py-4">
            <i class="fas fa-history fa-2x mb-2"></i>
            <p>No timeline events found</p>
            <small>Events will appear here after Smartsheet data is imported</small>
        </div>
    }
</div>

@* Styles moved to site.css *@
