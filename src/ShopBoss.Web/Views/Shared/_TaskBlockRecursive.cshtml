@model ShopBoss.Web.Models.TaskBlock

@{
    var nestingLevel = ViewData["NestingLevel"] as int? ?? 0;
    var indentClass = nestingLevel > 0 ? $"ms-{Math.Min(nestingLevel * 3, 12)}" : "";
    var blockIcon = "fas fa-cube";
}

<div class="task-block mb-2 @indentClass" data-block-id="@Model.Id" data-nesting-level="@nestingLevel">
    <div class="task-block-header d-flex justify-content-between align-items-center p-2 bg-light border rounded">
        <div class="d-flex align-items-center">
            <div class="chevron-col d-flex align-items-center" 
                 data-bs-toggle="collapse" 
                 data-bs-target="#collapse-@Model.Id" 
                 role="button"
                 style="cursor: pointer;"
                 aria-expanded="true" 
                 aria-controls="collapse-@Model.Id">
                <i class="fas fa-chevron-down collapse-icon text-muted transition-transform" title="Collapse/Expand block"></i>
            </div>
            <div class="d-flex align-items-center"
                 data-bs-toggle="collapse"
                 data-bs-target="#collapse-@Model.Id"
                 role="button"
                 style="cursor: pointer;"
                 aria-expanded="true"
                 aria-controls="collapse-@Model.Id">
                <i class="@blockIcon block-icon me-2 text-primary" title="Drag to reorder block"></i>
                <h6 class="mb-0 fw-bold">@Model.Name</h6>
            </div>
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <small class="text-muted ms-2">â€¢ @Model.Description</small>
            }
            <span class="badge bg-info ms-2">@Model.Events.Count events</span>
            @if (Model.ChildTaskBlocks.Any())
            {
                <span class="badge bg-secondary ms-1">@Model.ChildTaskBlocks.Count nested</span>
            }
        </div>
        <div class="d-flex align-items-center gap-1">
            <!-- Component Creation Buttons -->
            <div class="btn-group btn-group-sm me-2" role="group">
                <button type="button" class="btn btn-outline-primary btn-sm" 
                        data-action="show-upload-file-modal" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Upload File">
                    <i class="fas fa-paperclip"></i>
                </button>
                <button type="button" class="btn btn-outline-success btn-sm" 
                        data-action="show-create-purchase-order" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Purchase Order">
                    <i class="fas fa-shopping-cart"></i>
                </button>
                <button type="button" class="btn btn-outline-success btn-sm" 
                        data-action="show-associate-work-orders" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Manufacturing Work Order">
                    <i class="fas fa-cog"></i>
                </button>
                <button type="button" class="btn btn-outline-info btn-sm" 
                        data-action="show-create-custom-work-order" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Custom Work Order">
                    <i class="fas fa-pencil-alt"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm" 
                        data-action="show-add-comment" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Comment">
                    <i class="fas fa-comment"></i>
                </button>
                <button type="button" class="btn btn-outline-warning btn-sm" 
                        data-action="create-nested-task-block" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Nested Block">
                    <i class="fas fa-cube"></i>
                </button>
            </div>
            
            <!-- Block Management Buttons -->
            <div class="btn-group btn-group-sm" role="group">
                <button type="button" class="btn btn-outline-secondary btn-sm" 
                        data-action="edit-task-block" data-block-id="@Model.Id" 
                        data-block-name="@Model.Name" data-block-description="@(Model.Description ?? "")"
                        title="Edit block">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button" class="btn btn-outline-danger btn-sm" 
                        data-action="delete-task-block" data-block-id="@Model.Id"
                        title="Delete block">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Events and nested blocks within this block (unified container for mixed ordering) -->
    <div class="collapse show" id="collapse-@Model.Id">
        <div class="task-block-content mt-1" data-block-id="@Model.Id">
            @{
                // Create a unified list of items (events and child blocks) for mixed ordering
                var allItems = new List<object>();
                
                // Add events
                foreach (var evt in Model.Events.OrderBy(e => e.BlockDisplayOrder ?? 0).ThenBy(e => e.EventDate))
                {
                    allItems.Add(new { Type = "Event", Item = evt, Order = evt.BlockDisplayOrder ?? 0 });
                }
                
                // Add child TaskBlocks  
                foreach (var childBlock in Model.ChildTaskBlocks.OrderBy(cb => cb.DisplayOrder))
                {
                    allItems.Add(new { Type = "TaskBlock", Item = childBlock, Order = childBlock.DisplayOrder });
                }
                
                // Sort by order for mixed display
                allItems = allItems.OrderBy(item => ((dynamic)item).Order).ToList();
            }
            
            @foreach (var item in allItems)
            {
                @if (((dynamic)item).Type == "Event")
                {
                    var evt = (ShopBoss.Web.Models.ProjectEvent)((dynamic)item).Item;
                    <div class="timeline-event blocked-event" data-event-id="@evt.Id">
                        <div class="event-content">
                            <div class="event-description">
                                <div class="event-primary d-flex align-items-center">
                                    @if (evt.EventType == "attachment")
                                    {
                                        <i class="fas fa-paperclip event-icon text-muted" title="Attachment"></i>
                                    }
                                    else if (evt.EventType == "comment")
                                    {
                                        <i class="fas fa-comment event-icon text-muted" title="Comment"></i>
                                    }
                                    else if (evt.EventType == "purchase-order")
                                    {
                                        <i class="fas fa-shopping-cart event-icon text-muted" title="Purchase Order"></i>
                                    }
                                    else if (evt.EventType == "work-order")
                                    {
                                        <i class="fas fa-cog event-icon text-muted" title="Work Order"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-clipboard-list event-icon text-muted" title="Event"></i>
                                    }

                                    <div>
                                        @if (evt.EventType == "attachment" && evt.Attachment != null)
                                        {
                                            <a href="/Project/DownloadFile/@evt.Attachment.Id" class="text-decoration-none" title="Download @evt.Attachment.FileName">
                                                <strong>@evt.Attachment.OriginalFileName</strong>
                                            </a>
                                            @if (evt.RowNumber.HasValue)
                                            {
                                                <span class="badge bg-primary row-badge">Row @evt.RowNumber</span>
                                            }
                                        }
                                        else
                                        {
                                            <strong>@(String.IsNullOrEmpty(evt.Description) ? evt.EventType : evt.Description.Split('\n')[0])</strong>
                                            @if (evt.RowNumber.HasValue)
                                            {
                                                <span class="badge bg-primary row-badge">Row @evt.RowNumber</span>
                                            }
                                        }

                                        <button type="button" class="btn btn-sm btn-link text-danger p-0 ms-2"
                                                data-action="delete-event" data-project-id="@Model.ProjectId"
                                                data-event-id="@evt.Id"
                                                @if (evt.Attachment != null) { <text>data-attachment-id="@evt.Attachment.Id"</text>; }
                                                title="Delete">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>

                                <div class="event-secondary text-muted small mt-1">
                                    @if (evt.EventType == "attachment" && evt.Attachment != null)
                                    {
                                        <span>@((evt.Attachment.FileSize / 1024.0 / 1024.0).ToString("F2")) MB</span>
                                    }
                                    @if (!string.IsNullOrEmpty(evt.Description))
                                    {
                                        <div>@evt.Description</div>
                                    }
                                    <div>@evt.EventDate.ToString("yyyy-MM-dd HH:mm") by @(evt.CreatedBy ?? "Unknown")</div>
                            </div>
                        </div>
                    </div>
                    </div>
                }
                else if (((dynamic)item).Type == "TaskBlock")
                {
                    var childBlock = (ShopBoss.Web.Models.TaskBlock)((dynamic)item).Item;
                    ViewData["NestingLevel"] = nestingLevel + 1;
                    @await Html.PartialAsync("_TaskBlockRecursive", childBlock, ViewData)
                }
            }
        </div>
    </div>
</div>
