@model ShopBoss.Web.Models.TaskBlock

@{
    var nestingLevel = ViewData["NestingLevel"] as int? ?? 0;
    var indentClass = nestingLevel > 0 ? $"ms-{Math.Min(nestingLevel * 3, 12)}" : "";
    var blockIcon = "fas fa-cube";
}

<div class="task-block mb-2 @indentClass" data-block-id="@Model.Id" data-nesting-level="@nestingLevel">
    <div class="task-block-header d-flex justify-content-between align-items-center p-2 bg-light border rounded">
        <div class="d-flex align-items-center">
            <div class="chevron-col d-flex align-items-center" 
                 data-bs-toggle="collapse" 
                 data-bs-target="#collapse-@Model.Id" 
                 role="button"
                 style="cursor: pointer;"
                 aria-expanded="true" 
                 aria-controls="collapse-@Model.Id">
                <i class="fas fa-chevron-down collapse-icon text-muted transition-transform" title="Collapse/Expand block"></i>
            </div>
            <div class="d-flex align-items-center"
                 data-bs-toggle="collapse"
                 data-bs-target="#collapse-@Model.Id"
                 role="button"
                 style="cursor: pointer;"
                 aria-expanded="true"
                 aria-controls="collapse-@Model.Id">
                <i class="@blockIcon block-icon me-2 text-primary" title="Drag to reorder block"></i>
                <h6 class="mb-0 fw-bold">@Model.Name</h6>
            </div>
            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <small class="text-muted ms-2">â€¢ @Model.Description</small>
            }
            @* Removed event and nested counts for a cleaner header *@
        </div>
        <div class="task-block-toolbox">
            <button class="toolbox-trigger btn btn-sm btn-outline-secondary" title="Actions">
                <i class="fas fa-ellipsis-v"></i>
            </button>
            <div class="toolbox-buttons">
                <!-- Component Creation Buttons -->
                <button type="button" class="btn btn-outline-primary btn-sm" 
                        data-action="show-upload-file-modal" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Upload File">
                    <i class="fas fa-paperclip"></i>
                </button>
                <button type="button" class="btn btn-outline-success btn-sm" 
                        data-action="show-create-purchase-order" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Purchase Order">
                    <i class="fas fa-shopping-cart"></i>
                </button>
                <button type="button" class="btn btn-outline-success btn-sm" 
                        data-action="show-associate-work-orders" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Manufacturing Work Order">
                    <i class="fas fa-cog"></i>
                </button>
                <button type="button" class="btn btn-outline-info btn-sm" 
                        data-action="show-create-custom-work-order" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Custom Work Order">
                    <i class="fas fa-pencil-alt"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm" 
                        data-action="show-add-comment" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Comment">
                    <i class="fas fa-comment"></i>
                </button>
                <button type="button" class="btn btn-outline-warning btn-sm" 
                        data-action="create-nested-task-block" data-project-id="@Model.ProjectId" data-block-id="@Model.Id"
                        title="Add Nested Block">
                    <i class="fas fa-cube"></i>
                </button>
                
                <!-- Divider -->
                <div class="toolbox-divider"></div>
                
                <!-- Block Management Buttons -->
                <button type="button" class="btn btn-outline-secondary btn-sm" 
                        data-action="edit-task-block" data-block-id="@Model.Id" 
                        data-block-name="@Model.Name" data-block-description="@(Model.Description ?? "")"
                        title="Edit block">
                    <i class="fas fa-edit"></i>
                </button>
                <button type="button" class="btn btn-outline-danger btn-sm" 
                        data-action="delete-task-block" data-block-id="@Model.Id"
                        title="Delete block">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Events and nested blocks within this block (unified container for mixed ordering) -->
    <div class="collapse show" id="collapse-@Model.Id">
        <div class="task-block-content mt-1" data-block-id="@Model.Id">
            @{
                // Create a unified list of items (events and child blocks) for mixed ordering
                var allItems = new List<object>();
                
                // Add events
                foreach (var evt in Model.Events.OrderBy(e => e.BlockDisplayOrder ?? 0).ThenBy(e => e.EventDate))
                {
                    allItems.Add(new { Type = "Event", Item = evt, Order = evt.BlockDisplayOrder ?? 0 });
                }
                
                // Add child TaskBlocks  
                foreach (var childBlock in Model.ChildTaskBlocks.OrderBy(cb => cb.DisplayOrder))
                {
                    allItems.Add(new { Type = "TaskBlock", Item = childBlock, Order = childBlock.DisplayOrder });
                }
                
                // Sort by order for mixed display
                allItems = allItems.OrderBy(item => ((dynamic)item).Order).ToList();
            }
            
            @foreach (var item in allItems)
            {
                @if (((dynamic)item).Type == "Event")
                {
                    var evt = (ShopBoss.Web.Models.ProjectEvent)((dynamic)item).Item;
                    <div class="timeline-event blocked-event" data-event-id="@evt.Id">
                        <div class="event-content">
                            <div class="event-description">
                                @{
                                    var viewData = new ViewDataDictionary(ViewData) { ["ProjectId"] = Model.ProjectId };
                                }
                                @await Html.PartialAsync("_TimelineEvent", evt, viewData)
                            </div>
                        </div>
                    </div>
                }
                else if (((dynamic)item).Type == "TaskBlock")
                {
                    var childBlock = (ShopBoss.Web.Models.TaskBlock)((dynamic)item).Item;
                    ViewData["NestingLevel"] = nestingLevel + 1;
                    @await Html.PartialAsync("_TaskBlockRecursive", childBlock, ViewData)
                }
            }
        </div>
    </div>
</div>
