@model ServerManagementDashboardViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container-fluid">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Tab Navigation -->
    <div class="row mb-4">
        <div class="col-12">
            <ul class="nav nav-tabs" id="serverManagementTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" data-bs-target="#dashboard" type="button" role="tab">
                        <i class="fas fa-server me-2"></i>System Status
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="backup-tab" data-bs-toggle="tab" data-bs-target="#backup" type="button" role="tab">
                        <i class="fas fa-database me-2"></i>Backups
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="serverManagementTabContent">
        
        <!-- Dashboard Tab -->
        <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
            

    <!-- Monitored Services Status -->
    @if (Model.MonitoredServices.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="fas fa-server me-2"></i>System Monitoring</h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Component</th>
                                        <th>Status</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var service in Model.MonitoredServices)
                                    {
                                        var latestStatus = Model.LatestServiceStatuses.FirstOrDefault(s => s.ServiceId == service.Id);
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@service.ServiceName</strong>
                                                    @if (!string.IsNullOrEmpty(service.Description))
                                                    {
                                                        <br><small class="text-muted">@service.Description</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @if (latestStatus != null)
                                                {
                                                    <span class="badge bg-@GetServiceStatusColor(latestStatus.Status)" id="status-@service.Id">
                                                        @latestStatus.Status
                                                    </span>
                                                    @if (!latestStatus.IsReachable)
                                                    {
                                                        <br><small class="text-danger">Unreachable</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary" id="status-@service.Id">Unknown</span>
                                                }
                                            </td>
                                            <td>
                                                @if (latestStatus?.ResponseTimeMs != null)
                                                {
                                                    <small class="text-muted">@latestStatus.ResponseTimeMs ms</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">-</small>
                                                }
                                            </td>
                                        </tr>
                                        @if (latestStatus != null && !string.IsNullOrEmpty(latestStatus.ErrorMessage))
                                        {
                                            <tr>
                                                <td colspan="3" class="border-top-0 pt-0">
                                                    <small class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                                        @latestStatus.ErrorMessage
                                                    </small>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    
                                    <!-- Auto Backup Row -->
                                    <tr style="cursor: pointer;" onclick="switchToBackupTab()">
                                        <td>
                                            <div>
                                                <strong>Auto Backup</strong>
                                                <br><small class="text-muted">Automated database backup system</small>
                                            </div>
                                        </td>
                                        <td>
                                            @if (Model.BackupConfiguration != null)
                                            {
                                                <span class="badge bg-@(Model.BackupConfiguration.EnableAutomaticBackups ? "success" : "secondary")">
                                                    @(Model.BackupConfiguration.EnableAutomaticBackups ? "Enabled" : "Disabled")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Not configured</span>
                                            }
                                        </td>
                                        <td>
                                            @if (Model.BackupConfiguration != null)
                                            {
                                                <div class="small text-muted">
                                                    Interval: @Model.BackupConfiguration.BackupIntervalMinutes min<br>
                                                    Retention: @Model.BackupConfiguration.MaxBackupRetention backups
                                                    @if (Model.RecentBackups.Any())
                                                    {
                                                        var lastBackup = Model.RecentBackups.First();
                                                        @:<br>Last: @(lastBackup.IsSuccessful ? "Success" : "Failed") (@((lastBackup.BackupSize / 1024.0 / 1024.0).ToString("F1")) MB)
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-4">
                        <i class="fas fa-server fa-3x text-muted mb-3"></i>
                        <h5>Initializing Services</h5>
                        <p class="text-muted">Services are being initialized automatically...</p>
                    </div>
                </div>
            </div>
        </div>
    }

        
        </div> <!-- End Dashboard Tab -->
        
        <!-- Backup Management Tab -->
        <div class="tab-pane fade" id="backup" role="tabpanel" aria-labelledby="backup-tab">
            <div class="d-flex justify-content-end mb-3">
                <button type="button" class="btn btn-primary" onclick="createManualBackup()">
                    <i class="fas fa-database me-2"></i>Create Manual Backup
                </button>
            </div>
            
            <!-- Backup content will be loaded here -->
            <div id="backup-content">
                <div class="text-center py-4">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading backup management data...</p>
                </div>
            </div>
        </div>
        
    </div> <!-- End Tab Content -->
</div>

@functions {
    private string GetServiceStatusColor(ServiceHealthLevel status)
    {
        return status switch
        {
            ServiceHealthLevel.Healthy => "success",
            ServiceHealthLevel.Warning => "warning",
            ServiceHealthLevel.Critical => "danger",
            ServiceHealthLevel.Offline => "danger",
            ServiceHealthLevel.Unknown => "secondary",
            _ => "secondary"
        };
    }
}

<script>
function switchToBackupTab() {
    // Switch to the Backup Management tab
    const backupTab = document.getElementById('backup-tab');
    const backupTabContent = document.getElementById('backup');
    
    // Remove active class from current tab
    document.querySelector('#serverManagementTabs .nav-link.active').classList.remove('active');
    document.querySelector('.tab-pane.active').classList.remove('active', 'show');
    
    // Activate backup tab
    backupTab.classList.add('active');
    backupTabContent.classList.add('active', 'show');
    
    // Load backup content if not already loaded
    if (!document.getElementById('backup-content').hasAttribute('data-loaded')) {
        loadBackupContent();
    }
}

async function createManualBackup() {
    try {
        const response = await fetch('@Url.Action("CreateManualBackup")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        });
        
        if (response.ok) {
            showAlert('success', 'Manual backup initiated. Refreshing page...');
            setTimeout(() => location.reload(), 2000);
        } else {
            showAlert('danger', 'Failed to create manual backup.');
        }
    } catch (error) {
        showAlert('danger', 'An error occurred while creating the backup.');
    }
}



function showAlert(type, message) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    $('.container-fluid .row:first .col-12').after(`<div class="col-12">${alertHtml}</div>`);
}

// Tab management
document.addEventListener('DOMContentLoaded', function() {
    const tabTriggerList = [].slice.call(document.querySelectorAll('#serverManagementTabs button[data-bs-toggle="tab"]'));
    
    tabTriggerList.forEach(function (tabTrigger) {
        tabTrigger.addEventListener('shown.bs.tab', function (event) {
            const targetTab = event.target.getAttribute('data-bs-target');
            
            // Load content for backup tab on demand
            if (targetTab === '#backup' && !document.getElementById('backup-content').hasAttribute('data-loaded')) {
                loadBackupContent();
            }
        });
    });
});

async function loadBackupContent() {
    const backupContent = document.getElementById('backup-content');
    
    try {
        const response = await fetch('@Url.Action("BackupManagement")', {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });
        
        if (response.ok) {
            const html = await response.text();
            // Extract just the content we need (remove layout wrapper)
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Get everything except the header
            const headerDiv = doc.querySelector('.d-flex.justify-content-between');
            if (headerDiv) headerDiv.remove();
            
            // Get the remaining content
            const cards = doc.querySelectorAll('.card');
            let contentHTML = '';
            cards.forEach(card => {
                contentHTML += card.outerHTML;
            });
            
            backupContent.innerHTML = contentHTML;
            backupContent.setAttribute('data-loaded', 'true');
        } else {
            backupContent.innerHTML = '<div class="alert alert-danger">Failed to load backup management data.</div>';
        }
    } catch (error) {
        backupContent.innerHTML = '<div class="alert alert-danger">Error loading backup management data.</div>';
    }
}
</script>