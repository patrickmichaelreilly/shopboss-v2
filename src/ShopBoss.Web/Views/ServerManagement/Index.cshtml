@model ServerManagementDashboardViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="h2 mb-4"><i class="fas fa-server me-2"></i>@Model.PageTitle</h1>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mb-3" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Tab Navigation -->
    <div class="row mb-4">
        <div class="col-12">
            <ul class="nav nav-tabs" id="serverManagementTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" data-bs-target="#dashboard" type="button" role="tab">
                        <i class="fas fa-server me-2"></i>System Status
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="backup-tab" data-bs-toggle="tab" data-bs-target="#backup" type="button" role="tab">
                        <i class="fas fa-database me-2"></i>Backups
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="serverManagementTabContent">
        
        <!-- Dashboard Tab -->
        <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
            

    <!-- Monitored Services Status -->
    @if (Model.MonitoredServices.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Component</th>
                                        <th>Status</th>
                                        <th>Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var service in Model.MonitoredServices)
                                    {
                                        var latestStatus = Model.LatestServiceStatuses.FirstOrDefault(s => s.ServiceId == service.Id);
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@service.ServiceName</strong>
                                                    @if (!string.IsNullOrEmpty(service.Description))
                                                    {
                                                        <br><small class="text-muted">@service.Description</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @if (latestStatus != null)
                                                {
                                                    <span class="badge bg-@GetServiceStatusColor(latestStatus.Status)" id="status-@service.Id">
                                                        @latestStatus.Status
                                                    </span>
                                                    @if (!latestStatus.IsReachable)
                                                    {
                                                        <br><small class="text-danger">Unreachable</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary" id="status-@service.Id">Unknown</span>
                                                }
                                            </td>
                                            <td>
                                                @if (latestStatus?.ResponseTimeMs != null)
                                                {
                                                    <small class="text-muted">@latestStatus.ResponseTimeMs ms</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">-</small>
                                                }
                                            </td>
                                        </tr>
                                        @if (latestStatus != null && !string.IsNullOrEmpty(latestStatus.ErrorMessage))
                                        {
                                            <tr>
                                                <td colspan="3" class="border-top-0 pt-0">
                                                    <small class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                                        @latestStatus.ErrorMessage
                                                    </small>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    
                                    <!-- Auto Backup Row -->
                                    <tr style="cursor: pointer;" onclick="switchToBackupTab()">
                                        <td>
                                            <div>
                                                <strong>Auto Backup</strong>
                                                <br><small class="text-muted">Automated database backup system</small>
                                            </div>
                                        </td>
                                        <td>
                                            @if (Model.BackupConfiguration != null)
                                            {
                                                <span class="badge bg-@(Model.BackupConfiguration.EnableAutomaticBackups ? "success" : "secondary")">
                                                    @(Model.BackupConfiguration.EnableAutomaticBackups ? "Enabled" : "Disabled")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Not configured</span>
                                            }
                                        </td>
                                        <td>
                                            @if (Model.BackupConfiguration != null)
                                            {
                                                <div class="small text-muted">
                                                    Interval: @Model.BackupConfiguration.BackupIntervalMinutes min<br>
                                                    Retention: @Model.BackupConfiguration.MaxBackupRetention backups
                                                    @if (Model.RecentBackups.Any())
                                                    {
                                                        var lastBackup = Model.RecentBackups.First();
                                                        @:<br>Last: @(lastBackup.IsSuccessful ? "Success" : "Failed") (@((lastBackup.BackupSize / 1024.0 / 1024.0).ToString("F1")) MB)
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-4">
                        <i class="fas fa-server fa-3x text-muted mb-3"></i>
                        <h5>Initializing Services</h5>
                        <p class="text-muted">Services are being initialized automatically...</p>
                    </div>
                </div>
            </div>
        </div>
    }

        
        </div> <!-- End Dashboard Tab -->
        
        <!-- Backup Management Tab -->
        <div class="tab-pane fade" id="backup" role="tabpanel" aria-labelledby="backup-tab">
            
            <!-- Backup Configuration -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="fas fa-cog me-2"></i>Backup Configuration</h6>
                    <button type="button" class="btn btn-sm btn-primary" onclick="createManualBackup()">
                        <i class="fas fa-database me-2"></i>Create Manual Backup
                    </button>
                </div>
                <div class="card-body">
                    @if (Model.BackupConfiguration != null)
                    {
                        <form asp-action="UpdateBackupConfiguration" method="post">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="BackupConfiguration.BackupIntervalMinutes" class="form-label small">Backup Interval (minutes)</label>
                                        <input asp-for="BackupConfiguration.BackupIntervalMinutes" type="number" class="form-control form-control-sm" min="15" max="10080" />
                                        <div class="form-text small">Minimum 15 minutes, maximum 1 week</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="BackupConfiguration.MaxBackupRetention" class="form-label small">Maximum Backups to Keep</label>
                                        <input asp-for="BackupConfiguration.MaxBackupRetention" type="number" class="form-control form-control-sm" min="3" max="168" />
                                        <div class="form-text small">Minimum 3 backups, maximum 168</div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="BackupConfiguration.BackupDirectoryPath" class="form-label small">Backup Directory</label>
                                        <input asp-for="BackupConfiguration.BackupDirectoryPath" type="text" class="form-control form-control-sm" />
                                        <div class="form-text small">Relative or absolute path for backup files</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input asp-for="BackupConfiguration.EnableCompression" class="form-check-input" type="checkbox" />
                                            <label asp-for="BackupConfiguration.EnableCompression" class="form-check-label small">
                                                Enable Compression
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input asp-for="BackupConfiguration.EnableAutomaticBackups" class="form-check-input" type="checkbox" />
                                            <label asp-for="BackupConfiguration.EnableAutomaticBackups" class="form-check-label small">
                                                Enable Automatic Backups
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" asp-for="BackupConfiguration.Id" />
                            <button type="submit" class="btn btn-sm btn-primary">
                                <i class="fas fa-save me-2"></i>Update Configuration
                            </button>
                        </form>
                    }
                    else
                    {
                        <div class="text-center py-3">
                            <small class="text-muted">Backup configuration not found</small>
                        </div>
                    }
                </div>
            </div>

            <!-- Recent Backups -->
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-history me-2"></i>Recent Backups</h6>
                </div>
                <div class="card-body p-0">
                    @if (Model.RecentBackups.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Created</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Size</th>
                                        <th>Duration</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var backup in Model.RecentBackups)
                                    {
                                        <tr class="@(backup.IsSuccessful ? "" : "table-danger")">
                                            <td>
                                                <small>@backup.CreatedDate.ToString("MM/dd HH:mm")</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(backup.BackupType == ShopBoss.Web.Models.BackupType.Manual ? "primary" : "secondary")">
                                                    @backup.BackupType
                                                </span>
                                            </td>
                                            <td>
                                                @if (backup.IsSuccessful)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check me-1"></i>Success
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">
                                                        <i class="fas fa-times me-1"></i>Failed
                                                    </span>
                                                }
                                            </td>
                                            <td>
                                                @if (backup.IsSuccessful)
                                                {
                                                    <small>@((backup.BackupSize / 1024.0 / 1024.0).ToString("F1")) MB</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">-</small>
                                                }
                                            </td>
                                            <td>
                                                <small>@backup.Duration.ToString(@"mm\:ss")</small>
                                            </td>
                                            <td>
                                                @if (backup.IsSuccessful)
                                                {
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button type="button" class="btn btn-outline-warning btn-sm" onclick="restoreBackup('@backup.Id')" title="Restore">
                                                            <i class="fas fa-undo"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteBackup('@backup.Id')" title="Delete">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteBackup('@backup.Id')" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                        @if (!backup.IsSuccessful && !string.IsNullOrEmpty(backup.ErrorMessage))
                                        {
                                            <tr class="table-danger">
                                                <td colspan="6" class="border-top-0 pt-0">
                                                    <small class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-1"></i>
                                                        @backup.ErrorMessage
                                                    </small>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="card-body text-center py-4">
                            <i class="fas fa-database fa-3x text-muted mb-3"></i>
                            <h5>No backups found</h5>
                            <small class="text-muted">Create your first backup to get started</small>
                        </div>
                    }
                </div>
            </div>
        </div>
        
    </div> <!-- End Tab Content -->
</div>

@functions {
    private string GetServiceStatusColor(ServiceHealthLevel status)
    {
        return status switch
        {
            ServiceHealthLevel.Healthy => "success",
            ServiceHealthLevel.Warning => "warning",
            ServiceHealthLevel.Critical => "danger",
            ServiceHealthLevel.Offline => "danger",
            ServiceHealthLevel.Unknown => "secondary",
            _ => "secondary"
        };
    }
}

<script>
function switchToBackupTab() {
    // Switch to the Backup Management tab
    const backupTab = document.getElementById('backup-tab');
    const backupTabContent = document.getElementById('backup');
    
    // Remove active class from current tab
    document.querySelector('#serverManagementTabs .nav-link.active').classList.remove('active');
    document.querySelector('.tab-pane.active').classList.remove('active', 'show');
    
    // Activate backup tab
    backupTab.classList.add('active');
    backupTabContent.classList.add('active', 'show');
}

async function createManualBackup() {
    try {
        const response = await fetch('@Url.Action("CreateManualBackup")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
        });
        
        if (response.ok) {
            showAlert('success', 'Manual backup initiated. Refreshing page...');
            setTimeout(() => location.reload(), 2000);
        } else {
            showAlert('danger', 'Failed to create manual backup.');
        }
    } catch (error) {
        showAlert('danger', 'An error occurred while creating the backup.');
    }
}



function showAlert(type, message) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    $('.container-fluid .row:first .col-12').after(`<div class="col-12">${alertHtml}</div>`);
}

function deleteBackup(backupId) {
    if (confirm('Are you sure you want to delete this backup? This action cannot be undone.')) {
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("DeleteBackup")';
        
        var idInput = document.createElement('input');
        idInput.type = 'hidden';
        idInput.name = 'id';
        idInput.value = backupId;
        form.appendChild(idInput);
        
        var token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            form.appendChild(token.cloneNode());
        }
        
        document.body.appendChild(form);
        form.submit();
    }
}

function restoreBackup(backupId) {
    if (confirm('Are you sure you want to restore this backup? This will replace the current database and require an application restart.')) {
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("RestoreBackup")';
        
        var idInput = document.createElement('input');
        idInput.type = 'hidden';
        idInput.name = 'id';
        idInput.value = backupId;
        form.appendChild(idInput);
        
        var token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            form.appendChild(token.cloneNode());
        }
        
        document.body.appendChild(form);
        form.submit();
    }
}
</script>