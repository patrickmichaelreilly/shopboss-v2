@model ShopBoss.Web.Controllers.AssemblyDashboardData
@{
    ViewData["Title"] = "Assembly Station";
}

@section Styles {
    <style>
        .assembly-card {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .assembly-card.ready {
            border-left-color: #198754;
            background-color: #f8fff9;
        }
        
        .assembly-card.completed {
            border-left-color: #0d6efd;
            background-color: #f8f9ff;
        }
        
        .assembly-card.in-progress {
            border-left-color: #fd7e14;
            background-color: #fff9f5;
        }
        
        .assembly-card.waiting {
            border-left-color: #6c757d;
            background-color: #f8f9fa;
        }
        
        .progress-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }
        
        .progress-0-25 { background-color: #dc3545; }
        .progress-26-50 { background-color: #fd7e14; }
        .progress-51-75 { background-color: #ffc107; color: #000; }
        .progress-76-99 { background-color: #198754; }
        .progress-100 { background-color: #0d6efd; }
        
        .rack-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .rack-standard { background-color: #0d6efd; }
        .rack-doors { background-color: #198754; }
        .rack-shelves { background-color: #fd7e14; }
        .rack-hardware { background-color: #6f42c1; }
        .rack-cart { background-color: #dc3545; }
        
        .part-location {
            background-color: #e9ecef;
            border-radius: 4px;
            padding: 2px 6px;
            margin: 2px;
            display: inline-block;
            font-size: 0.875rem;
        }
        
        .filtered-parts-section {
            background-color: #fff3cd;
            border: 1px solid #ffecb5;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .btn-start-assembly {
            background-color: #198754;
            border-color: #198754;
            color: white;
            font-weight: bold;
            padding: 10px 20px;
        }
        
        .btn-start-assembly:hover {
            background-color: #157347;
            border-color: #146c43;
        }
        
        .btn-start-assembly:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .toast-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1050;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-0">Assembly Station</h1>
        <p class="text-muted mb-0">
            <i class="fas fa-tools me-2"></i>
            Active Work Order: <strong>@Model.WorkOrder.Name</strong>
        </p>
    </div>
    <div class="text-end">
        <div class="row g-2">
            <div class="col">
                <div class="card border-success text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-success mb-0">@Model.ReadyProductIds.Count</h5>
                        <small class="text-muted">Ready</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-info text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-info mb-0">@Model.Products.Count(p => p.IsCompleted)</h5>
                        <small class="text-muted">Completed</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-primary text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-primary mb-0">@Model.Products.Count</h5>
                        <small class="text-muted">Total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Assembly Queue -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-clipboard-list me-2"></i>
                    Assembly Queue
                </h5>
            </div>
            <div class="card-body">
                @if (!Model.Products.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No products found in the active work order.</p>
                    </div>
                }
                else
                {
                    @foreach (var product in Model.Products)
                    {
                        var cardClass = product.IsCompleted ? "completed" : 
                                       product.IsReadyForAssembly ? "ready" : 
                                       product.CompletionPercentage > 0 ? "in-progress" : "waiting";
                        
                        var progressClass = product.CompletionPercentage switch
                        {
                            <= 25 => "progress-0-25",
                            <= 50 => "progress-26-50", 
                            <= 75 => "progress-51-75",
                            < 100 => "progress-76-99",
                            _ => "progress-100"
                        };

                        <div class="assembly-card card mb-3 @cardClass">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col-auto">
                                        <div class="progress-circle @progressClass">
                                            @if (product.IsCompleted)
                                            {
                                                <i class="fas fa-check"></i>
                                            }
                                            else
                                            {
                                                <span>@product.CompletionPercentage%</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="col">
                                        <h6 class="card-title mb-1">
                                            @product.Product.ProductNumber - @product.Product.Name
                                        </h6>
                                        <div class="text-muted small mb-2">
                                            <i class="fas fa-cube me-1"></i>
                                            @product.SortedCarcassPartsCount/@product.CarcassPartsCount carcass parts sorted
                                            @if (product.FilteredPartsCount > 0)
                                            {
                                                <span class="ms-2">
                                                    <i class="fas fa-filter me-1"></i>
                                                    @product.FilteredPartsCount filtered parts (doors/fronts/shelves)
                                                </span>
                                            }
                                        </div>
                                        @if (product.PartLocations.Any())
                                        {
                                            <div class="small">
                                                <strong>Locations:</strong>
                                                @foreach (var location in product.PartLocations.Take(5))
                                                {
                                                    <span class="part-location">@location.Location</span>
                                                }
                                                @if (product.PartLocations.Count > 5)
                                                {
                                                    <span class="text-muted">+@(product.PartLocations.Count - 5) more</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="col-auto">
                                        @if (product.IsCompleted)
                                        {
                                            <span class="badge bg-primary fs-6">
                                                <i class="fas fa-check-circle me-1"></i>Completed
                                            </span>
                                        }
                                        else if (product.IsReadyForAssembly)
                                        {
                                            <button class="btn btn-start-assembly btn-lg me-2" 
                                                    onclick="startAssembly('@product.Product.Id', '@product.Product.Name')">
                                                <i class="fas fa-play me-1"></i>Start Assembly
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary fs-6">
                                                <i class="fas fa-clock me-1"></i>Waiting
                                            </span>
                                        }
                                        <button class="btn btn-outline-info btn-sm" 
                                                onclick="showProductDetails('@product.Product.Id')">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
    <!-- Sorting Rack Status -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-warehouse me-2"></i>
                    Sorting Rack Status
                </h5>
            </div>
            <div class="card-body">
                @if (!Model.StorageRacks.Any())
                {
                    <p class="text-muted">No storage racks configured.</p>
                }
                else
                {
                    @foreach (var rack in Model.StorageRacks.OrderBy(r => r.Type))
                    {
                        var rackClass = rack.Type.ToString().ToLower();
                        
                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                            <div>
                                <span class="rack-indicator rack-@rackClass"></span>
                                <strong>@rack.Name</strong>
                                <br>
                                <small class="text-muted">@rack.Type</small>
                            </div>
                            <div class="text-end">
                                <div class="fw-bold">@rack.OccupiedBins/@rack.TotalBins</div>
                                <div class="small text-muted">@rack.OccupancyPercentage.ToString("F0")% full</div>
                            </div>
                        </div>
                    }
                }
                
                <div class="mt-3">
                    <a href="/Sorting" class="btn btn-outline-primary btn-sm w-100">
                        <i class="fas fa-external-link-alt me-1"></i>
                        View Sorting Station
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filtered Parts Information -->
@if (Model.FilteredParts.Any())
{
    <div class="filtered-parts-section mt-4">
        <h5>
            <i class="fas fa-filter me-2"></i>
            Doors, Fronts & Adjustable Shelves
        </h5>
        <p class="mb-3">
            <small class="text-muted">
                These components are processed separately and will need to be collected from specialized racks after carcass assembly.
            </small>
        </p>
        
        <div class="row">
            @foreach (var group in Model.FilteredParts.GroupBy(f => f.Category))
            {
                <div class="col-md-4 mb-3">
                    <h6>@group.Key</h6>
                    @foreach (var part in group.Take(5))
                    {
                        <div class="small mb-1">
                            <strong>@part.PartName</strong> (Qty: @part.Quantity)
                            <br>
                            <span class="text-muted">@part.Location</span>
                        </div>
                    }
                    @if (group.Count() > 5)
                    {
                        <div class="small text-muted">+@(group.Count() - 5) more items</div>
                    }
                </div>
            }
        </div>
    </div>
}

<!-- Product Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productDetailsContent">
                <!-- Content will be loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container"></div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        // SignalR connection for real-time updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/status")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log("Assembly Station SignalR connection established");
            
            // Join work order group for notifications
            const activeWorkOrderId = '@Model.WorkOrder.Id';
            if (activeWorkOrderId) {
                connection.invoke("JoinWorkOrderGroup", activeWorkOrderId);
            }
        }).catch(function (err) {
            console.error("Error starting SignalR connection:", err);
        });

        // Listen for product assembly notifications
        connection.on("ProductAssembled", function (data) {
            showToast(`Product "${data.ProductName}" has been assembled!`, 'success');
            setTimeout(() => {
                location.reload(); // Refresh to show updated status
            }, 2000);
        });

        // Listen for new products ready for assembly (from sorting station)
        connection.on("ProductReadyForAssembly", function (data) {
            showToast(`Product "${data.productName}" is now ready for assembly!`, 'info');
            setTimeout(() => {
                location.reload(); // Refresh to show updated status
            }, 2000);
        });

        // Assembly functions
        function startAssembly(productId, productName) {
            if (!confirm(`Start assembly for "${productName}"? This will mark all carcass parts as assembled.`)) {
                return;
            }

            const button = event.target.closest('button');
            const originalHtml = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            fetch('/Assembly/StartAssembly', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    productId: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showToast(data.message, 'error');
                    button.disabled = false;
                    button.innerHTML = originalHtml;
                }
            })
            .catch(error => {
                console.error('Error starting assembly:', error);
                showToast('An error occurred while starting assembly', 'error');
                button.disabled = false;
                button.innerHTML = originalHtml;
            });
        }

        function showProductDetails(productId) {
            const modal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
            const content = document.getElementById('productDetailsContent');
            
            content.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x"></i><p>Loading...</p></div>';
            modal.show();

            fetch(`/Assembly/GetProductDetails?productId=${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        content.innerHTML = generateProductDetailsHtml(data.data);
                    } else {
                        content.innerHTML = `<div class="alert alert-danger">${data.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading product details:', error);
                    content.innerHTML = '<div class="alert alert-danger">Error loading product details</div>';
                });
        }

        function generateProductDetailsHtml(product) {
            let html = `
                <h6>${product.ProductNumber} - ${product.ProductName}</h6>
                
                <h6 class="mt-3">Carcass Parts</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Part Name</th>
                                <th>Status</th>
                                <th>Location</th>
                                <th>Qty</th>
                                <th>Dimensions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            product.CarcassParts.forEach(part => {
                const statusBadge = part.Status === 'Sorted' ? 'bg-success' : 
                                  part.Status === 'Assembled' ? 'bg-primary' : 'bg-secondary';
                html += `
                    <tr>
                        <td>${part.Name}</td>
                        <td><span class="badge ${statusBadge}">${part.Status}</span></td>
                        <td>${part.Location}</td>
                        <td>${part.Quantity}</td>
                        <td class="small">${part.Dimensions}</td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            if (product.FilteredParts && product.FilteredParts.length > 0) {
                html += `
                    <h6 class="mt-3">Doors, Fronts & Adjustable Shelves</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Part Name</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Location</th>
                                    <th>Qty</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                product.FilteredParts.forEach(part => {
                    const statusBadge = part.Status === 'Sorted' ? 'bg-success' : 'bg-secondary';
                    html += `
                        <tr>
                            <td>${part.Name}</td>
                            <td><span class="badge bg-info">${part.Category}</span></td>
                            <td><span class="badge ${statusBadge}">${part.Status}</span></td>
                            <td>${part.Location}</td>
                            <td>${part.Quantity}</td>
                        </tr>
                    `;
                });

                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            }

            return html;
        }

        function showToast(message, type) {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const bgColor = type === 'success' ? 'bg-success' : 
                           type === 'info' ? 'bg-info' : 
                           type === 'error' ? 'bg-danger' : 'bg-secondary';
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'info' ? 'fa-info-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 'fa-bell';

            const toastHtml = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header ${bgColor} text-white">
                        <i class="fas ${icon} me-2"></i>
                        <strong class="me-auto">Assembly Station</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                autohide: type !== 'error',
                delay: type === 'success' ? 5000 : 8000
            });
            
            toast.show();
            
            // Remove toast element after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }
    </script>
}