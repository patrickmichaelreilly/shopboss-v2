@model ShopBoss.Web.Controllers.AssemblyDashboardData
@{
    ViewData["Title"] = "Assembly Station";
}

@section Styles {
    <style>
        .assembly-card {
            transition: all 0.3s ease;
            border: 3px solid transparent;
            border-radius: 8px;
            background-color: #f8f9fa;
        }
        
        .assembly-card.ready {
            border-color: #198754;
            background-color: #e8f5e9;
        }
        
        .assembly-card.completed {
            border-color: #004F00;
            background-color: #e8f5e9;
        }
        
        .assembly-card.waiting {
            border-color: #6c757d;
            background-color: #f5f5f5;
            opacity: 0.6;
        }
        
        .assembly-card .card-body {
            display: flex !important;
            flex-direction: row !important;
            align-items: center !important;
            justify-content: flex-start !important;
            padding: 12px 20px;
            min-height: 60px;
        }
        
        .product-id-circle {
            flex-shrink: 0 !important;
        }
        
        .product-name {
            flex: 1 !important;
            margin: 0 20px !important;
        }
        
        .center-column {
            flex-shrink: 0 !important;
        }
        
        .button-column {
            flex-shrink: 0 !important;
            margin-left: 20px !important;
        }
        
        /* Reusable Product ID Circle - for use across stations */
        .product-id-circle {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1rem;
            background-color: #198754;
            color: white;
        }
        
        .product-id-circle.completed {
            background-color: #004F00;
        }
        
        .product-id-circle.waiting {
            background-color: #6c757d;
        }
        
        
        .product-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
            margin: 0;
        }
        
        .center-column {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
        }
        
        .button-column {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
        }
        
        .bin-locations {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        .bin-location-box {
            background-color: #f3e5f5;
            border: 2px solid #7b1fa2;
            color: #7b1fa2;
            border-radius: 6px;
            padding: 8px 14px;
            font-size: 1.1rem;
            font-weight: 600;
            text-align: center;
            min-width: 70px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bin-location-box.doors {
            background-color: #e3f2fd;
            border-color: #1976d2;
            color: #1976d2;
        }
        
        .bin-location-box.empty {
            background-color: #f5f5f5;
            border-color: #ccc;
            color: #999;
        }
        
        /* Assembly Station Layout - match Sorting Station viewport usage */
        main.container-fluid {
            height: calc(100vh - 76px - 175px); /* Subtract navbar height and billboard space */
            display: flex;
            flex-direction: column;
            padding-bottom: 0 !important; /* No bottom padding since we subtracted it from height */
            overflow: hidden;
        }
        
        /* Billboard hidden state */
        main.container-fluid.billboard-hidden {
            height: auto; /* Let content determine height */
            min-height: calc(100vh - 76px); /* Ensure it fills viewport if content is small */
        }
        
        /* Adjust assembly queue wrapper when billboard is hidden */
        main.container-fluid.billboard-hidden .assembly-queue-wrapper {
            overflow-y: visible; /* Remove internal scroll */
            flex: none; /* Don't stretch to fill */
        }
        
        /* Make assembly queue area scrollable and fill remaining height - match Sorting Station */
        .assembly-queue-wrapper {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            min-height: 0; /* Important for flexbox */
            margin-left: 0; /* Match billboard width - no negative margins */
            margin-right: 0;
            padding-left: 0; /* No extra padding since we're not compensating */
            padding-right: 0;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .row {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .col-12 {
            flex: 1;
            display: flex;
        }
        
        .assembly-queue-wrapper .card {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 15px;
        }
        
        /* Remove Bootstrap row/col overrides since we're using flexbox directly */
        
        .not-ready-text {
            font-size: 1.1rem;
            color: #666;
            font-style: italic;
        }
        
        .btn-drop {
            background-color: #198754;
            border-color: #198754;
            color: white;
            font-weight: 600;
            font-size: 1rem;
            padding: 10px 20px;
            width: 120px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
        }
        
        .btn-drop:hover {
            background-color: #157347;
            border-color: #146c43;
            color: white;
        }
        
        .btn-drop:disabled {
            background-color: #6c757d;
            border-color: #6c757d;
            cursor: not-allowed;
            opacity: 1;
        }
        
        .btn-drop.btn-dropped {
            background-color: #004F00;
            border-color: #004F00;
            opacity: 1;
        }
        
        .toast-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1050;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex align-items-center gap-3">
        <div>
            <h1 class="h2 mb-0">Assembly Station</h1>
            <p class="text-muted mb-0">
                <i class="fas fa-tools me-2"></i>
                Active Work Order: <strong class="text-warning">@Model.WorkOrder.Name</strong>
            </p>
        </div>
        
        <!-- Header Scanner Button -->
        <partial name="_CompactScanner" />
    </div>
    
    <div class="d-flex align-items-center gap-3">
        <!-- Billboard Toggle -->
        <div class="form-check form-switch mb-0">
            <input class="form-check-input" type="checkbox" id="billboardToggle" checked onchange="toggleBillboard()">
            <label class="form-check-label" for="billboardToggle">
                <small>Show Billboard</small>
            </label>
        </div>
        
        <!-- Statistics Cards -->
        <div class="row g-2">
            <div class="col">
                <div class="card border-success text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-success mb-0">@Model.ReadyProductIds.Count</h5>
                        <small class="text-muted">Ready</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-info text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-info mb-0">@Model.Products.Count(p => p.Product.Status == PartStatus.Assembled)</h5>
                        <small class="text-muted">Completed</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-primary text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-primary mb-0">@Model.Products.Count</h5>
                        <small class="text-muted">Total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




<!-- Assembly Queue -->
<div class="assembly-queue-wrapper">
    <div class="row">
        <div class="col-12">
        <div class="card">
            <div class="card-body">
                @if (!Model.Products.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No products found in the active work order.</p>
                    </div>
                }
                else
                {
                    @foreach (var product in Model.Products)
                    {
                        var cardClass = product.Product.Status == PartStatus.Assembled ? "completed" : 
                                       product.IsReadyForAssembly ? "ready" : "waiting";
                        
                        var statusClass = product.Product.Status == PartStatus.Assembled ? "completed" : 
                                         product.IsReadyForAssembly ? "ready" : "waiting";

                        // Get bin labels directly from the simplified properties
                        string standardBin = product.StandardBinLabel;
                        string doorBin = product.FilteredBinLabel ?? "-";

                        <div class="assembly-card card mb-3 @cardClass" data-product-id="@product.Product.Id">
                            <div class="card-body">
                                <!-- Column 1: Circle -->
                                <div class="product-id-circle @statusClass">
                                    @product.Product.ItemNumber
                                </div>
                                
                                <!-- Column 2: Product Name -->
                                <h3 class="product-name">
                                    @product.Product.Name
                                </h3>
                                
                                <!-- Column 3: Bin Locations -->
                                <div class="center-column">
                                    <div class="bin-locations">
                                        <div class="bin-location-box standard @(standardBin == "-" ? "empty" : "")">
                                            @standardBin
                                        </div>
                                        <div class="bin-location-box doors @(doorBin == "-" ? "empty" : "")">
                                            @doorBin
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Column 4: Drop Button -->
                                <div class="button-column">
                                    @if (product.Product.Status == PartStatus.Assembled)
                                    {
                                        <button class="btn btn-drop btn-dropped" disabled>
                                            <i class="fas fa-check me-2"></i>Dropped
                                        </button>
                                    }
                                    else if (product.IsReadyForAssembly)
                                    {
                                        <button class="btn btn-drop" 
                                                onclick="startAssembly('@product.Product.Id', '@product.Product.Name')">
                                            <i class="fas fa-arrow-down me-2"></i>Drop
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-drop" disabled>
                                            <i class="fas fa-clock me-2"></i>Waiting
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
</div>


<!-- Barcode Scan Modal -->
<div class="modal fade" id="assemblyScanModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-barcode me-2"></i>
                    Scan Part to Assemble Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assemblyScanForm">
                    <div class="mb-3">
                        <label for="assemblyBarcodeInput" class="form-label">Part Barcode or Nest Sheet Name</label>
                        <input type="text" class="form-control form-control-lg" id="assemblyBarcodeInput" 
                               placeholder="Scan or enter barcode..." autocomplete="off">
                        <div class="form-text">
                            Scan any part from a ready product to mark the entire product as assembled.
                        </div>
                    </div>
                    <div id="assemblyScanStatus" class="alert" style="display: none;"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processScanForAssembly()">
                    <i class="fas fa-tools me-1"></i>Assemble Product
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Product Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productDetailsContent">
                <!-- Content will be loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container"></div>

<!-- Billboard Message at Bottom -->
@{
    ViewData["ContainerId"] = "assembly-billboard";
}

<partial name="_BillboardMessage" />

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/universal-scanner.js"></script>
    <script>
        // Billboard toggle functionality
        function toggleBillboard() {
            const isChecked = document.getElementById('billboardToggle').checked;
            const mainContainer = document.querySelector('main.container-fluid');
            const billboardContainer = document.getElementById('assembly-billboard');
            
            if (isChecked) {
                mainContainer.classList.remove('billboard-hidden');
                if (billboardContainer) {
                    billboardContainer.style.display = '';
                }
            } else {
                mainContainer.classList.add('billboard-hidden');
                if (billboardContainer) {
                    billboardContainer.style.display = 'none';
                }
            }
            
            // Save preference to localStorage
            ShopBossPreferences.Assembly.setShowBillboard(isChecked);
        }
        
        // Override the global showBillboard function for Assembly station to respect toggle
        const originalShowBillboard = window.showBillboard;
        window.showBillboard = function(containerId, message, type = 'info', title = 'Status') {
            // Check if this is the Assembly station billboard and if toggle is Off
            if (containerId === 'assembly-billboard') {
                const showBillboard = ShopBossPreferences.Assembly.getShowBillboard();
                if (!showBillboard) {
                    // Billboard is toggled off - don't show it
                    return;
                }
            }
            
            // Call the original function
            originalShowBillboard(containerId, message, type, title);
        };
        
        // Restore billboard preference on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Restore Billboard toggle state
            const showBillboard = ShopBossPreferences.Assembly.getShowBillboard();
            const billboardToggle = document.getElementById('billboardToggle');
            if (billboardToggle && !showBillboard) {
                billboardToggle.checked = false;
                toggleBillboard(); // Apply the restored state
            }
        });
        // SignalR connection for real-time updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/status")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log("Assembly Station SignalR connection established");
            
            // Join assembly station group
            connection.invoke("JoinGroup", "assembly-station");
            
            // Join all-stations group to receive product assembly broadcasts
            connection.invoke("JoinGroup", "all-stations");
            
            // Join work order group for notifications
            const activeWorkOrderId = '@Model.WorkOrder.Id';
            if (activeWorkOrderId) {
                connection.invoke("JoinWorkOrderGroup", activeWorkOrderId);
            }
        }).catch(function (err) {
            console.error("Error starting SignalR connection:", err);
        });

        // Listen for product assembly notifications
        connection.on("ProductAssembled", function (data) {
            console.log("ProductAssembled event received:", data);
            showToast(`Product "${data.ProductName}" has been assembled!`, 'success');
            showBillboard('assembly-billboard', `Product "${data.ProductName}" has been assembled!`, 'success', 'Assembly Complete');
            updateProductStatus(data.ProductId, 'completed');
            clearProductBinLocations(data.ProductId); // Clear bin locations immediately
            updateShippingReadinessStatus(data);
        });

        // Listen for barcode scan assembly notifications
        connection.on("ProductAssembledByScan", function (data) {
            console.log("ProductAssembledByScan event received:", data);
            showToast(`🔧 Product "${data.ProductName}" assembled via scan!`, 'success');
            showBillboard('assembly-billboard', `Product "${data.ProductName}" assembled via scan!`, 'success', 'Scan Assembly Complete');
            updateProductStatus(data.ProductId, 'completed');
            clearProductBinLocations(data.ProductId); // Clear bin locations immediately
            updateShippingReadinessStatus(data);
            
            // Refresh the page to show updated assembly queue
            setTimeout(() => {
                location.reload();
            }, 2000);
        });

        // Listen for new products ready for assembly (from sorting station)
        connection.on("ProductReadyForAssembly", function (data) {
            console.log("ProductReadyForAssembly event received:", data);
            showToast(`Product "${data.productName}" is now ready for assembly!`, 'info');
            showBillboard('assembly-billboard', `Product "${data.productName}" is now ready for assembly!`, 'info', 'Ready for Assembly');
            updateProductStatus(data.productId, 'ready');
        });

        // Listen for products assembled via manual button
        connection.on("ProductAssembledManually", function (data) {
            // showToast(`Product "${data.productName}" assembled successfully!`, 'success');
            showBillboard('assembly-billboard', `Product "${data.productName}" assembled successfully!`, 'success', 'Manual Assembly Complete');
            updateProductStatus(data.productId, 'completed');
            clearProductBinLocations(data.productId); // Clear bin locations immediately
            updateShippingReadinessStatus(data);
        });

        // Listen for general status updates
        connection.on("StatusUpdate", function (data) {
            if (data.type === "product-assembled") {
                updateProductStatus(data.productId, 'completed');
                updateShippingReadinessStatus(data);
                showStationNotification(data.station, data.message);
            }
        });

        // Functions for dynamic updates
        function updateProductStatus(productId, status) {
            const productCard = document.querySelector(`[data-product-id="${productId}"]`);
            if (productCard) {
                const statusCircle = productCard.querySelector('.product-id-circle');
                const cardBody = productCard.querySelector('.card-body');
                
                if (status === 'completed') {
                    // Update product ID circle to completed
                    if (statusCircle) {
                        statusCircle.className = 'product-id-circle completed';
                    }
                    
                    // Update card class
                    productCard.className = productCard.className.replace(/\b(ready|waiting)\b/g, '').trim() + ' completed';
                    
                    // Update the drop button to show "Dropped"
                    const dropButton = cardBody.querySelector('.btn-drop');
                    if (dropButton) {
                        dropButton.disabled = true;
                        dropButton.classList.add('btn-dropped');
                        dropButton.innerHTML = '<i class="fas fa-check me-2"></i>Dropped';
                    }
                } else if (status === 'ready') {
                    // Update product ID circle to ready
                    if (statusCircle) {
                        statusCircle.className = 'product-id-circle ready';
                    }
                    
                    // Update card class
                    productCard.className = productCard.className.replace(/\b(completed|waiting)\b/g, '').trim() + ' ready';
                    
                    // Fetch and update live bin location data
                    updateBinLocations(productId);
                }
            }
        }

        // Function to fetch and update live bin location data
        async function updateBinLocations(productId) {
            try {
                const response = await fetch(`/Assembly/GetProductBinLocations?productId=${productId}`);
                const data = await response.json();
                
                if (data.success) {
                    const productCard = document.querySelector(`[data-product-id="${productId}"]`);
                    if (productCard) {
                        const standardBinBox = productCard.querySelector('.bin-location-box.standard');
                        const doorBinBox = productCard.querySelector('.bin-location-box.doors');
                        
                        if (standardBinBox) {
                            standardBinBox.textContent = data.standardBin;
                            standardBinBox.className = `bin-location-box standard ${data.standardBin === '-' ? 'empty' : ''}`;
                        }
                        
                        if (doorBinBox) {
                            doorBinBox.textContent = data.filteredBin;
                            doorBinBox.className = `bin-location-box doors ${data.filteredBin === '-' ? 'empty' : ''}`;
                        }
                    }
                }
            } catch (error) {
                console.error('Error updating bin locations:', error);
            }
        }

        // Function to immediately clear bin locations when product is assembled
        function clearProductBinLocations(productId) {
            const productCard = document.querySelector(`[data-product-id="${productId}"]`);
            if (productCard) {
                const standardBinBox = productCard.querySelector('.bin-location-box.standard');
                const doorBinBox = productCard.querySelector('.bin-location-box.doors');
                
                if (standardBinBox) {
                    standardBinBox.textContent = '-';
                    standardBinBox.className = 'bin-location-box standard empty';
                }
                
                if (doorBinBox) {
                    doorBinBox.textContent = '-';
                    doorBinBox.className = 'bin-location-box doors empty';
                }
            }
        }

        function updateShippingReadinessStatus(data) {
            if (data.IsWorkOrderReadyForShipping) {
                showToast(`🚛 Work Order is now ready for shipping! (${data.ReadyForShippingProducts?.length || 0} products ready)`, 'info');
                showBillboard('assembly-billboard', `Work Order is now ready for shipping! (${data.ReadyForShippingProducts?.length || 0} products ready)`, 'info', 'Shipping Ready');
                
                // Add shipping readiness indicator
                const headerDiv = document.querySelector('h2').parentElement;
                let shippingIndicator = document.getElementById('shipping-ready-indicator');
                if (!shippingIndicator) {
                    shippingIndicator = document.createElement('div');
                    shippingIndicator.id = 'shipping-ready-indicator';
                    shippingIndicator.className = 'alert alert-info mt-3';
                    shippingIndicator.innerHTML = `
                        <i class="fas fa-shipping-fast me-2"></i>
                        <strong>Ready for Shipping!</strong> All products in this work order have been assembled.
                    `;
                    headerDiv.appendChild(shippingIndicator);
                }
            }
        }

        function showStationNotification(station, message) {
            const timestamp = new Date().toLocaleTimeString();
            const notificationHtml = `
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>${station} Station:</strong> ${message}
                    <small class="d-block text-muted mt-1">${timestamp}</small>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Find or create notifications container
            let notificationContainer = document.getElementById('station-notifications');
            if (!notificationContainer) {
                notificationContainer = document.createElement('div');
                notificationContainer.id = 'station-notifications';
                notificationContainer.className = 'mt-3';
                const mainContent = document.querySelector('.row.g-4');
                if (mainContent) {
                    mainContent.parentElement.insertBefore(notificationContainer, mainContent);
                }
            }
            
            // Add notification
            notificationContainer.insertAdjacentHTML('afterbegin', notificationHtml);
            
            // Auto-remove after 10 seconds
            setTimeout(() => {
                const alerts = notificationContainer.querySelectorAll('.alert');
                if (alerts.length > 3) {
                    alerts[alerts.length - 1].remove();
                }
            }, 10000);
        }

        // Assembly functions
        function startAssembly(productId, productName) {
            const button = event.target.closest('button');
            const originalHtml = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            fetch('/Assembly/StartAssembly', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    productId: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Don't show toast here - SignalR will handle the notification
                    // The page will reload when SignalR message is received
                } else {
                    showToast(data.message, 'error');
                    showBillboard('assembly-billboard', data.message, 'danger', 'Assembly Error');
                    button.disabled = false;
                    button.innerHTML = originalHtml;
                }
            })
            .catch(error => {
                console.error('Error starting assembly:', error);
                showToast('An error occurred while starting assembly', 'error');
                showBillboard('assembly-billboard', 'An error occurred while starting assembly', 'danger', 'Network Error');
                button.disabled = false;
                button.innerHTML = originalHtml;
            });
        }

        function showProductDetails(productId) {
            const modal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
            const content = document.getElementById('productDetailsContent');
            
            content.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x"></i><p>Loading...</p></div>';
            modal.show();

            fetch(`/Assembly/GetProductDetails?productId=${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        content.innerHTML = generateProductDetailsHtml(data.data);
                    } else {
                        content.innerHTML = `<div class="alert alert-danger">${data.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading product details:', error);
                    content.innerHTML = '<div class="alert alert-danger">Error loading product details</div>';
                });
        }

        function generateProductDetailsHtml(product) {
            let html = `
                <h6>${product.ItemNumber} - ${product.ProductName}</h6>
                
                <h6 class="mt-3">Standard Parts</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Part Name</th>
                                <th>Status</th>
                                <th>Location</th>
                                <th>Qty</th>
                                <th>Dimensions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            product.StandardParts.forEach(part => {
                const statusBadge = part.Status === 'Sorted' ? 'bg-success' : 
                                  part.Status === 'Assembled' ? 'bg-primary' : 'bg-secondary';
                html += `
                    <tr>
                        <td>${part.Name}</td>
                        <td><span class="badge ${statusBadge}">${part.Status}</span></td>
                        <td>${part.Location}</td>
                        <td>${part.Quantity}</td>
                        <td class="small">${part.Dimensions}</td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;


            return html;
        }

        function showToast(message, type) {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const bgColor = type === 'success' ? 'bg-success' : 
                           type === 'info' ? 'bg-info' : 
                           type === 'error' ? 'bg-danger' : 'bg-secondary';
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'info' ? 'fa-info-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 'fa-bell';

            const toastHtml = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header ${bgColor} text-white">
                        <i class="fas ${icon} me-2"></i>
                        <strong class="me-auto">Assembly Station</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                autohide: type !== 'error',
                delay: type === 'success' ? 5000 : 8000
            });
            
            toast.show();
            
            // Remove toast element after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Old barcode modal functions removed - using Universal Scanner instead

        // Old processScanForAssembly function removed - using Universal Scanner instead

        // Old showScanStatus function removed - using Universal Scanner instead


        
        // Listen for scan events from Universal Scanner (auto-initialized)
        // First, remove any existing listeners to prevent duplicates
        if (window.assemblyScanHandler) {
            document.removeEventListener('scanReceived', window.assemblyScanHandler);
            console.log('Removed existing Assembly scan handler');
        }
        
        window.assemblyScanHandler = function(event) {
            const { barcode, containerId } = event.detail;
            console.log('Assembly Station: Received scan event', { barcode, containerId });
            
            // Get the scanner instance from global registry  
            const scanner = window.universalScanners[containerId];
            if (scanner) {
                handleAssemblyScan(barcode, scanner);
            }
        };
        
        document.addEventListener('scanReceived', window.assemblyScanHandler);
        console.log('Added Assembly scan handler');
        
        // Clean up event listener when page unloads
        window.addEventListener('beforeunload', function() {
            if (window.assemblyScanHandler) {
                document.removeEventListener('scanReceived', window.assemblyScanHandler);
                window.assemblyScanHandler = null;
            }
        });
        
        // Assembly scan handler that integrates Universal Scanner with existing logic
        async function handleAssemblyScan(barcode, scanner) {
            try {
                // Show processing status
                scanner.showScanResult(false, '🔄 Processing assembly scan...', false);
                
                // Use existing assembly endpoint with correct Content-Type
                const response = await fetch('/Assembly/ScanPartForAssembly', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `barcode=${encodeURIComponent(barcode)}`
                });
                
                const data = await response.json();
                
                if (data.success) {
                    scanner.showScanResult(true, data.message);
                    
                    
                    // Auto-refresh after 3 seconds to show updated queue
                    setTimeout(() => {
                        location.reload();
                    }, 3000);
                } else {
                    scanner.showScanResult(false, data.message || 'Assembly scan failed');
                }
            } catch (error) {
                console.error('Assembly scan error:', error);
                scanner.showScanResult(false, '❌ Network error. Please try again.');
            }
        }
    </script>
}