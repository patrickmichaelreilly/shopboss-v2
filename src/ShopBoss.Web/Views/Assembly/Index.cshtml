@model ShopBoss.Web.Controllers.AssemblyDashboardData
@{
    ViewData["Title"] = "Assembly Station";
}

@section Styles {
    <style>
        .assembly-card {
            transition: all 0.3s ease;
            border: 3px solid transparent;
            border-radius: 8px;
            background-color: #f8f9fa;
        }
        
        .assembly-card.ready {
            border-color: #198754;
            background-color: #e8f5e9;
        }
        
        .assembly-card.completed {
            border-color: #004F00;
            background-color: #e8f5e9;
        }
        
        .assembly-card.waiting {
            border-color: #6c757d;
            background-color: #f5f5f5;
            opacity: 0.6;
        }
        
        .assembly-card .card-body {
            display: flex !important;
            flex-direction: row !important;
            align-items: center !important;
            justify-content: flex-start !important;
            padding: 12px 20px;
            min-height: 60px;
        }
        
        .product-id-circle {
            flex-shrink: 0 !important;
        }
        
        .product-name {
            flex: 1 !important;
            margin: 0 20px !important;
        }
        
        .center-column {
            flex-shrink: 0 !important;
        }
        
        .button-column {
            flex-shrink: 0 !important;
            margin-left: 20px !important;
        }
        
        /* Reusable Product ID Circle - for use across stations */
        .product-id-circle {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 1rem;
            background-color: #198754;
            color: white;
        }
        
        .product-id-circle.completed {
            background-color: #004F00;
        }
        
        .product-id-circle.waiting {
            background-color: #6c757d;
        }
        
        
        .product-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: #333;
            margin: 0;
        }
        
        .center-column {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
        }
        
        .button-column {
            display: flex !important;
            justify-content: center !important;
            align-items: center !important;
        }
        
        .bin-locations {
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        .bin-location-box {
            background-color: #f3e5f5;
            border: 2px solid #7b1fa2;
            color: #7b1fa2;
            border-radius: 6px;
            padding: 8px 14px;
            font-size: 1.1rem;
            font-weight: 600;
            text-align: center;
            min-width: 70px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .bin-location-box.doors {
            background-color: #e3f2fd;
            border-color: #1976d2;
            color: #1976d2;
        }
        
        .bin-location-box.empty {
            background-color: #f5f5f5;
            border-color: #ccc;
            color: #999;
        }
        
        /* Assembly Station Layout - match Sorting Station viewport usage */
        main.container-fluid {
            height: calc(100vh - 76px - 175px); /* Subtract navbar height and billboard space */
            display: flex;
            flex-direction: column;
            padding-bottom: 0 !important; /* No bottom padding since we subtracted it from height */
            overflow: hidden;
        }
        
        /* Billboard hidden state */
        main.container-fluid.billboard-hidden {
            height: auto; /* Let content determine height */
            min-height: calc(100vh - 76px); /* Ensure it fills viewport if content is small */
        }
        
        /* Adjust assembly queue wrapper when billboard is hidden */
        main.container-fluid.billboard-hidden .assembly-queue-wrapper {
            overflow-y: visible; /* Remove internal scroll */
            flex: none; /* Don't stretch to fill */
        }
        
        /* Make assembly queue area scrollable and fill remaining height - match Sorting Station */
        .assembly-queue-wrapper {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            min-height: 0; /* Important for flexbox */
            margin-left: 0; /* Match billboard width - no negative margins */
            margin-right: 0;
            padding-left: 0; /* No extra padding since we're not compensating */
            padding-right: 0;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .row {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .col-12 {
            flex: 1;
            display: flex;
        }
        
        .assembly-queue-wrapper .card {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .assembly-queue-wrapper .card-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 15px;
        }
        
        /* Remove Bootstrap row/col overrides since we're using flexbox directly */
        
        .not-ready-text {
            font-size: 1.1rem;
            color: #666;
            font-style: italic;
        }
        
        .btn-drop {
            background-color: #198754;
            border-color: #198754;
            color: white;
            font-weight: 600;
            font-size: 1rem;
            padding: 10px 20px;
            width: 120px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
        }
        
        .btn-drop:hover {
            background-color: #157347;
            border-color: #146c43;
            color: white;
        }
        
        .btn-drop:disabled {
            background-color: #6c757d;
            border-color: #6c757d;
            cursor: not-allowed;
            opacity: 1;
        }
        
        .btn-drop.btn-dropped {
            background-color: #004F00;
            border-color: #004F00;
            opacity: 1;
        }
        
        .toast-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1050;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="d-flex align-items-center gap-3">
        <div>
            <h1 class="h2 mb-0">Assembly Station</h1>
            <p class="text-muted mb-0">
                <i class="fas fa-tools me-2"></i>
                Active Work Order: <strong class="text-warning">@Model.WorkOrder.Name</strong>
            </p>
        </div>
        
        <!-- Header Scanner Button -->
        <partial name="_CompactScanner" />
    </div>
    
    <div class="d-flex align-items-center gap-3">
        <!-- Billboard Toggle -->
        <div class="form-check form-switch mb-0">
            <input class="form-check-input" type="checkbox" id="billboardToggle" checked onchange="toggleBillboard()">
            <label class="form-check-label" for="billboardToggle">
                <small>Show Billboard</small>
            </label>
        </div>
        
        <!-- Statistics Cards -->
        <div class="row g-2">
            <div class="col">
                <div class="card border-success text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-success mb-0">@Model.ReadyProductIds.Count</h5>
                        <small class="text-muted">Ready</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-info text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-info mb-0">@Model.Products.Count(p => p.Product.Status == PartStatus.Assembled)</h5>
                        <small class="text-muted">Completed</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-primary text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-primary mb-0">@Model.Products.Count</h5>
                        <small class="text-muted">Total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




<!-- Assembly Queue -->
<div class="assembly-queue-wrapper">
    <div class="row">
        <div class="col-12">
        <div class="card">
            <div class="card-body">
                @if (!Model.Products.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No products found in the active work order.</p>
                    </div>
                }
                else
                {
                    @foreach (var product in Model.Products)
                    {
                        var cardClass = product.Product.Status == PartStatus.Assembled ? "completed" : 
                                       product.IsReadyForAssembly ? "ready" : "waiting";
                        
                        var statusClass = product.Product.Status == PartStatus.Assembled ? "completed" : 
                                         product.IsReadyForAssembly ? "ready" : "waiting";

                        // Get bin labels directly from the simplified properties
                        string standardBin = product.StandardBinLabel;
                        string doorBin = product.FilteredBinLabel ?? "-";

                        <div class="assembly-card card mb-3 @cardClass" data-product-id="@product.Product.Id">
                            <div class="card-body">
                                <!-- Column 1: Circle -->
                                <div class="product-id-circle @statusClass">
                                    @product.Product.ItemNumber
                                </div>
                                
                                <!-- Column 2: Product Name -->
                                <h3 class="product-name">
                                    @product.Product.Name
                                </h3>
                                
                                <!-- Column 3: Bin Locations -->
                                <div class="center-column">
                                    <div class="bin-locations">
                                        <div class="bin-location-box standard @(standardBin == "-" ? "empty" : "")">
                                            @standardBin
                                        </div>
                                        <div class="bin-location-box doors @(doorBin == "-" ? "empty" : "")">
                                            @doorBin
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Column 4: Drop Button -->
                                <div class="button-column">
                                    @if (product.Product.Status == PartStatus.Assembled)
                                    {
                                        <button class="btn btn-drop btn-dropped" disabled>
                                            <i class="fas fa-check me-2"></i>Dropped
                                        </button>
                                    }
                                    else if (product.IsReadyForAssembly)
                                    {
                                        <button class="btn btn-drop" 
                                                onclick="startAssembly('@product.Product.Id', '@product.Product.Name')">
                                            <i class="fas fa-arrow-down me-2"></i>Drop
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-drop" disabled>
                                            <i class="fas fa-clock me-2"></i>Waiting
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>
</div>


<!-- Barcode Scan Modal -->
<div class="modal fade" id="assemblyScanModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-barcode me-2"></i>
                    Scan Part to Assemble Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assemblyScanForm">
                    <div class="mb-3">
                        <label for="assemblyBarcodeInput" class="form-label">Part Barcode or Nest Sheet Name</label>
                        <input type="text" class="form-control form-control-lg" id="assemblyBarcodeInput" 
                               placeholder="Scan or enter barcode..." autocomplete="off">
                        <div class="form-text">
                            Scan any part from a ready product to mark the entire product as assembled.
                        </div>
                    </div>
                    <div id="assemblyScanStatus" class="alert" style="display: none;"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processScanForAssembly()">
                    <i class="fas fa-tools me-1"></i>Assemble Product
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Product Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productDetailsContent">
                <!-- Content will be loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container"></div>

<!-- Billboard Message at Bottom -->
@{
    ViewData["ContainerId"] = "assembly-billboard";
}

<partial name="_BillboardMessage" />

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/assembly-station.js" asp-append-version="true"></script>
    
    <!-- Pass ViewBag values to JavaScript -->
    <script>
        // Pass active work order ID to the JavaScript for SignalR group joining
        document.addEventListener('DOMContentLoaded', function() {
            const activeWorkOrderId = '@Model.WorkOrder.Id';
            if (activeWorkOrderId) {
                document.body.setAttribute('data-active-work-order-id', activeWorkOrderId);
            }
        });
    </script>
}