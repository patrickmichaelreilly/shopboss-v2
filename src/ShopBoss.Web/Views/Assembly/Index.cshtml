@model ShopBoss.Web.Controllers.AssemblyDashboardData
@{
    ViewData["Title"] = "Assembly Station";
}

@section Styles {
    <style>
        .assembly-card {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .assembly-card.ready {
            border-left-color: #198754;
            background-color: #f8fff9;
        }
        
        .assembly-card.completed {
            border-left-color: #004F00;
            background-color: #f8f9ff;
        }
        
        .assembly-card.in-progress {
            border-left-color: #fd7e14;
            background-color: #fff9f5;
        }
        
        .assembly-card.waiting {
            border-left-color: #6c757d;
            background-color: #f8f9fa;
        }
        
        .progress-circle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }
        
        .progress-0-25 { background-color: #dc3545; }
        .progress-26-50 { background-color: #fd7e14; }
        .progress-51-75 { background-color: #ffc107; color: #000; }
        .progress-76-99 { background-color: #198754; }
        .progress-100 { background-color: #004F00; }
        
        .rack-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .rack-standard { background-color: #004F00; }
        .rack-doors { background-color: #198754; }
        .rack-shelves { background-color: #fd7e14; }
        .rack-hardware { background-color: #6f42c1; }
        .rack-cart { background-color: #dc3545; }
        
        .part-location {
            background-color: #e9ecef;
            border-radius: 4px;
            padding: 2px 6px;
            margin: 2px;
            display: inline-block;
            font-size: 0.875rem;
        }
        
        .filtered-parts-section {
            background-color: #fff3cd;
            border: 1px solid #ffecb5;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }
        
        .btn-start-assembly {
            background-color: #198754;
            border-color: #198754;
            color: white;
            font-weight: bold;
            padding: 10px 20px;
        }
        
        .btn-start-assembly:hover {
            background-color: #157347;
            border-color: #146c43;
        }
        
        .btn-start-assembly:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .toast-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1050;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h2 mb-0">Assembly Station</h1>
        <p class="text-muted mb-0">
            <i class="fas fa-tools me-2"></i>
            Active Work Order: <strong>@Model.WorkOrder.Name</strong>
        </p>
    </div>
    <div>
        <button type="button" class="btn btn-primary btn-lg" onclick="openScanModal()">
            <i class="fas fa-barcode me-2"></i>
            Scan Part to Assemble
        </button>
    </div>
    <div class="text-end">
        <div class="row g-2">
            <div class="col">
                <div class="card border-success text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-success mb-0">@Model.ReadyProductIds.Count</h5>
                        <small class="text-muted">Ready</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-info text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-info mb-0">@Model.Products.Count(p => p.IsCompleted)</h5>
                        <small class="text-muted">Completed</small>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card border-primary text-center">
                    <div class="card-body py-2">
                        <h5 class="card-title text-primary mb-0">@Model.Products.Count</h5>
                        <small class="text-muted">Total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Assembly Queue -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-clipboard-list me-2"></i>
                    Assembly Queue
                </h5>
            </div>
            <div class="card-body">
                @if (!Model.Products.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No products found in the active work order.</p>
                    </div>
                }
                else
                {
                    @foreach (var product in Model.Products)
                    {
                        var cardClass = product.IsCompleted ? "completed" : 
                                       product.IsReadyForAssembly ? "ready" : 
                                       product.CompletionPercentage > 0 ? "in-progress" : "waiting";
                        
                        var progressClass = product.CompletionPercentage switch
                        {
                            <= 25 => "progress-0-25",
                            <= 50 => "progress-26-50", 
                            <= 75 => "progress-51-75",
                            < 100 => "progress-76-99",
                            _ => "progress-100"
                        };

                        <div class="assembly-card card mb-3 @cardClass" data-product-id="@product.Product.Id">
                            <div class="card-body">
                                <div class="row align-items-center">
                                    <div class="col-auto">
                                        <div class="progress-circle @progressClass">
                                            @if (product.IsCompleted)
                                            {
                                                <i class="fas fa-check"></i>
                                            }
                                            else
                                            {
                                                <span>@product.CompletionPercentage%</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="col">
                                        <h6 class="card-title mb-1">
                                            @product.Product.ProductNumber - @product.Product.Name
                                        </h6>
                                        <div class="text-muted small mb-2">
                                            <i class="fas fa-cube me-1"></i>
                                            @product.SortedCarcassPartsCount/@product.CarcassPartsCount carcass parts sorted
                                            @if (product.FilteredPartsCount > 0)
                                            {
                                                <span class="ms-2">
                                                    <i class="fas fa-filter me-1"></i>
                                                    @product.SortedFilteredPartsCount/@product.FilteredPartsCount filtered parts
                                                </span>
                                            }
                                        </div>
                                        @if (product.PartLocations.Any())
                                        {
                                            <div class="small">
                                                <strong>Locations:</strong>
                                                @foreach (var location in product.PartLocations.Take(5))
                                                {
                                                    <span class="part-location">@location.Location</span>
                                                }
                                                @if (product.PartLocations.Count > 5)
                                                {
                                                    <span class="text-muted">+@(product.PartLocations.Count - 5) more</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="col-auto">
                                        @if (product.IsCompleted)
                                        {
                                            <span class="badge bg-primary fs-6">
                                                <i class="fas fa-check-circle me-1"></i>Completed
                                            </span>
                                        }
                                        else if (product.IsReadyForAssembly)
                                        {
                                            <button class="btn btn-start-assembly btn-lg me-2" 
                                                    onclick="startAssembly('@product.Product.Id', '@product.Product.Name')">
                                                <i class="fas fa-play me-1"></i>Start Assembly
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary fs-6">
                                                <i class="fas fa-clock me-1"></i>Waiting
                                            </span>
                                        }
                                        <button class="btn btn-outline-info btn-sm" 
                                                onclick="showProductDetails('@product.Product.Id')">
                                            <i class="fas fa-info-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    
    <!-- Sorting Rack Status -->
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-warehouse me-2"></i>
                    Sorting Rack Status
                </h5>
            </div>
            <div class="card-body">
                @if (!Model.StorageRacks.Any())
                {
                    <p class="text-muted">No storage racks configured.</p>
                }
                else
                {
                    @foreach (var rack in Model.StorageRacks.OrderBy(r => r.Type))
                    {
                        var rackClass = rack.Type.ToString().ToLower();
                        
                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                            <div>
                                <span class="rack-indicator rack-@rackClass"></span>
                                <strong>@rack.Name</strong>
                                <br>
                                <small class="text-muted">@rack.Type</small>
                            </div>
                            <div class="text-end">
                                <div class="fw-bold">@rack.OccupiedBins/@rack.TotalBins</div>
                                <div class="small text-muted">@rack.OccupancyPercentage.ToString("F0")% full</div>
                            </div>
                        </div>
                    }
                }
                
                <div class="mt-3">
                    <a href="/Sorting" class="btn btn-outline-primary btn-sm w-100">
                        <i class="fas fa-external-link-alt me-1"></i>
                        View Sorting Station
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filtered Parts Information -->
@if (Model.FilteredParts.Any())
{
    <div class="filtered-parts-section mt-4">
        <h5>
            <i class="fas fa-filter me-2"></i>
            Doors, Fronts & Adjustable Shelves
        </h5>
        <p class="mb-3">
            <small class="text-muted">
                These components are processed separately and will need to be collected from specialized racks after carcass assembly.
            </small>
        </p>
        
        <div class="row">
            @foreach (var group in Model.FilteredParts.GroupBy(f => f.Category))
            {
                <div class="col-md-4 mb-3">
                    <h6>@group.Key</h6>
                    @foreach (var part in group.Take(5))
                    {
                        <div class="small mb-1">
                            <strong>@part.PartName</strong> (Qty: @part.Quantity)
                            <br>
                            <span class="text-muted">@part.Location</span>
                        </div>
                    }
                    @if (group.Count() > 5)
                    {
                        <div class="small text-muted">+@(group.Count() - 5) more items</div>
                    }
                </div>
            }
        </div>
    </div>
}

<!-- Barcode Scan Modal -->
<div class="modal fade" id="assemblyScanModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-barcode me-2"></i>
                    Scan Part to Assemble Product
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="assemblyScanForm">
                    <div class="mb-3">
                        <label for="assemblyBarcodeInput" class="form-label">Part Barcode or Nest Sheet Name</label>
                        <input type="text" class="form-control form-control-lg" id="assemblyBarcodeInput" 
                               placeholder="Scan or enter barcode..." autocomplete="off">
                        <div class="form-text">
                            Scan any part from a ready product to mark the entire product as assembled.
                        </div>
                    </div>
                    <div id="assemblyScanStatus" class="alert" style="display: none;"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processScanForAssembly()">
                    <i class="fas fa-tools me-1"></i>Assemble Product
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Filtered Parts Guidance Modal -->
<div class="modal fade" id="filteredPartsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-map-marker-alt me-2"></i>
                    Next Steps: Collect Finishing Components
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="filteredPartsContent">
                <!-- Content will be populated dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                    <i class="fas fa-check me-1"></i>Got it!
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Product Details Modal -->
<div class="modal fade" id="productDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productDetailsContent">
                <!-- Content will be loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container for Notifications -->
<div class="toast-container"></div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        // SignalR connection for real-time updates
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/status")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log("Assembly Station SignalR connection established");
            
            // Join work order group for notifications
            const activeWorkOrderId = '@Model.WorkOrder.Id';
            if (activeWorkOrderId) {
                connection.invoke("JoinWorkOrderGroup", activeWorkOrderId);
            }
        }).catch(function (err) {
            console.error("Error starting SignalR connection:", err);
        });

        // Listen for product assembly notifications
        connection.on("ProductAssembled", function (data) {
            console.log("ProductAssembled event received:", data);
            showToast(`Product "${data.ProductName}" has been assembled!`, 'success');
            updateProductStatus(data.ProductId, 'completed');
            updateShippingReadinessStatus(data);
        });

        // Listen for barcode scan assembly notifications
        connection.on("ProductAssembledByScan", function (data) {
            console.log("ProductAssembledByScan event received:", data);
            showToast(`🔧 Product "${data.ProductName}" assembled via scan!`, 'success');
            updateProductStatus(data.ProductId, 'completed');
            updateShippingReadinessStatus(data);
        });

        // Listen for new products ready for assembly (from sorting station)
        connection.on("ProductReadyForAssembly", function (data) {
            console.log("ProductReadyForAssembly event received:", data);
            showToast(`Product "${data.productName}" is now ready for assembly!`, 'info');
            updateProductStatus(data.productId, 'ready');
        });

        // Listen for general status updates
        connection.on("StatusUpdate", function (data) {
            console.log("StatusUpdate event received:", data);
            if (data.type === "product-assembled") {
                updateProductStatus(data.productId, 'completed');
                updateShippingReadinessStatus(data);
                showStationNotification(data.station, data.message);
            }
        });

        // Functions for dynamic updates
        function updateProductStatus(productId, status) {
            const productCard = document.querySelector(`[data-product-id="${productId}"]`);
            if (productCard) {
                const statusElement = productCard.querySelector('.progress-circle');
                const buttonContainer = productCard.querySelector('.col-auto:last-child');
                
                if (status === 'completed' && statusElement) {
                    // Update progress circle to blue (completed)
                    statusElement.className = 'progress-circle progress-100';
                    statusElement.innerHTML = '<i class="fas fa-check"></i>';
                    
                    // Update card class
                    productCard.className = productCard.className.replace(/\b(ready|in-progress|waiting)\b/g, '').trim() + ' completed';
                    
                    // Update button to show completed state
                    if (buttonContainer) {
                        // Find and replace the button/badge area (but preserve the details button)
                        const statusArea = buttonContainer.querySelector('.badge, .btn-start-assembly');
                        if (statusArea) {
                            statusArea.outerHTML = `
                                <span class="badge bg-primary fs-6">
                                    <i class="fas fa-check-circle me-1"></i>Completed
                                </span>
                            `;
                        }
                    }
                } else if (status === 'ready' && statusElement) {
                    // Update progress circle to show ready (green)
                    statusElement.className = 'progress-circle progress-76-99';
                    
                    // Update card class
                    productCard.className = productCard.className.replace(/\b(completed|in-progress|waiting)\b/g, '').trim() + ' ready';
                    
                    // Update button to show ready state
                    if (buttonContainer) {
                        const statusArea = buttonContainer.querySelector('.badge');
                        if (statusArea && !buttonContainer.querySelector('.btn-start-assembly')) {
                            statusArea.outerHTML = `
                                <button class="btn btn-start-assembly btn-lg me-2" onclick="startAssembly('${productId}')">
                                    <i class="fas fa-play me-1"></i>Start Assembly
                                </button>
                            `;
                        }
                    }
                }
            }
        }

        function updateShippingReadinessStatus(data) {
            if (data.IsWorkOrderReadyForShipping) {
                showToast(`🚛 Work Order is now ready for shipping! (${data.ReadyForShippingProducts?.length || 0} products ready)`, 'info');
                
                // Add shipping readiness indicator
                const headerDiv = document.querySelector('h2').parentElement;
                let shippingIndicator = document.getElementById('shipping-ready-indicator');
                if (!shippingIndicator) {
                    shippingIndicator = document.createElement('div');
                    shippingIndicator.id = 'shipping-ready-indicator';
                    shippingIndicator.className = 'alert alert-info mt-3';
                    shippingIndicator.innerHTML = `
                        <i class="fas fa-shipping-fast me-2"></i>
                        <strong>Ready for Shipping!</strong> All products in this work order have been assembled.
                    `;
                    headerDiv.appendChild(shippingIndicator);
                }
            }
        }

        function showStationNotification(station, message) {
            const timestamp = new Date().toLocaleTimeString();
            const notificationHtml = `
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>${station} Station:</strong> ${message}
                    <small class="d-block text-muted mt-1">${timestamp}</small>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Find or create notifications container
            let notificationContainer = document.getElementById('station-notifications');
            if (!notificationContainer) {
                notificationContainer = document.createElement('div');
                notificationContainer.id = 'station-notifications';
                notificationContainer.className = 'mt-3';
                const mainContent = document.querySelector('.row.g-4');
                if (mainContent) {
                    mainContent.parentElement.insertBefore(notificationContainer, mainContent);
                }
            }
            
            // Add notification
            notificationContainer.insertAdjacentHTML('afterbegin', notificationHtml);
            
            // Auto-remove after 10 seconds
            setTimeout(() => {
                const alerts = notificationContainer.querySelectorAll('.alert');
                if (alerts.length > 3) {
                    alerts[alerts.length - 1].remove();
                }
            }, 10000);
        }

        // Assembly functions
        function startAssembly(productId, productName) {
            if (!confirm(`Start assembly for "${productName}"? This will mark all carcass parts as assembled.`)) {
                return;
            }

            const button = event.target.closest('button');
            const originalHtml = button.innerHTML;
            button.disabled = true;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';

            fetch('/Assembly/StartAssembly', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    productId: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    showToast(data.message, 'error');
                    button.disabled = false;
                    button.innerHTML = originalHtml;
                }
            })
            .catch(error => {
                console.error('Error starting assembly:', error);
                showToast('An error occurred while starting assembly', 'error');
                button.disabled = false;
                button.innerHTML = originalHtml;
            });
        }

        function showProductDetails(productId) {
            const modal = new bootstrap.Modal(document.getElementById('productDetailsModal'));
            const content = document.getElementById('productDetailsContent');
            
            content.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x"></i><p>Loading...</p></div>';
            modal.show();

            fetch(`/Assembly/GetProductDetails?productId=${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        content.innerHTML = generateProductDetailsHtml(data.data);
                    } else {
                        content.innerHTML = `<div class="alert alert-danger">${data.message}</div>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading product details:', error);
                    content.innerHTML = '<div class="alert alert-danger">Error loading product details</div>';
                });
        }

        function generateProductDetailsHtml(product) {
            let html = `
                <h6>${product.ProductNumber} - ${product.ProductName}</h6>
                
                <h6 class="mt-3">Carcass Parts</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Part Name</th>
                                <th>Status</th>
                                <th>Location</th>
                                <th>Qty</th>
                                <th>Dimensions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            product.CarcassParts.forEach(part => {
                const statusBadge = part.Status === 'Sorted' ? 'bg-success' : 
                                  part.Status === 'Assembled' ? 'bg-primary' : 'bg-secondary';
                html += `
                    <tr>
                        <td>${part.Name}</td>
                        <td><span class="badge ${statusBadge}">${part.Status}</span></td>
                        <td>${part.Location}</td>
                        <td>${part.Quantity}</td>
                        <td class="small">${part.Dimensions}</td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            if (product.FilteredParts && product.FilteredParts.length > 0) {
                html += `
                    <h6 class="mt-3">Doors, Fronts & Adjustable Shelves</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Part Name</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Location</th>
                                    <th>Qty</th>
                                </tr>
                            </thead>
                            <tbody>
                `;

                product.FilteredParts.forEach(part => {
                    const statusBadge = part.Status === 'Sorted' ? 'bg-success' : 'bg-secondary';
                    html += `
                        <tr>
                            <td>${part.Name}</td>
                            <td><span class="badge bg-info">${part.Category}</span></td>
                            <td><span class="badge ${statusBadge}">${part.Status}</span></td>
                            <td>${part.Location}</td>
                            <td>${part.Quantity}</td>
                        </tr>
                    `;
                });

                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            }

            return html;
        }

        function showToast(message, type) {
            const toastContainer = document.querySelector('.toast-container');
            const toastId = 'toast-' + Date.now();
            
            const bgColor = type === 'success' ? 'bg-success' : 
                           type === 'info' ? 'bg-info' : 
                           type === 'error' ? 'bg-danger' : 'bg-secondary';
            
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'info' ? 'fa-info-circle' : 
                        type === 'error' ? 'fa-exclamation-circle' : 'fa-bell';

            const toastHtml = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header ${bgColor} text-white">
                        <i class="fas ${icon} me-2"></i>
                        <strong class="me-auto">Assembly Station</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);
            
            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, {
                autohide: type !== 'error',
                delay: type === 'success' ? 5000 : 8000
            });
            
            toast.show();
            
            // Remove toast element after it's hidden
            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        // Barcode scanning functions
        function openScanModal() {
            const modal = new bootstrap.Modal(document.getElementById('assemblyScanModal'));
            resetScanModal();
            modal.show();
        }

        function resetScanModal() {
            document.getElementById('assemblyBarcodeInput').value = '';
            document.getElementById('assemblyScanStatus').style.display = 'none';
            document.getElementById('assemblyBarcodeInput').classList.remove('is-invalid', 'is-valid');
        }

        // Auto-focus on barcode input when modal opens
        document.getElementById('assemblyScanModal').addEventListener('shown.bs.modal', function () {
            document.getElementById('assemblyBarcodeInput').focus();
        });

        // Handle Enter key in barcode input
        document.getElementById('assemblyBarcodeInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                processScanForAssembly();
            }
        });

        function processScanForAssembly() {
            const barcodeInput = document.getElementById('assemblyBarcodeInput');
            const barcode = barcodeInput.value.trim();
            const statusDiv = document.getElementById('assemblyScanStatus');

            if (!barcode) {
                showScanStatus('Please enter a barcode', 'danger');
                barcodeInput.focus();
                return;
            }

            showScanStatus('🔍 Processing barcode scan...', 'info', true);

            fetch('/Assembly/ScanPartForAssembly', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    barcode: barcode
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showScanStatus(data.message, 'success');
                    barcodeInput.classList.add('is-valid');
                    barcodeInput.classList.remove('is-invalid');
                    
                    // Show filtered parts guidance if needed
                    console.log('Assembly scan response:', data);
                    console.log('Has filtered parts:', data.hasFilteredParts);
                    console.log('Filtered parts guidance:', data.filteredPartsGuidance);
                    
                    if (data.hasFilteredParts && data.filteredPartsGuidance.length > 0) {
                        setTimeout(() => {
                            showFilteredPartsGuidance(data.productName, data.filteredPartsGuidance);
                            bootstrap.Modal.getInstance(document.getElementById('assemblyScanModal')).hide();
                        }, 2000);
                    } else {
                        setTimeout(() => {
                            bootstrap.Modal.getInstance(document.getElementById('assemblyScanModal')).hide();
                            location.reload();
                        }, 2000);
                    }
                } else {
                    showScanStatus(`❌ ${data.message}`, 'danger');
                    barcodeInput.classList.add('is-invalid');
                    barcodeInput.classList.remove('is-valid');
                }
            })
            .catch(error => {
                console.error('Error processing scan:', error);
                showScanStatus('❌ Error processing scan', 'danger');
                barcodeInput.classList.add('is-invalid');
            });
        }

        function showScanStatus(message, type, isLoading = false) {
            const statusDiv = document.getElementById('assemblyScanStatus');
            statusDiv.className = `alert alert-${type}`;
            statusDiv.style.display = 'block';
            
            if (isLoading) {
                statusDiv.innerHTML = `<i class="fas fa-spinner fa-spin me-2"></i>${message}`;
            } else {
                statusDiv.innerHTML = message;
            }
        }

        function showFilteredPartsGuidance(productName, filteredParts) {
            console.log('showFilteredPartsGuidance called with:', { productName, filteredParts });
            
            const modal = new bootstrap.Modal(document.getElementById('filteredPartsModal'));
            const content = document.getElementById('filteredPartsContent');
            
            let html = `
                <div class="alert alert-success mb-3">
                    <h6><i class="fas fa-check-circle me-2"></i>Carcass Assembly Complete!</h6>
                    <p class="mb-0">Product "<strong>${productName}</strong>" carcass is assembled. Now collect these finishing components:</p>
                </div>
            `;

            // Group by category
            const categories = {};
            filteredParts.forEach((part, index) => {
                console.log(`Part ${index}:`, part);
                if (!categories[part.category]) {
                    categories[part.category] = [];
                }
                categories[part.category].push(part);
            });

            Object.keys(categories).forEach(category => {
                const categoryName = category || 'Unknown Category';
                const categoryIcon = categoryName === 'DoorsAndDrawerFronts' ? 'fa-door-open' : 
                                   categoryName === 'AdjustableShelves' ? 'fa-th-large' : 'fa-cube';
                const displayName = categoryName.replace(/([A-Z])/g, ' $1').trim() || 'Unknown Category';
                
                html += `
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas ${categoryIcon} me-2"></i>
                                ${displayName}
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                `;

                categories[category].forEach(part => {
                    const partName = part.name || 'Unknown Part';
                    const partQuantity = part.quantity || 0;
                    const partLocation = part.location || 'Location Unknown';
                    
                    html += `
                        <div class="col-md-6 mb-2">
                            <div class="d-flex justify-content-between align-items-center p-2 bg-light rounded">
                                <div>
                                    <strong>${partName}</strong>
                                    <br>
                                    <small class="text-muted">Qty: ${partQuantity}</small>
                                </div>
                                <div class="text-end">
                                    <span class="badge bg-info">${partLocation}</span>
                                </div>
                            </div>
                        </div>
                    `;
                });

                html += `
                            </div>
                        </div>
                    </div>
                `;
            });

            html += `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Next Steps:</strong> Collect the components above from their rack locations and complete the final assembly.
                </div>
            `;

            content.innerHTML = html;
            
            // Add event listener for when modal is dismissed to refresh the UI
            const modalElement = document.getElementById('filteredPartsModal');
            modalElement.addEventListener('hidden.bs.modal', function handleModalDismiss() {
                // Remove the event listener to prevent multiple listeners
                modalElement.removeEventListener('hidden.bs.modal', handleModalDismiss);
                // Reload the page to show updated product status
                location.reload();
            });
            
            modal.show();
        }
    </script>
}