@model IEnumerable<ShopBoss.Web.Models.NestSheet>

@{
    ViewData["Title"] = "CNC Station";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-cut me-2"></i>CNC Station</h2>
        @if (!string.IsNullOrEmpty(ViewBag.ActiveWorkOrderName))
        {
            <small class="text-muted">
                <i class="fas fa-star text-warning me-1"></i>
                Active Work Order: <strong class="text-warning">@ViewBag.ActiveWorkOrderName</strong>
            </small>
        }
        else
        {
            <small class="text-danger">
                <i class="fas fa-exclamation-triangle me-1"></i>
                No active work order selected
            </small>
        }
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#scanModal">
            <i class="fas fa-barcode me-2"></i>Scan Nest Sheet
        </button>
        <button type="button" class="btn btn-outline-info" onclick="loadRecentScans()">
            <i class="fas fa-history me-2"></i>Recent Scans
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @ViewBag.ErrorMessage
    </div>
}

@if (!Model.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        No nest sheets found for the active work order. Create nest sheets to start cutting operations.
    </div>
}
else
{
    <div class="row">
        @foreach (var nestSheet in Model)
        {
            var totalParts = nestSheet.Parts.Count;
            var cutParts = nestSheet.Parts.Count(p => p.Status >= ShopBoss.Web.Models.PartStatus.Cut);
            var progressPercentage = totalParts > 0 ? (cutParts * 100) / totalParts : 0;
            var statusBadgeClass = nestSheet.IsProcessed ? "bg-success" : "bg-warning";
            var statusText = nestSheet.IsProcessed ? "Completed" : "Pending";

            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card h-100 @(nestSheet.IsProcessed ? "border-success" : "")">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="card-title mb-0">
                            <i class="fas fa-layer-group me-2"></i>@nestSheet.Name
                        </h6>
                        <span class="badge @statusBadgeClass">@statusText</span>
                    </div>
                    <div class="card-body">
                        <div class="row g-2 mb-3">
                            <div class="col-6">
                                <small class="text-muted">Material:</small><br>
                                <strong>@(string.IsNullOrEmpty(nestSheet.Material) ? "Not specified" : nestSheet.Material)</strong>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Barcode:</small><br>
                                <code class="small">@nestSheet.Barcode</code>
                            </div>
                        </div>

                        @if (nestSheet.Length.HasValue || nestSheet.Width.HasValue || nestSheet.Thickness.HasValue)
                        {
                            <div class="mb-3">
                                <small class="text-muted">Dimensions:</small><br>
                                <span class="small">
                                    @if (nestSheet.Length.HasValue)
                                    {
                                        <span>L: @nestSheet.Length.Value mm</span>
                                    }
                                    @if (nestSheet.Width.HasValue)
                                    {
                                        <span>@(nestSheet.Length.HasValue ? " × " : "")W: @nestSheet.Width.Value mm</span>
                                    }
                                    @if (nestSheet.Thickness.HasValue)
                                    {
                                        <span>@(nestSheet.Length.HasValue || nestSheet.Width.HasValue ? " × " : "")T: @nestSheet.Thickness.Value mm</span>
                                    }
                                </span>
                            </div>
                        }

                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small class="text-muted">Parts Progress:</small>
                                <small class="text-muted">@cutParts / @totalParts parts cut</small>
                            </div>
                            <div class="progress" style="height: 6px;">
                                <div class="progress-bar @(nestSheet.IsProcessed ? "bg-success" : "bg-primary")" 
                                     role="progressbar" style="width: @progressPercentage%" 
                                     aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>

                        @if (nestSheet.ProcessedDate.HasValue)
                        {
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="fas fa-check text-success me-1"></i>
                                    Processed: @nestSheet.ProcessedDate.Value.ToString("yyyy-MM-dd HH:mm")
                                </small>
                            </div>
                        }
                        
                        <div class="mb-2">
                            <small class="text-muted">
                                <i class="fas fa-clock me-1"></i>
                                Created: @nestSheet.CreatedDate.ToString("yyyy-MM-dd HH:mm")
                            </small>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="btn-group w-100" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm" 
                                    onclick="viewNestSheetDetails('@nestSheet.Id')">
                                <i class="fas fa-eye me-1"></i>Details
                            </button>
                            @if (!nestSheet.IsProcessed)
                            {
                                <button type="button" class="btn btn-success btn-sm" 
                                        onclick="processNestSheet('@nestSheet.Barcode', '@nestSheet.Name')">
                                    <i class="fas fa-cut me-1"></i>Process
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Barcode Scan Modal -->
<div class="modal fade" id="scanModal" tabindex="-1" aria-labelledby="scanModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scanModalLabel">
                    <i class="fas fa-barcode me-2"></i>Scan Nest Sheet
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="scanForm">
                    <div class="mb-3">
                        <label for="barcodeInput" class="form-label">Barcode</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="barcodeInput" placeholder="Scan or enter barcode" required>
                            <button type="button" class="btn btn-outline-secondary" id="validateBtn" onclick="validateBarcodeInput()">
                                <i class="fas fa-check"></i>
                            </button>
                        </div>
                        <div id="validationFeedback" class="form-text"></div>
                        <div id="suggestions" class="mt-2" style="display: none;">
                            <small class="text-muted">Did you mean:</small>
                            <div id="suggestionsList" class="mt-1"></div>
                        </div>
                    </div>
                    
                    <!-- Real-time scan status indicator -->
                    <div id="scanStatus" class="mb-3" style="display: none;">
                        <div class="d-flex align-items-center">
                            <div id="scanSpinner" class="spinner-border spinner-border-sm me-2" role="status" style="display: none;">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                            <div id="scanStatusText" class="flex-grow-1"></div>
                            <div id="scanStatusIcon"></div>
                        </div>
                    </div>
                    
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="scanForm" class="btn btn-primary">
                    <i class="fas fa-cut me-2"></i>Process Nest Sheet
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Nest Sheet Details Modal -->
<div class="modal fade" id="nestSheetDetailsModal" tabindex="-1" aria-labelledby="nestSheetDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nestSheetDetailsModalLabel">
                    <i class="fas fa-layer-group me-2"></i>Nest Sheet Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="nestSheetDetailsContent">
                <!-- Content will be loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<!-- Recent Scans Modal -->
<div class="modal fade" id="recentScansModal" tabindex="-1" aria-labelledby="recentScansModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="recentScansModalLabel">
                    <i class="fas fa-history me-2"></i>Recent Scan History
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="recentScansContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/status")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log("SignalR connected");
            
            // Join CNC station group for real-time updates
            connection.invoke("JoinCncGroup");
            
            // Join work order group if active work order is set
            const activeWorkOrderId = '@ViewBag.ActiveWorkOrderId';
            if (activeWorkOrderId) {
                connection.invoke("JoinWorkOrderGroup", activeWorkOrderId);
            }
        }).catch(function (err) {
            console.error("SignalR connection error:", err.toString());
        });

        // Handle real-time status updates
        connection.on("StatusUpdate", function (data) {
            if (data.type === "nest-sheet-processed") {
                // Show toast notification
                showToast(`Nest sheet "${data.nestSheetName}" processed successfully! ${data.partsProcessed} parts marked as Cut.`, 'success');
                
                // Refresh the page to show updated status
                setTimeout(() => {
                    location.reload();
                }, 2000);
            }
        });

        connection.on("NestSheetProcessed", function (data) {
            showToast(`Nest sheet "${data.nestSheetName}" processed at ${data.processedDate}`, 'success');
        });

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'primary'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove toast element after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        // Auto-focus barcode input when modal opens
        document.getElementById('scanModal').addEventListener('shown.bs.modal', function () {
            document.getElementById('barcodeInput').focus();
            resetScanModal();
        });

        // Enhanced barcode validation with visual feedback
        function validateBarcodeInput() {
            const barcode = document.getElementById('barcodeInput').value.trim();
            const feedback = document.getElementById('validationFeedback');
            const suggestions = document.getElementById('suggestions');
            const suggestionsList = document.getElementById('suggestionsList');
            
            if (!barcode) {
                updateValidationFeedback('Please enter a barcode.', 'text-danger');
                return;
            }

            // Show loading state
            updateValidationFeedback('Validating barcode...', 'text-info');
            
            fetch('/Cnc/ValidateBarcode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `barcode=${encodeURIComponent(barcode)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateValidationFeedback(`✅ ${data.message}`, 'text-success');
                    suggestions.style.display = 'none';
                } else {
                    updateValidationFeedback(`⚠️ ${data.message}`, 'text-danger');
                    
                    // Show suggestions if available
                    if (data.suggestions && data.suggestions.length > 0) {
                        suggestionsList.innerHTML = data.suggestions.map(s => 
                            `<button type="button" class="btn btn-sm btn-outline-primary me-1 mb-1" onclick="selectSuggestion('${s}')">${s}</button>`
                        ).join('');
                        suggestions.style.display = 'block';
                    } else {
                        suggestions.style.display = 'none';
                    }
                }
            })
            .catch(error => {
                console.error('Validation error:', error);
                updateValidationFeedback('Validation failed. Please try again.', 'text-danger');
            });
        }

        function updateValidationFeedback(message, className) {
            const feedback = document.getElementById('validationFeedback');
            feedback.textContent = message;
            feedback.className = `form-text ${className}`;
        }

        function selectSuggestion(barcode) {
            document.getElementById('barcodeInput').value = barcode;
            document.getElementById('suggestions').style.display = 'none';
            validateBarcodeInput();
        }

        // Process nest sheet from scan modal with enhanced feedback
        function processBarcodeFromModal() {
            const barcode = document.getElementById('barcodeInput').value.trim();
            if (!barcode) {
                updateValidationFeedback('Please enter a barcode.', 'text-danger');
                return;
            }
            
            // Show processing state
            const scanStatus = document.getElementById('scanStatus');
            const scanSpinner = document.getElementById('scanSpinner');
            const scanStatusText = document.getElementById('scanStatusText');
            const scanStatusIcon = document.getElementById('scanStatusIcon');
            
            scanStatus.style.display = 'block';
            scanSpinner.style.display = 'block';
            scanStatusText.textContent = 'Processing nest sheet...';
            scanStatusIcon.innerHTML = '';
            
            processNestSheetWithFeedback(barcode);
        }

        function processNestSheetWithFeedback(barcode) {
            fetch('/Cnc/ProcessNestSheet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `barcode=${encodeURIComponent(barcode)}`
            })
            .then(response => response.json())
            .then(data => {
                const scanStatus = document.getElementById('scanStatus');
                const scanSpinner = document.getElementById('scanSpinner');
                const scanStatusText = document.getElementById('scanStatusText');
                const scanStatusIcon = document.getElementById('scanStatusIcon');
                
                scanSpinner.style.display = 'none';
                
                if (data.success) {
                    scanStatusText.textContent = data.message;
                    scanStatusIcon.innerHTML = '<i class="fas fa-check-circle text-success"></i>';
                    
                    // Show success animation
                    animateSuccess();
                    
                    // Close modal after delay
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
                        modal.hide();
                        resetScanModal();
                        location.reload(); // Refresh to show updated status
                    }, 2000);
                } else {
                    scanStatusText.textContent = data.message;
                    scanStatusIcon.innerHTML = getErrorIcon(data.type);
                    
                    // Handle specific error types
                    if (data.type === 'not_found' && data.suggestions) {
                        const suggestionsList = document.getElementById('suggestionsList');
                        suggestionsList.innerHTML = data.suggestions.map(s => 
                            `<button type="button" class="btn btn-sm btn-outline-primary me-1 mb-1" onclick="selectSuggestion('${s}')">${s}</button>`
                        ).join('');
                        document.getElementById('suggestions').style.display = 'block';
                    }
                }
            })
            .catch(error => {
                console.error('Processing error:', error);
                const scanSpinner = document.getElementById('scanSpinner');
                const scanStatusText = document.getElementById('scanStatusText');
                const scanStatusIcon = document.getElementById('scanStatusIcon');
                
                scanSpinner.style.display = 'none';
                scanStatusText.textContent = 'An unexpected error occurred. Please try again.';
                scanStatusIcon.innerHTML = '<i class="fas fa-exclamation-triangle text-danger"></i>';
            });
        }

        function getErrorIcon(errorType) {
            switch (errorType) {
                case 'validation': return '<i class="fas fa-exclamation-triangle text-warning"></i>';
                case 'not_found': return '<i class="fas fa-search text-info"></i>';
                case 'duplicate': return '<i class="fas fa-clock text-warning"></i>';
                case 'already_processed': return '<i class="fas fa-check-circle text-info"></i>';
                case 'session': return '<i class="fas fa-user-times text-warning"></i>';
                default: return '<i class="fas fa-times-circle text-danger"></i>';
            }
        }

        function animateSuccess() {
            const scanStatusIcon = document.getElementById('scanStatusIcon');
            scanStatusIcon.classList.add('animate__animated', 'animate__pulse');
        }

        function resetScanModal() {
            document.getElementById('barcodeInput').value = '';
            document.getElementById('validationFeedback').textContent = '';
            document.getElementById('scanStatus').style.display = 'none';
            document.getElementById('suggestions').style.display = 'none';
        }

        // Process nest sheet by barcode
        function processNestSheet(barcode, sheetName) {
            if (!confirm(`Are you sure you want to process nest sheet "${sheetName}"?\n\nThis will mark all associated parts as "Cut" and cannot be undone.`)) {
                return;
            }

            fetch('/Cnc/ProcessNestSheet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `barcode=${encodeURIComponent(barcode)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    location.reload(); // Refresh to show updated status
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error processing nest sheet:', error);
                alert('An error occurred while processing the nest sheet.');
            });
        }

        // Manual nest sheet creation removed - nest sheets come from import process

        // View nest sheet details
        function viewNestSheetDetails(nestSheetId) {
            fetch(`/Cnc/GetNestSheetDetails/${nestSheetId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const nestSheet = data.nestSheet;
                        const content = `
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <h6>General Information</h6>
                                    <table class="table table-sm">
                                        <tr><td><strong>Name:</strong></td><td>${nestSheet.name}</td></tr>
                                        <tr><td><strong>Barcode:</strong></td><td><code>${nestSheet.barcode}</code></td></tr>
                                        <tr><td><strong>Material:</strong></td><td>${nestSheet.material || 'Not specified'}</td></tr>
                                        <tr><td><strong>Status:</strong></td><td><span class="badge ${nestSheet.isProcessed ? 'bg-success' : 'bg-warning'}">${nestSheet.isProcessed ? 'Completed' : 'Pending'}</span></td></tr>
                                    </table>
                                </div>
                                <div class="col-md-6">
                                    <h6>Dimensions & Progress</h6>
                                    <table class="table table-sm">
                                        ${nestSheet.length ? `<tr><td><strong>Length:</strong></td><td>${nestSheet.length} mm</td></tr>` : ''}
                                        ${nestSheet.width ? `<tr><td><strong>Width:</strong></td><td>${nestSheet.width} mm</td></tr>` : ''}
                                        ${nestSheet.thickness ? `<tr><td><strong>Thickness:</strong></td><td>${nestSheet.thickness} mm</td></tr>` : ''}
                                        <tr><td><strong>Total Parts:</strong></td><td>${nestSheet.partCount}</td></tr>
                                        <tr><td><strong>Cut Parts:</strong></td><td>${nestSheet.cutPartCount}</td></tr>
                                        <tr><td><strong>Created:</strong></td><td>${nestSheet.createdDate}</td></tr>
                                        ${nestSheet.processedDate ? `<tr><td><strong>Processed:</strong></td><td>${nestSheet.processedDate}</td></tr>` : ''}
                                    </table>
                                </div>
                            </div>
                            <h6>Parts (${nestSheet.partCount})</h6>
                            <div class="table-responsive">
                                <table class="table table-striped table-sm">
                                    <thead>
                                        <tr>
                                            <th>Part Name</th>
                                            <th>Product</th>
                                            <th>Qty</th>
                                            <th>Status</th>
                                            <th>Material</th>
                                            <th>Dimensions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${nestSheet.parts.map(part => `
                                            <tr>
                                                <td>${part.name}</td>
                                                <td>${part.productName}</td>
                                                <td>${part.qty}</td>
                                                <td><span class="badge ${part.status === 'Cut' ? 'bg-success' : part.status === 'Pending' ? 'bg-secondary' : 'bg-primary'}">${part.status}</span></td>
                                                <td>${part.material || 'N/A'}</td>
                                                <td class="small">${[part.length && `L:${part.length}`, part.width && `W:${part.width}`, part.thickness && `T:${part.thickness}`].filter(Boolean).join('×') || 'N/A'}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        `;
                        
                        document.getElementById('nestSheetDetailsContent').innerHTML = content;
                        const modal = new bootstrap.Modal(document.getElementById('nestSheetDetailsModal'));
                        modal.show();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error loading nest sheet details:', error);
                    alert('An error occurred while loading nest sheet details.');
                });
        }

        // Load recent scans modal
        function loadRecentScans() {
            const modal = new bootstrap.Modal(document.getElementById('recentScansModal'));
            const content = document.getElementById('recentScansContent');
            
            // Show loading
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading recent scans...</div>
                </div>
            `;
            
            modal.show();
            
            fetch('/Cnc/GetRecentScans')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayRecentScans(data.scans);
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load recent scans: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading recent scans:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading recent scans.
                        </div>
                    `;
                });
        }

        function displayRecentScans(scans) {
            const content = document.getElementById('recentScansContent');
            
            if (!scans || scans.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-search fa-3x mb-3"></i>
                        <p>No recent scans found.</p>
                    </div>
                `;
                return;
            }

            const scanRows = scans.map(scan => {
                const statusIcon = scan.isSuccessful 
                    ? '<i class="fas fa-check-circle text-success"></i>'
                    : '<i class="fas fa-times-circle text-danger"></i>';
                    
                const statusClass = scan.isSuccessful ? 'table-success' : 'table-danger';
                
                return `
                    <tr class="${statusClass}">
                        <td>${scan.timestamp}</td>
                        <td><code>${scan.barcode}</code></td>
                        <td>${statusIcon}</td>
                        <td>${scan.nestSheetName || 'N/A'}</td>
                        <td>${scan.partsProcessed || 'N/A'}</td>
                        <td>${scan.errorMessage || 'Success'}</td>
                    </tr>
                `;
            }).join('');

            content.innerHTML = `
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Time</th>
                                <th>Barcode</th>
                                <th>Status</th>
                                <th>Nest Sheet</th>
                                <th>Parts</th>
                                <th>Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${scanRows}
                        </tbody>
                    </table>
                </div>
            `;
        }

        // Real-time barcode validation as user types
        document.getElementById('barcodeInput').addEventListener('input', function(e) {
            const barcode = e.target.value.trim();
            if (barcode.length >= 3) {
                // Debounce validation calls
                clearTimeout(window.validationTimeout);
                window.validationTimeout = setTimeout(() => {
                    validateBarcodeInput();
                }, 500);
            }
        });

        // Enhanced modal event handlers
        document.getElementById('scanModal').addEventListener('shown.bs.modal', function () {
            document.getElementById('barcodeInput').focus();
            resetScanModal();
        });

        document.getElementById('scanModal').addEventListener('hidden.bs.modal', function () {
            resetScanModal();
        });

        // Handle Enter key in barcode input
        document.getElementById('barcodeInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
                processBarcodeFromModal();
            }
        });

        // Handle form submission (both enter key and button click)
        document.getElementById('scanForm').addEventListener('submit', function(e) {
            e.preventDefault();
            e.stopPropagation();
            processBarcodeFromModal();
        });

        // Auto-refresh recent scans when modal is opened
        document.getElementById('recentScansModal').addEventListener('shown.bs.modal', function () {
            loadRecentScans();
        });
    </script>
}