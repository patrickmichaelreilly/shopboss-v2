@model IEnumerable<ShopBoss.Web.Models.StorageRack>

@{
    ViewData["Title"] = "Sorting Station";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center gap-3">
        <div>
            <h2><i class="fas fa-sort me-2"></i>Sorting Station</h2>
            @if (!string.IsNullOrEmpty(ViewBag.ActiveWorkOrderName))
            {
                <small class="text-muted">
                    <i class="fas fa-star text-warning me-1"></i>
                    Active Work Order: <strong class="text-warning">@ViewBag.ActiveWorkOrderName</strong>
                </small>
            }
            else
            {
                <small class="text-danger">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    No active work order selected
                </small>
            }
        </div>
        
        <!-- Header Scanner Button -->
        <partial name="_CompactScanner" />
    </div>
    
    <!-- Station Action Buttons -->
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-info" onclick="loadCutParts()" id="cutPartsButton">
            <i class="fas fa-list me-2"></i>Cut Parts (<span id="cutPartsCount">@ViewBag.CutPartsCount</span>)
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @ViewBag.ErrorMessage
    </div>
}



@if (!Model.Any())
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>No storage racks configured.</strong> Please configure storage racks in the Admin Station → Configuration → Storage Racks before using the sorting station.
    </div>
}
else
{
    <!-- Rack Selection Tabs -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-warehouse me-2"></i>Storage Racks
                    </h5>
                </div>
                <div class="card-body">
                    <nav>
                        <div class="nav nav-pills" id="rack-tabs" role="tablist">
                            @{
                                var orderedRacks = Model.OrderBy(r => r.Type).ThenBy(r => r.Name).ToList();
                            }
                            @foreach (var rack in orderedRacks)
                            {
                                var isFirst = rack == orderedRacks.First();
                                var rackTypeIcon = rack.Type switch
                                {
                                    ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "fas fa-door-open",
                                    ShopBoss.Web.Models.RackType.AdjustableShelves => "fas fa-layer-group",
                                    ShopBoss.Web.Models.RackType.Hardware => "fas fa-tools",
                                    ShopBoss.Web.Models.RackType.Cart => "fas fa-dolly",
                                    _ => "fas fa-th"
                                };
                                var rackTypeColor = rack.Type switch
                                {
                                    ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "primary",
                                    ShopBoss.Web.Models.RackType.AdjustableShelves => "success",
                                    ShopBoss.Web.Models.RackType.Hardware => "warning",
                                    ShopBoss.Web.Models.RackType.Cart => "info",
                                    _ => "secondary"
                                };

                                <button class="nav-link @(isFirst ? "active" : "")" 
                                        id="rack-@rack.Id-tab" 
                                        data-bs-toggle="pill" 
                                        data-bs-target="#rack-@rack.Id" 
                                        type="button" 
                                        role="tab" 
                                        onclick="loadRackDetails('@rack.Id')">
                                    <i class="@rackTypeIcon me-2"></i>
                                    @rack.Name
                                    <span class="badge bg-@rackTypeColor ms-2" id="rack-@rack.Id-badge">@rack.OccupiedBins/@rack.TotalBins</span>
                                    @if (rack.IsPortable)
                                    {
                                        <i class="fas fa-dolly ms-1 text-muted" title="Portable"></i>
                                    }
                                </button>
                            }
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Rack Display Area -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0" id="current-rack-title">
                        <i class="fas fa-th me-2"></i>Select a rack to view
                    </h5>
                    <div id="rack-stats" class="text-muted small" style="display: none;">
                        <span id="rack-occupancy"></span>
                        <span class="mx-2">|</span>
                        <span id="rack-location"></span>
                    </div>
                </div>
                <div class="card-body">
                    <div id="rack-grid-container" class="text-center text-muted">
                        <i class="fas fa-warehouse fa-3x mb-3"></i>
                        <p>Select a storage rack to view its bin layout</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Old part scan modal removed - using Universal Scanner instead -->

<!-- Cut Parts List Modal -->
<div class="modal fade" id="cutPartsModal" tabindex="-1" aria-labelledby="cutPartsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cutPartsModalLabel">
                    <i class="fas fa-list me-2"></i>Parts Ready for Sorting
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cutPartsContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Assembly Readiness Modal -->

<!-- Bin Detail Modal -->
<div class="modal fade" id="binDetailModal" tabindex="-1" aria-labelledby="binDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="binDetailModalLabel">
                    <i class="fas fa-box me-2"></i>Bin Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="binDetailContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="clearBinBtn" onclick="clearEntireBin()" style="display: none;">
                    <i class="fas fa-trash me-2"></i>Clear Bin
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/universal-scanner.js"></script>
    <script>
        let currentRackId = null;
        let currentCutPartsCount = @ViewBag.CutPartsCount;

        // Global SignalR connection
        let signalRConnection = null;

        // Load rack details and display grid
        function loadRackDetails(rackId) {
            console.log('loadRackDetails called with rackId:', rackId);
            currentRackId = rackId;
            
            if (!rackId) {
                console.error('loadRackDetails: No rackId provided');
                showError('No rack ID provided for loading details');
                return;
            }
            
            fetch(`/Sorting/GetRackDetails/${encodeURIComponent(rackId)}`)
                .then(response => {
                    console.log('GetRackDetails response status:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('GetRackDetails response data:', data);
                    if (data.success) {
                        displayRackGrid(data.rack);
                    } else {
                        showError('Failed to load rack details: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error loading rack details:', error);
                    showError('An error occurred while loading rack details.');
                });
        }

        // Display rack grid visualization
        function displayRackGrid(rack) {
            document.getElementById('current-rack-title').innerHTML = 
                `<i class="fas fa-th me-2"></i>${rack.name} (${rack.type})`;
                
            document.getElementById('rack-occupancy').textContent = 
                `${rack.occupiedBins}/${rack.totalBins} bins occupied (${rack.occupancyPercentage}%)`;
                
            document.getElementById('rack-location').textContent = 
                rack.location || 'Location not specified';
                
            document.getElementById('rack-stats').style.display = 'block';

            const container = document.getElementById('rack-grid-container');
            let gridHtml = '<div class="rack-grid">';
            
            // Add rows with bins (no headers)
            for (let row = 0; row < rack.rows; row++) {
                gridHtml += '<div class="grid-row">';
                
                // Bins in this row
                for (let col = 0; col < rack.columns; col++) {
                    const bin = rack.bins[row][col];
                    const statusClass = getBinStatusClass(bin.status);
                    const title = getBinTooltip(bin);
                    
                    gridHtml += `
                        <div class="grid-bin ${statusClass}" 
                             title="${title}"
                             onclick="selectBin('${bin.label}', '${bin.row}', '${bin.column}')">
                            <div class="bin-label">${bin.label}</div>
                            <div class="bin-content">
                                ${bin.status === 'empty' ? '' : `<small>${bin.partsCount}</small>`}
                            </div>
                            ${bin.capacityPercentage > 80 ? '<div class="bin-warning"><i class="fas fa-exclamation-triangle"></i></div>' : ''}
                        </div>
                    `;
                }
                gridHtml += '</div>';
            }
            gridHtml += '</div>';

            // Add legend
            gridHtml += `
                <div class="rack-legend mt-3">
                    <div class="d-flex justify-content-center flex-wrap gap-3">
                        <div class="legend-item">
                            <div class="legend-color bin-empty"></div>
                            <span>Empty</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-partial"></div>
                            <span>Partial</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-full"></div>
                            <span>Full</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-blocked"></div>
                            <span>Blocked</span>
                        </div>
                    </div>
                </div>
            `;

            container.innerHTML = gridHtml;
        }

        function getBinStatusClass(status) {
            switch (status) {
                case 'empty': return 'bin-empty';
                case 'partial': return 'bin-partial';
                case 'full': return 'bin-full';
                case 'blocked': return 'bin-blocked';
                case 'reserved': return 'bin-reserved';
                default: return 'bin-empty';
            }
        }

        function getBinTooltip(bin) {
            if (bin.status === 'empty') {
                return `${bin.label}: Empty bin (Available)`;
            }
            
            let tooltip = `${bin.label}: ${bin.statusText}`;
            if (bin.contents) tooltip += `\nContents: ${bin.contents}`;
            if (bin.productName) tooltip += `\nProduct: ${bin.productName}`;
            
            // Show Work Order info for blocked bins from different work orders
            if (bin.status === 'blocked' && bin.statusText === 'Blocked - Different Work Order' && bin.workOrderId) {
                tooltip += `\nWork Order: ${bin.workOrderId}`;
            }
            
            if (bin.assignedDate) tooltip += `\nAssigned: ${bin.assignedDate}`;
            if (bin.notes) tooltip += `\nNotes: ${bin.notes}`;
            tooltip += `\nProgress: ${bin.partsCount}/${bin.maxCapacity} (${bin.capacityPercentage}%)`;
            
            return tooltip;
        }

        function selectBin(label, row, column) {
            if (currentRackId) {
                showBinDetailModal(currentRackId, row, column, label);
            }
        }

        // Old scanPart function removed - using Universal Scanner instead

        // Old scan status functions removed - using Universal Scanner instead

        // Old modal functions removed - using Universal Scanner instead

        // Load cut parts list
        function loadCutParts() {
            const modal = new bootstrap.Modal(document.getElementById('cutPartsModal'));
            const content = document.getElementById('cutPartsContent');
            
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status"></div>
                    <div class="mt-2">Loading cut parts...</div>
                </div>
            `;
            
            modal.show();
            
            // Refresh cut parts count when modal opens
            fetch('/Sorting/GetCurrentCutPartsCount')
                .then(response => response.json())
                .then(countData => {
                    if (countData.success) {
                        updateCutPartsCount(countData.count);
                    }
                });
            
            fetch('/Sorting/GetCutParts')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayCutParts(data.parts);
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load cut parts: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading cut parts:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading cut parts.
                        </div>
                    `;
                });
        }

        function displayCutParts(parts) {
            const content = document.getElementById('cutPartsContent');
            
            if (!parts || parts.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-check-circle fa-3x mb-3 text-success"></i>
                        <p>All parts have been sorted! No cut parts remaining.</p>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Part Name</th>
                                <th>Product</th>
                                <th>Qty</th>
                                <th>Material</th>
                                <th>Dimensions</th>
                                <th>Nest Sheet</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            parts.forEach(part => {
                const dimensions = [
                    part.length && `L:${part.length}`,
                    part.width && `W:${part.width}`,
                    part.thickness && `T:${part.thickness}`
                ].filter(Boolean).join('×') || 'N/A';

                html += `
                    <tr>
                        <td><strong>${part.name}</strong></td>
                        <td>${part.productName}</td>
                        <td>${part.qty}</td>
                        <td>${part.material || 'N/A'}</td>
                        <td class="small">${dimensions}</td>
                        <td class="small">${part.nestSheetName}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-primary" 
                                    onclick="handleSortingScan('${part.id}', Object.values(window.universalScanners)[0])">
                                <i class="fas fa-sort me-1"></i>Sort
                            </button>
                        </td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            content.innerHTML = html;
        }


        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'primary'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        function showError(message) {
            // showToast(message, 'error');
        }

        // Old modal event listeners removed - using Universal Scanner instead

        // Load first rack on page load and ensure tab is properly activated
        document.addEventListener('DOMContentLoaded', function() {
            const firstTab = document.querySelector('.nav-link');
            if (firstTab && firstTab.id) {
                const parts = firstTab.id.split('-');
                // Expected format: rack-{uuid}-tab, so extract the full UUID
                if (parts.length >= 3 && parts[0] === 'rack' && parts[parts.length - 1] === 'tab') {
                    // Join all middle parts to reconstruct the full UUID
                    const rackId = parts.slice(1, -1).join('-');
                    console.log('DOMContentLoaded: Loading rack', rackId, 'from tab', firstTab.id);
                    // Ensure the first tab is properly activated
                    if (!firstTab.classList.contains('active')) {
                        firstTab.classList.add('active');
                    }
                    loadRackDetails(rackId);
                } else {
                    console.error('DOMContentLoaded: Invalid tab ID format:', firstTab.id);
                }
            } else {
                // Fallback: Try to find any rack tab and activate it
                const anyTab = document.querySelector('[data-bs-toggle="pill"]');
                if (anyTab && anyTab.id) {
                    const parts = anyTab.id.split('-');
                    if (parts.length >= 3 && parts[0] === 'rack' && parts[parts.length - 1] === 'tab') {
                        const rackId = parts.slice(1, -1).join('-');
                        console.log('DOMContentLoaded: Fallback loading rack', rackId, 'from tab', anyTab.id);
                        anyTab.classList.add('active');
                        loadRackDetails(rackId);
                    } else {
                        console.error('DOMContentLoaded: No valid rack tabs found');
                    }
                }
            }
            
            // Setup SignalR connection for real-time updates
            signalRConnection = setupSignalRConnection();
            
            // Add modal cleanup event listeners
            const binModal = document.getElementById('binDetailModal');
            binModal.addEventListener('hidden.bs.modal', function() {
                currentBinDetails = null;
                cleanupModalState();
            });
            
        });
        
        // Listen for scan events from Universal Scanner (auto-initialized)
        // First, remove any existing listeners to prevent duplicates
        if (window.sortingScanHandler) {
            document.removeEventListener('scanReceived', window.sortingScanHandler);
            console.log('Removed existing Sorting scan handler');
        }
        
        window.sortingScanHandler = function(event) {
            const { barcode, containerId } = event.detail;
            console.log('Sorting Station: Received scan event', { barcode, containerId });
            
            // Get the scanner instance from global registry  
            const scanner = window.universalScanners[containerId];
            if (scanner) {
                handleSortingScan(barcode, scanner);
            }
        };
        
        document.addEventListener('scanReceived', window.sortingScanHandler);
        console.log('Added Sorting scan handler');
        
        // Clean up event listener when page unloads
        window.addEventListener('beforeunload', function() {
            if (window.sortingScanHandler) {
                document.removeEventListener('scanReceived', window.sortingScanHandler);
                window.sortingScanHandler = null;
            }
        });
        
        // Sorting scan handler that integrates Universal Scanner with existing logic
        async function handleSortingScan(barcode, scanner) {
            try {
                // Show processing status
                scanner.showScanResult(false, '🔄 Processing part for sorting...', false);
                
                // Get currently displayed rack ID
                const selectedRackId = getCurrentlySelectedRackId();
                console.log('DEBUG: Selected rack ID for scan:', selectedRackId);
                console.log('DEBUG: Current rack ID global:', currentRackId);
                
                // Build request body with selected rack context
                let requestBody = `barcode=${encodeURIComponent(barcode)}`;
                if (selectedRackId) {
                    requestBody += `&selectedRackId=${encodeURIComponent(selectedRackId)}`;
                    console.log('DEBUG: Including selectedRackId in request:', selectedRackId);
                } else {
                    console.log('DEBUG: No rack selected, using default sorting logic');
                }
                
                // Use existing sorting endpoint with correct Content-Type
                const response = await fetch('/Sorting/ScanPart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: requestBody
                });
                
                const data = await response.json();
                
                if (data.success) {
                    scanner.showScanResult(true, data.message);
                    
                    // Instead of reloading the page, refresh the current rack data
                    setTimeout(() => {
                        if (currentRackId) {
                            console.log('Refreshing rack after successful scan:', currentRackId);
                            loadRackDetails(currentRackId);
                        }
                        // Update cut parts count
                        if (data.remainingCutParts !== undefined) {
                            updateCutPartsCount(data.remainingCutParts);
                        }
                    }, 1000);
                } else {
                    scanner.showScanResult(false, data.message || 'Part sorting failed');
                }
            } catch (error) {
                console.error('Sorting scan error:', error);
                scanner.showScanResult(false, '❌ Network error. Please try again.');
            }
        }


        // SignalR real-time updates
        function setupSignalRConnection() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/status")
                .withAutomaticReconnect()
                .build();

            connection.start().then(function () {
                console.log("SignalR Connected - Sorting Station");
                
                // Join sorting station group
                connection.invoke("JoinGroup", "sorting-station").catch(err => console.error(err));
                
                // Join work order group if active work order exists
                const activeWorkOrderId = '@ViewBag.ActiveWorkOrderId';
                if (activeWorkOrderId) {
                    connection.invoke("JoinGroup", `workorder-${activeWorkOrderId}`).catch(err => console.error(err));
                }
                
            }).catch(function (err) {
                console.error("SignalR Connection Error: " + err.toString());
                // Retry connection in 5 seconds
                setTimeout(() => setupSignalRConnection(), 5000);
            });

            // Handle part sorted updates
            connection.on("PartSorted", function (data) {
                console.log("PartSorted event received:", data);
                // showToast(`Part '${data.partName}' sorted to ${data.binLabel}`, 'success');
                showBillboard('sorting-billboard', `Part '${data.partName}' sorted to ${data.binLabel}`, 'success', 'Part Sorted');
                
                // Always refresh current rack to ensure consistency
                if (currentRackId) {
                    console.log(`Refreshing rack ${currentRackId} due to PartSorted event`);
                    loadRackDetails(currentRackId);
                }
            });

            // Handle rack occupancy updates (real-time badge updates)
            connection.on("RackOccupancyUpdate", function (data) {
                console.log("RackOccupancyUpdate event received:", data);
                updateRackBadge(data.rackId, data.occupiedBins, data.totalBins);
            });

            // Handle cut parts count updates (real-time count updates)
            connection.on("CutPartsCountUpdate", function (data) {
                console.log("CutPartsCountUpdate event received:", data);
                updateCutPartsCount(data.count);
            });

            // Handle product ready for assembly notifications
            connection.on("ProductReadyForAssembly", function (data) {
                showAssemblyReadyNotification(data);
                
                // Update assembly readiness button
            });

            // Handle status updates with enhanced logging
            connection.on("StatusUpdate", function (data) {
                console.log("StatusUpdate event received:", data);
                if (data.type === "part-sorted") {
                    // Force refresh current rack for any part-sorted update
                    if (currentRackId) {
                        console.log(`Refreshing rack ${currentRackId} due to StatusUpdate`);
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update rack badge if rack info is available
                    if (data.rackId) {
                        refreshRackBadge(data.rackId);
                    }
                }
            });

            // Connection closed handler
            connection.onclose(function () {
                console.log("SignalR Connection Closed");
                // showToast("Connection lost - attempting to reconnect...", 'warning');
                showBillboard('sorting-billboard', "Connection lost - attempting to reconnect...", 'warning', 'Connection Status');
            });

            // Reconnection handlers
            connection.onreconnecting(function () {
                console.log("SignalR Reconnecting...");
                // showToast("Reconnecting to server...", 'info');
                showBillboard('sorting-billboard', "Reconnecting to server...", 'info', 'Connection Status');
            });

            connection.onreconnected(function () {
                console.log("SignalR Reconnected");
                // showToast("Reconnected to server", 'success');
                showBillboard('sorting-billboard', "Reconnected to server", 'success', 'Connection Status');
                
                // Rejoin groups after reconnection
                connection.invoke("JoinGroup", "sorting-station").catch(err => console.error(err));
                const activeWorkOrderId = '@ViewBag.ActiveWorkOrderId';
                if (activeWorkOrderId) {
                    connection.invoke("JoinGroup", `workorder-${activeWorkOrderId}`).catch(err => console.error(err));
                }
            });

            return connection;
        }

        function getCurrentlySelectedRackId() {
            const activeTab = document.querySelector('.nav-link.active');
            if (activeTab && activeTab.id) {
                const parts = activeTab.id.split('-');
                // Expected format: rack-{uuid}-tab, so extract the full UUID
                if (parts.length >= 3 && parts[0] === 'rack' && parts[parts.length - 1] === 'tab') {
                    // Join all middle parts to reconstruct the full UUID
                    const rackId = parts.slice(1, -1).join('-');
                    console.log('getCurrentlySelectedRackId: Found rack', rackId, 'from tab', activeTab.id);
                    return rackId;
                }
            }
            // Fallback: try to get from currentRackId global variable
            console.log('getCurrentlySelectedRackId: Using fallback currentRackId', currentRackId);
            return currentRackId;
        }

        function updateRackBadge(rackId, occupiedBins, totalBins) {
            const badge = document.querySelector(`#rack-${rackId}-badge`);
            if (badge) {
                badge.textContent = `${occupiedBins}/${totalBins}`;
                console.log(`Updated rack ${rackId} badge to ${occupiedBins}/${totalBins}`);
            } else {
                console.warn(`Badge not found for rack ${rackId}`);
            }
        }

        function refreshRackBadge(rackId) {
            fetch(`/Sorting/GetRackOccupancy/${rackId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateRackBadge(rackId, data.occupiedBins, data.totalBins);
                    }
                })
                .catch(error => {
                    console.error('Error fetching rack occupancy:', error);
                });
        }

        function updateCutPartsCount(count) {
            currentCutPartsCount = count;
            const countElement = document.getElementById('cutPartsCount');
            if (countElement) {
                countElement.textContent = count;
            }
        }

        function showScanSuccessAnimation(data) {
            // Visual confirmation of successful scan
            const statusIcon = document.getElementById('scanStatusIcon');
            if (statusIcon) {
                statusIcon.innerHTML = '<i class="fas fa-check-circle text-success fa-2x"></i>';
                statusIcon.style.animation = 'pulse 0.5s ease-in-out';
            }
        }


        function showErrorSuggestions(suggestions) {
            // Show helpful suggestions for scan errors
            const guidance = document.getElementById('placementGuidance');
            const messageDiv = document.getElementById('placementMessage');
            
            let suggestionHtml = '<div><strong>Suggested actions:</strong><ul class="mt-2">';
            suggestions.forEach(suggestion => {
                suggestionHtml += `<li>${suggestion}</li>`;
            });
            suggestionHtml += '</ul></div>';
            
            messageDiv.innerHTML = suggestionHtml;
            guidance.className = 'alert alert-warning';
            guidance.style.display = 'block';
        }

        function playSuccessSound() {
            // Play a subtle success sound (browser permitting)
            try {
                const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYgCT2X2O/AciMFl');
                audio.volume = 0.1;
                audio.play().catch(() => {}); // Ignore errors if audio can't play
            } catch (e) {
                // Ignore audio errors
            }
        }

        function showAssemblyReadyNotification(data) {
            // Show billboard message for assembly readiness
            showBillboard('sorting-billboard', `Product ${data.productName} (${data.itemNumber || data.productId}) is ready for assembly!`, 'success', 'Ready for Assembly');
            
            // Create special assembly ready notification with enhanced content
            // const toastContainer = document.getElementById('toast-container') || createToastContainer();
            // const toast = document.createElement('div');
            // toast.className = 'toast align-items-center text-white bg-success border-0';
            // toast.setAttribute('role', 'alert');
            // toast.setAttribute('data-bs-autohide', 'false'); // Keep error toasts visible until manually dismissed
            // toast.innerHTML = `
            //     <div class="d-flex">
            //         <div class="toast-body">
            //             <div class="d-flex align-items-center">
            //                 <i class="fas fa-tools fa-2x me-3"></i>
            //                 <div>
            //                     <div class="fw-bold">🎉 Product Ready for Assembly!</div>
            //                     <div class="small">
            //                         ${data.productName} (${data.itemNumber || data.productId})
            //                     </div>
            //                     <div class="small text-light">All parts sorted - ready for assembly station</div>
            //                     <div class="small mt-1">
            //                         <i class="fas fa-arrow-right me-1"></i>
            //                         Next: Move to Assembly Station
            //                     </div>
            //                 </div>
            //             </div>
            //         </div>
            //         <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            //     </div>
            // `;
            // toastContainer.appendChild(toast);
            // const bsToast = new bootstrap.Toast(toast, { delay: 10000 }); // Show longer for assembly notifications
            // bsToast.show();
            // 
            // toast.addEventListener('hidden.bs.toast', () => toast.remove());
            
            // Play success sound for assembly readiness
            playSuccessSound();
        }

        // Bin detail modal functions
        let currentBinDetails = null;

        function showBinDetailModal(rackId, row, column, label) {
            const modal = new bootstrap.Modal(document.getElementById('binDetailModal'));
            const content = document.getElementById('binDetailContent');
            const clearBtn = document.getElementById('clearBinBtn');
            
            // Update modal title
            document.getElementById('binDetailModalLabel').innerHTML = 
                `<i class="fas fa-box me-2"></i>Bin ${label} Details`;
            
            // Show loading state
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading bin details...</div>
                </div>
            `;
            
            clearBtn.style.display = 'none';
            modal.show();
            
            // Fetch bin details
            fetch(`/Sorting/GetBinDetails?rackId=${encodeURIComponent(rackId)}&row=${row}&column=${column}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        currentBinDetails = data.bin;
                        displayBinDetails(data.bin);
                        
                        // Always show clear button to handle orphaned items
                        clearBtn.style.display = 'block';
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load bin details: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading bin details:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading bin details.
                        </div>
                    `;
                });
        }

        function displayBinDetails(bin) {
            const content = document.getElementById('binDetailContent');
            
            let html = `
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6>Bin Information</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Label:</strong></td><td>${bin.label}</td></tr>
                            <tr><td><strong>Position:</strong></td><td>Row ${bin.row}, Column ${bin.column}</td></tr>
                            <tr><td><strong>Status:</strong></td><td><span class="badge bg-${getBinStatusBadgeClass(bin.status)}">${bin.statusText}</span></td></tr>
                            <tr><td><strong>Progress:</strong></td><td>${bin.partsCount}/${bin.maxCapacity} parts (${bin.capacityPercentage}%)</td></tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6>Assignment Details</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Product:</strong></td><td>${bin.productName || 'Not assigned'}</td></tr>
                            <tr><td><strong>Work Order:</strong></td><td>${bin.workOrderId || 'Not assigned'}</td></tr>
                            <tr><td><strong>Assigned:</strong></td><td>${bin.assignedDate || 'N/A'}</td></tr>
                            <tr><td><strong>Last Updated:</strong></td><td>${bin.lastUpdatedDate || 'N/A'}</td></tr>
                        </table>
                    </div>
                </div>
            `;
            
            if (bin.parts && bin.parts.length > 0) {
                html += `
                    <h6>Parts in Bin (${bin.parts.length})</h6>
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>Part Name</th>
                                    <th>Product</th>
                                    <th>Qty</th>
                                    <th>Material</th>
                                    <th>Dimensions</th>
                                    <th>Sorted Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                `;
                
                bin.parts.forEach(part => {
                    const dimensions = [
                        part.length && `L:${part.length}`,
                        part.width && `W:${part.width}`,
                        part.thickness && `T:${part.thickness}`
                    ].filter(Boolean).join('×') || 'N/A';
                    
                    html += `
                        <tr>
                            <td><strong>${part.name}</strong></td>
                            <td>${part.productName}</td>
                            <td>${part.qty}</td>
                            <td>${part.material || 'N/A'}</td>
                            <td class="small">${dimensions}</td>
                            <td class="small">${part.sortedDate}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="removePartFromBin('${part.id}', '${part.name}')"
                                        title="Remove this part from bin">
                                    <i class="fas fa-times"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            } else {
                html += `
                    <div class="text-center text-muted mt-4">
                        <i class="fas fa-inbox fa-3x mb-3"></i>
                        <p>This bin is empty</p>
                    </div>
                `;
            }
            
            if (bin.notes) {
                html += `
                    <div class="mt-3">
                        <h6>Notes</h6>
                        <div class="alert alert-info">${bin.notes}</div>
                    </div>
                `;
            }
            
            content.innerHTML = html;
        }

        function getBinStatusBadgeClass(status) {
            switch (status) {
                case 'empty': return 'secondary';
                case 'partial': return 'info';
                case 'full': return 'success';
                case 'blocked': return 'danger';
                case 'reserved': return 'warning';
                default: return 'secondary';
            }
        }

        function removePartFromBin(partId, partName) {
            
            fetch('/Sorting/RemovePartFromBin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `partId=${encodeURIComponent(partId)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // showToast(`Part "${partName}" removed from bin successfully`, 'success');
                    showBillboard('sorting-billboard', `Part "${partName}" removed from bin successfully`, 'success', 'Part Removed');
                    
                    // Check if bin is now empty and close modal, otherwise refresh
                    if (data.updatedCutPartsCount !== undefined) {
                        // If the operation succeeded, check if we should close or refresh the modal
                        const binModal = bootstrap.Modal.getInstance(document.getElementById('binDetailModal'));
                        if (binModal) {
                            binModal.hide();
                        }
                        // Clean up any stuck modal state
                        cleanupModalState();
                    }
                    
                    // Refresh the rack display
                    if (currentRackId) {
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update cut parts count
                    if (data.updatedCutPartsCount !== undefined) {
                        updateCutPartsCount(data.updatedCutPartsCount);
                    }
                } else {
                    // showToast(`Failed to remove part: ${data.message}`, 'error');
                    showBillboard('sorting-billboard', `Failed to remove part: ${data.message}`, 'danger', 'Remove Error');
                }
            })
            .catch(error => {
                console.error('Error removing part from bin:', error);
                // showToast('An error occurred while removing the part', 'error');
                showBillboard('sorting-billboard', 'An error occurred while removing the part', 'danger', 'Network Error');
            });
        }

        function cleanupModalState() {
            // Force cleanup of any stuck modal state
            setTimeout(() => {
                // Remove any modal backdrops
                const backdrops = document.querySelectorAll('.modal-backdrop');
                backdrops.forEach(backdrop => backdrop.remove());
                
                // Reset body classes and styles
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
                
                // Reset any modal instances
                const modalElement = document.getElementById('binDetailModal');
                if (modalElement) {
                    modalElement.style.display = '';
                    modalElement.classList.remove('show');
                    modalElement.setAttribute('aria-hidden', 'true');
                    modalElement.removeAttribute('aria-modal');
                    modalElement.removeAttribute('role');
                }
            }, 250);
        }





        function clearEntireBin() {
            if (!currentBinDetails) return;
            
            // Nuclear bin clearing - always allow the clear operation to proceed to server
            
            fetch('/Sorting/ClearBin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `rackId=${encodeURIComponent(currentBinDetails.rackId)}&row=${currentBinDetails.row}&column=${currentBinDetails.column}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // showToast(`Bin "${currentBinDetails.label}" cleared successfully. ${data.partsRemoved} parts removed.`, 'success');
                    showBillboard('sorting-billboard', `Bin "${currentBinDetails.label}" cleared successfully. ${data.partsRemoved} parts removed.`, 'success', 'Bin Cleared');
                    
                    // Close the modal and ensure backdrop is removed
                    const modal = bootstrap.Modal.getInstance(document.getElementById('binDetailModal'));
                    modal.hide();
                    
                    // Clean up modal state
                    cleanupModalState();
                    
                    // Refresh the rack display
                    if (currentRackId) {
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update cut parts count
                    if (data.updatedCutPartsCount !== undefined) {
                        updateCutPartsCount(data.updatedCutPartsCount);
                    }
                    
                } else {
                    // showToast(`Failed to clear bin: ${data.message}`, 'error');
                    showBillboard('sorting-billboard', `Failed to clear bin: ${data.message}`, 'danger', 'Clear Error');
                }
            })
            .catch(error => {
                console.error('Error clearing bin:', error);
                // showToast('An error occurred while clearing the bin', 'error');
                showBillboard('sorting-billboard', 'An error occurred while clearing the bin', 'danger', 'Network Error');
            });
        }
    </script>

    <style>
        .rack-grid {
            display: table;
            margin: 0 auto;
            border-collapse: separate;
            border-spacing: 3px;
            width: 75vw;
            max-width: 1200px;
        }

        .grid-row {
            display: table-row;
        }

        .grid-bin {
            display: table-cell;
            width: 75px;
            height: 75px;
            text-align: center;
            vertical-align: middle;
            border: 2px solid #dee2e6;
            position: relative;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.85rem;
        }

        .grid-bin:hover {
            transform: scale(1.05);
            z-index: 10;
            border-color: #004F00;
        }

        .bin-label {
            font-weight: bold;
            line-height: 1;
            font-size: 0.8rem;
        }

        .bin-content {
            font-size: 0.7rem;
            opacity: 0.8;
        }

        .bin-warning {
            position: absolute;
            top: 3px;
            right: 3px;
            color: #dc3545;
            font-size: 0.7rem;
        }

        .bin-empty {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .bin-partial {
            background-color: #cff4fc;
            border-color: #0dcaf0;
            color: #055160;
        }

        .bin-full {
            background-color: #d1e7dd;
            border-color: #198754;
            color: #0f5132;
        }

        .bin-blocked {
            background-color: #f8d7da;
            border-color: #dc3545;
            color: #721c24;
        }

        .bin-reserved {
            background-color: #fff3cd;
            border-color: #ffc107;
            color: #664d03;
        }

        .rack-legend {
            text-align: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border: 1px solid #dee2e6;
            border-radius: 3px;
        }

        @@media (max-width: 768px) {
            .rack-grid {
                width: 95vw;
                border-spacing: 2px;
            }
            
            .grid-bin {
                width: 55px;
                height: 55px;
                font-size: 0.7rem;
                border-width: 1px;
            }
        }
        
        @@media (max-width: 480px) {
            .grid-bin {
                width: 45px;
                height: 45px;
                font-size: 0.6rem;
            }
        }

        /* Enhanced animations for better UX */

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Success feedback animations */
        .scan-success {
            animation: scan-success 0.6s ease-out;
        }

        @@keyframes scan-success {
            0% { 
                opacity: 0; 
                transform: translateY(-10px) scale(0.8); 
            }
            50% { 
                opacity: 1; 
                transform: translateY(0) scale(1.1); 
            }
            100% { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }
    </style>
}

<!-- Billboard Message at Bottom -->
@{
    ViewData["ContainerId"] = "sorting-billboard";
}

<partial name="_BillboardMessage" />

