@model IEnumerable<ShopBoss.Web.Models.StorageRack>

@{
    ViewData["Title"] = "Sorting Station";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div class="d-flex align-items-center gap-3">
        <div>
            <h2><i class="fas fa-sort me-2"></i>Sorting Station</h2>
            @if (!string.IsNullOrEmpty(ViewBag.ActiveWorkOrderName))
            {
                <small class="text-muted">
                    <i class="fas fa-star text-warning me-1"></i>
                    Active Work Order: <strong class="text-warning">@ViewBag.ActiveWorkOrderName</strong>
                </small>
            }
            else
            {
                <small class="text-danger">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    No active work order selected
                </small>
            }
        </div>
        
        <!-- Header Scanner Button -->
        <partial name="_CompactScanner" />
    </div>
    
    <!-- Station Action Buttons -->
    <div class="d-flex gap-2">
        <!-- Move Bin Button -->
        <button type="button" class="btn btn-outline-warning" onclick="toggleMoveMode()" id="moveBinButton">
            <i class="fas fa-arrows-alt me-2"></i>Move Bin
        </button>
        
        <!-- Rack Selection Dropdown -->
        @if (Model.Any())
        {
            var selectedRack = Model.FirstOrDefault(r => r.Id == ViewBag.SelectedRackId);
            var buttonText = selectedRack?.Name ?? "Select Rack";
            var buttonIcon = selectedRack?.Type switch
            {
                ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "fas fa-door-open",
                ShopBoss.Web.Models.RackType.AdjustableShelves => "fas fa-layer-group", 
                ShopBoss.Web.Models.RackType.Hardware => "fas fa-tools",
                ShopBoss.Web.Models.RackType.Cart => "fas fa-dolly",
                _ => "fas fa-warehouse"
            };
            var buttonColor = selectedRack?.Type switch
            {
                ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "primary",
                ShopBoss.Web.Models.RackType.AdjustableShelves => "success",
                ShopBoss.Web.Models.RackType.Hardware => "warning", 
                ShopBoss.Web.Models.RackType.Cart => "info",
                _ => "secondary"
            };
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="rackDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="@buttonIcon me-2"></i>
                    <span id="selectedRackName">@buttonText</span>
                    @if (selectedRack != null)
                    {
                        <span id="selectedRackBadge" class="badge bg-@buttonColor ms-2">@selectedRack.OccupiedBins/@selectedRack.TotalBins</span>
                    }
                    else
                    {
                        <span id="selectedRackBadge" class="badge ms-2" style="display: none;"></span>
                    }
                </button>
                <ul class="dropdown-menu" aria-labelledby="rackDropdown">
                    @foreach (var rack in Model)
                    {
                        var rackTypeIcon = rack.Type switch
                        {
                            ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "fas fa-door-open",
                            ShopBoss.Web.Models.RackType.AdjustableShelves => "fas fa-layer-group",
                            ShopBoss.Web.Models.RackType.Hardware => "fas fa-tools",
                            ShopBoss.Web.Models.RackType.Cart => "fas fa-dolly",
                            _ => "fas fa-th"
                        };
                        var rackTypeColor = rack.Type switch
                        {
                            ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "primary",
                            ShopBoss.Web.Models.RackType.AdjustableShelves => "success",
                            ShopBoss.Web.Models.RackType.Hardware => "warning",
                            ShopBoss.Web.Models.RackType.Cart => "info",
                            _ => "secondary"
                        };

                        <li>
                            <a class="dropdown-item rack-dropdown-item" href="#" 
                               data-rack-id="@rack.Id" 
                               data-rack-name="@rack.Name"
                               data-rack-icon="@rackTypeIcon"
                               data-rack-color="@rackTypeColor"
                               data-rack-occupied="@rack.OccupiedBins"
                               data-rack-total="@rack.TotalBins"
                               onclick="selectRackFromDropdown('@rack.Id', '@rack.Name', '@rackTypeIcon', '@rackTypeColor', @rack.OccupiedBins, @rack.TotalBins); return false;">
                                <i class="@rackTypeIcon me-2"></i>
                                @rack.Name
                                <span class="badge bg-@rackTypeColor ms-2">@rack.OccupiedBins/@rack.TotalBins</span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        
        <button type="button" class="btn btn-outline-info" onclick="loadCutParts()" id="cutPartsButton">
            <i class="fas fa-list me-2"></i>Cut Parts (<span id="cutPartsCount">@ViewBag.CutPartsCount</span>)
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @ViewBag.ErrorMessage
    </div>
}



@if (!Model.Any())
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>No storage racks configured.</strong> Please configure storage racks in the Admin Station → Configuration → Storage Racks before using the sorting station.
    </div>
}
else
{
    <!-- Rack Display Area -->
    <div class="rack-display-wrapper">
        <div class="row">
            <div class="col-12">
                <div class="card">
                <div class="card-body">
                    <div id="rack-grid-container" class="text-center text-muted">
                        <i class="fas fa-warehouse fa-3x mb-3"></i>
                        <p>Select a storage rack to view its bin layout</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
}

<!-- Old part scan modal removed - using Universal Scanner instead -->

<!-- Cut Parts List Modal -->
<div class="modal fade" id="cutPartsModal" tabindex="-1" aria-labelledby="cutPartsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cutPartsModalLabel">
                    <i class="fas fa-list me-2"></i>Parts Ready for Sorting
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cutPartsContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Assembly Readiness Modal -->

<!-- Bin Detail Modal -->
<div class="modal fade" id="binDetailModal" tabindex="-1" aria-labelledby="binDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="binDetailModalLabel">
                    <i class="fas fa-box me-2"></i>Bin Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="binDetailContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="clearBinBtn" onclick="clearEntireBin()" style="display: none;">
                    <i class="fas fa-trash me-2"></i>Clear Bin
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/sorting-station.js"></script>
    
    <!-- Pass ViewBag values to JavaScript -->
    <input type="hidden" id="selectedRackId" value="@ViewBag.SelectedRackId" />
    <input type="hidden" id="activeWorkOrderId" value="@ViewBag.ActiveWorkOrderId" />
    <input type="hidden" id="initialCutPartsCount" value="@ViewBag.CutPartsCount" />
    
    <script>
        window.rackIds = @Html.Raw(Json.Serialize(ViewBag.RackIds));
    </script>

}

@section Styles {
    <link rel="stylesheet" href="~/css/sorting-station.css" />
}

<!-- Billboard Message at Bottom -->
@{
    ViewData["ContainerId"] = "sorting-billboard";
}

<partial name="_BillboardMessage" />

