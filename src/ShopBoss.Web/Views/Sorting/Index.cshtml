@model IEnumerable<ShopBoss.Web.Models.StorageRack>

@{
    ViewData["Title"] = "Sorting Station";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-sort me-2"></i>Sorting Station</h2>
        @if (!string.IsNullOrEmpty(ViewBag.ActiveWorkOrderName))
        {
            <small class="text-muted">
                <i class="fas fa-star text-warning me-1"></i>
                Active Work Order: <strong class="text-warning">@ViewBag.ActiveWorkOrderName</strong>
            </small>
        }
        else
        {
            <small class="text-danger">
                <i class="fas fa-exclamation-triangle me-1"></i>
                No active work order selected
            </small>
        }
    </div>
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#scanModal">
            <i class="fas fa-barcode me-2"></i>Scan Part
        </button>
        <button type="button" class="btn btn-outline-info" onclick="loadCutParts()" id="cutPartsButton">
            <i class="fas fa-list me-2"></i>Cut Parts (<span id="cutPartsCount">@ViewBag.CutPartsCount</span>)
        </button>
        <button type="button" class="btn btn-outline-success" onclick="showAssemblyReadiness()" id="assemblyReadyButton" style="display: none;">
            <i class="fas fa-tools me-2"></i>Ready for Assembly (<span id="readyProductsCount">0</span>)
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @ViewBag.ErrorMessage
    </div>
}

@if (!Model.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle me-2"></i>
        No storage racks configured. Please configure storage racks in the Configuration tab.
    </div>
}
else
{
    <!-- Rack Selection Tabs -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-warehouse me-2"></i>Storage Racks
                    </h5>
                </div>
                <div class="card-body">
                    <nav>
                        <div class="nav nav-pills" id="rack-tabs" role="tablist">
                            @foreach (var rack in Model.OrderBy(r => r.Type).ThenBy(r => r.Name))
                            {
                                var isFirst = rack == Model.First();
                                var rackTypeIcon = rack.Type switch
                                {
                                    ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "fas fa-door-open",
                                    ShopBoss.Web.Models.RackType.AdjustableShelves => "fas fa-layer-group",
                                    ShopBoss.Web.Models.RackType.Hardware => "fas fa-tools",
                                    ShopBoss.Web.Models.RackType.Cart => "fas fa-dolly",
                                    _ => "fas fa-th"
                                };
                                var rackTypeColor = rack.Type switch
                                {
                                    ShopBoss.Web.Models.RackType.DoorsAndDrawerFronts => "primary",
                                    ShopBoss.Web.Models.RackType.AdjustableShelves => "success",
                                    ShopBoss.Web.Models.RackType.Hardware => "warning",
                                    ShopBoss.Web.Models.RackType.Cart => "info",
                                    _ => "secondary"
                                };

                                <button class="nav-link @(isFirst ? "active" : "")" 
                                        id="rack-@rack.Id-tab" 
                                        data-bs-toggle="pill" 
                                        data-bs-target="#rack-@rack.Id" 
                                        type="button" 
                                        role="tab" 
                                        onclick="loadRackDetails('@rack.Id')">
                                    <i class="@rackTypeIcon me-2"></i>
                                    @rack.Name
                                    <span class="badge bg-@rackTypeColor ms-2" id="rack-@rack.Id-badge">@rack.OccupiedBins/@rack.TotalBins</span>
                                    @if (rack.IsPortable)
                                    {
                                        <i class="fas fa-dolly ms-1 text-muted" title="Portable"></i>
                                    }
                                </button>
                            }
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Rack Display Area -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0" id="current-rack-title">
                        <i class="fas fa-th me-2"></i>Select a rack to view
                    </h5>
                    <div id="rack-stats" class="text-muted small" style="display: none;">
                        <span id="rack-occupancy"></span>
                        <span class="mx-2">|</span>
                        <span id="rack-location"></span>
                    </div>
                </div>
                <div class="card-body">
                    <div id="rack-grid-container" class="text-center text-muted">
                        <i class="fas fa-warehouse fa-3x mb-3"></i>
                        <p>Select a storage rack to view its bin layout</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Part Scan Modal -->
<div class="modal fade" id="scanModal" tabindex="-1" aria-labelledby="scanModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <h5 class="modal-title" id="scanModalLabel">
                        <i class="fas fa-barcode me-2"></i>Scan Part for Sorting
                    </h5>
                    <div id="selectedRackInfo" class="small text-muted" style="display: none;">
                        Sorting to: <span id="selectedRackName" class="fw-bold"></span>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="scanForm">
                    <div class="mb-3">
                        <label for="partBarcodeInput" class="form-label">Part Barcode</label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="partBarcodeInput" placeholder="Scan or enter part barcode" required>
                            <button type="button" class="btn btn-outline-secondary" onclick="scanPart()">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        <div id="scanFeedback" class="form-text"></div>
                    </div>
                    
                    <!-- Scan status indicator -->
                    <div id="scanStatus" class="mb-3" style="display: none;">
                        <div class="d-flex align-items-center">
                            <div id="scanSpinner" class="spinner-border spinner-border-sm me-2" role="status" style="display: none;"></div>
                            <div id="scanStatusText" class="flex-grow-1"></div>
                            <div id="scanStatusIcon"></div>
                        </div>
                    </div>

                    <!-- Placement guidance -->
                    <div id="placementGuidance" class="alert alert-info" style="display: none;">
                        <h6><i class="fas fa-map-marker-alt me-2"></i>Placement Guidance</h6>
                        <div id="placementMessage"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="scanPart()">
                    <i class="fas fa-sort me-2"></i>Sort Part
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Cut Parts List Modal -->
<div class="modal fade" id="cutPartsModal" tabindex="-1" aria-labelledby="cutPartsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cutPartsModalLabel">
                    <i class="fas fa-list me-2"></i>Parts Ready for Sorting
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="cutPartsContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Assembly Readiness Modal -->
<div class="modal fade" id="assemblyReadinessModal" tabindex="-1" aria-labelledby="assemblyReadinessModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assemblyReadinessModalLabel">
                    <i class="fas fa-tools me-2"></i>Products Ready for Assembly
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="assemblyReadinessContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" onclick="navigateToAssemblyStation()">
                    <i class="fas fa-arrow-right me-2"></i>Go to Assembly Station
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bin Detail Modal -->
<div class="modal fade" id="binDetailModal" tabindex="-1" aria-labelledby="binDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="binDetailModalLabel">
                    <i class="fas fa-box me-2"></i>Bin Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="binDetailContent">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" id="clearBinBtn" onclick="clearEntireBin()" style="display: none;">
                    <i class="fas fa-trash me-2"></i>Clear Bin
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script>
        let currentRackId = null;
        let currentCutPartsCount = @ViewBag.CutPartsCount;

        // Global SignalR connection
        let signalRConnection = null;

        // Load rack details and display grid
        function loadRackDetails(rackId) {
            currentRackId = rackId;
            
            fetch(`/Sorting/GetRackDetails/${rackId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayRackGrid(data.rack);
                        updateSelectedRackInfo(data.rack.name);
                    } else {
                        showError('Failed to load rack details: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error loading rack details:', error);
                    showError('An error occurred while loading rack details.');
                });
        }

        // Display rack grid visualization
        function displayRackGrid(rack) {
            document.getElementById('current-rack-title').innerHTML = 
                `<i class="fas fa-th me-2"></i>${rack.name} (${rack.type})`;
                
            document.getElementById('rack-occupancy').textContent = 
                `${rack.occupiedBins}/${rack.totalBins} bins occupied (${rack.occupancyPercentage}%)`;
                
            document.getElementById('rack-location').textContent = 
                rack.location || 'Location not specified';
                
            document.getElementById('rack-stats').style.display = 'block';

            const container = document.getElementById('rack-grid-container');
            let gridHtml = '<div class="rack-grid">';
            
            // Add column headers
            gridHtml += '<div class="grid-header-row">';
            gridHtml += '<div class="grid-header-corner"></div>';
            for (let col = 1; col <= rack.columns; col++) {
                gridHtml += `<div class="grid-header-col">${col.toString().padStart(2, '0')}</div>`;
            }
            gridHtml += '</div>';

            // Add rows with bins
            for (let row = 0; row < rack.rows; row++) {
                gridHtml += '<div class="grid-row">';
                
                // Row header
                const rowLabel = String.fromCharCode(65 + row); // A, B, C, etc.
                gridHtml += `<div class="grid-header-row-label">${rowLabel}</div>`;
                
                // Bins in this row
                for (let col = 0; col < rack.columns; col++) {
                    const bin = rack.bins[row][col];
                    const statusClass = getBinStatusClass(bin.status);
                    const title = getBinTooltip(bin);
                    
                    gridHtml += `
                        <div class="grid-bin ${statusClass}" 
                             title="${title}"
                             onclick="selectBin('${bin.label}', '${bin.row}', '${bin.column}')">
                            <div class="bin-label">${bin.label}</div>
                            <div class="bin-content">
                                ${bin.status === 'empty' ? '' : `<small>${bin.partsCount}</small>`}
                            </div>
                            ${bin.capacityPercentage > 80 ? '<div class="bin-warning"><i class="fas fa-exclamation-triangle"></i></div>' : ''}
                        </div>
                    `;
                }
                gridHtml += '</div>';
            }
            gridHtml += '</div>';

            // Add legend
            gridHtml += `
                <div class="rack-legend mt-3">
                    <div class="d-flex justify-content-center flex-wrap gap-3">
                        <div class="legend-item">
                            <div class="legend-color bin-empty"></div>
                            <span>Empty</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-partial"></div>
                            <span>Partial</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-full"></div>
                            <span>Full</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-blocked"></div>
                            <span>Blocked</span>
                        </div>
                    </div>
                </div>
            `;

            container.innerHTML = gridHtml;
        }

        function getBinStatusClass(status) {
            switch (status) {
                case 'empty': return 'bin-empty';
                case 'partial': return 'bin-partial';
                case 'full': return 'bin-full';
                case 'blocked': return 'bin-blocked';
                case 'reserved': return 'bin-reserved';
                default: return 'bin-empty';
            }
        }

        function getBinTooltip(bin) {
            if (bin.status === 'empty') {
                return `${bin.label}: Empty bin (Available)`;
            }
            
            let tooltip = `${bin.label}: ${bin.statusText}`;
            if (bin.contents) tooltip += `\nContents: ${bin.contents}`;
            if (bin.productName) tooltip += `\nProduct: ${bin.productName}`;
            if (bin.assignedDate) tooltip += `\nAssigned: ${bin.assignedDate}`;
            if (bin.notes) tooltip += `\nNotes: ${bin.notes}`;
            tooltip += `\nProgress: ${bin.partsCount}/${bin.maxCapacity} (${bin.capacityPercentage}%)`;
            
            return tooltip;
        }

        function selectBin(label, row, column) {
            if (currentRackId) {
                showBinDetailModal(currentRackId, row, column, label);
            }
        }

        // Scan part for sorting
        function scanPart() {
            const barcode = document.getElementById('partBarcodeInput').value.trim();
            if (!barcode) {
                updateScanFeedback('Please enter a part barcode.', 'text-danger');
                return;
            }
            
            // Check if a rack is selected
            if (!currentRackId) {
                updateScanFeedback('Please select a storage rack first by clicking on one of the rack tabs above.', 'text-warning');
                return;
            }
            
            // Enhanced scan feedback - show detailed progress
            showScanStatus('🔍 Validating part barcode...', true);
            
            // Include current rack ID if one is selected
            let requestBody = `barcode=${encodeURIComponent(barcode)}`;
            if (currentRackId) {
                requestBody += `&selectedRackId=${encodeURIComponent(currentRackId)}`;
            }
            
            fetch('/Sorting/ScanPart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: requestBody
            })
            .then(response => response.json())
            .then(data => {
                hideScanStatus();
                
                if (data.success) {
                    // Enhanced success feedback with visual confirmation
                    updateScanFeedback(`✅ ${data.message}`, 'text-success');
                    showPlacementGuidance(data.placementMessage);
                    
                    // Show scan success animation
                    showScanSuccessAnimation(data);
                    
                    // Update rack badge and cut parts count immediately
                    if (data.updatedRackOccupancy) {
                        updateRackBadge(data.updatedRackOccupancy.rackId, 
                                       data.updatedRackOccupancy.occupiedBins, 
                                       data.updatedRackOccupancy.totalBins);
                    }
                    
                    if (data.remainingCutParts !== undefined) {
                        updateCutPartsCount(data.remainingCutParts);
                    }
                    
                    // Check for assembly readiness
                    if (data.assemblyReadiness) {
                        showAssemblyReadinessAlert(data.assemblyReadiness);
                    }
                    
                    // Close modal after delay with enhanced feedback
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('scanModal'));
                        modal.hide();
                        resetScanModal();
                        
                        // Refresh current rack if it matches
                        if (currentRackId === data.rackId) {
                            loadRackDetails(currentRackId);
                        }
                        
                        // Show completion toast
                        showToast(`Part sorted successfully to ${data.binLabel || 'assigned bin'}`, 'success');
                    }, 2500);
                } else {
                    // Enhanced error feedback with suggested actions
                    updateScanFeedback(`⚠️ ${data.message}`, 'text-danger');
                    
                    // Show suggested next steps for common errors
                    if (data.suggestions) {
                        showErrorSuggestions(data.suggestions);
                    }
                }
            })
            .catch(error => {
                console.error('Scan error:', error);
                hideScanStatus();
                updateScanFeedback('Network error - please check connection and try again.', 'text-danger');
            });
        }

        function showScanStatus(message, showSpinner = false) {
            document.getElementById('scanStatus').style.display = 'block';
            document.getElementById('scanSpinner').style.display = showSpinner ? 'block' : 'none';
            document.getElementById('scanStatusText').textContent = message;
            document.getElementById('scanStatusIcon').innerHTML = '';
        }

        function hideScanStatus() {
            document.getElementById('scanStatus').style.display = 'none';
            document.getElementById('scanSpinner').style.display = 'none';
        }

        function updateScanFeedback(message, className) {
            const feedback = document.getElementById('scanFeedback');
            feedback.textContent = message;
            feedback.className = `form-text ${className}`;
        }

        function showPlacementGuidance(message) {
            const guidance = document.getElementById('placementGuidance');
            const messageDiv = document.getElementById('placementMessage');
            messageDiv.textContent = message;
            guidance.style.display = 'block';
        }

        function updateSelectedRackInfo(rackName) {
            const rackInfo = document.getElementById('selectedRackInfo');
            const rackNameSpan = document.getElementById('selectedRackName');
            
            if (rackName && rackInfo && rackNameSpan) {
                rackNameSpan.textContent = rackName;
                rackInfo.style.display = 'block';
            } else if (rackInfo) {
                rackInfo.style.display = 'none';
            }
        }

        function resetScanModal() {
            document.getElementById('partBarcodeInput').value = '';
            document.getElementById('scanFeedback').textContent = '';
            document.getElementById('placementGuidance').style.display = 'none';
            hideScanStatus();
        }

        // Load cut parts list
        function loadCutParts() {
            const modal = new bootstrap.Modal(document.getElementById('cutPartsModal'));
            const content = document.getElementById('cutPartsContent');
            
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status"></div>
                    <div class="mt-2">Loading cut parts...</div>
                </div>
            `;
            
            modal.show();
            
            // Refresh cut parts count when modal opens
            fetch('/Sorting/GetCurrentCutPartsCount')
                .then(response => response.json())
                .then(countData => {
                    if (countData.success) {
                        updateCutPartsCount(countData.count);
                    }
                });
            
            fetch('/Sorting/GetCutParts')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayCutParts(data.parts);
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load cut parts: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading cut parts:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading cut parts.
                        </div>
                    `;
                });
        }

        function displayCutParts(parts) {
            const content = document.getElementById('cutPartsContent');
            
            if (!parts || parts.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-check-circle fa-3x mb-3 text-success"></i>
                        <p>All parts have been sorted! No cut parts remaining.</p>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="table-responsive">
                    <table class="table table-striped table-sm">
                        <thead>
                            <tr>
                                <th>Part Name</th>
                                <th>Product</th>
                                <th>Qty</th>
                                <th>Material</th>
                                <th>Dimensions</th>
                                <th>Nest Sheet</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            parts.forEach(part => {
                const dimensions = [
                    part.length && `L:${part.length}`,
                    part.width && `W:${part.width}`,
                    part.thickness && `T:${part.thickness}`
                ].filter(Boolean).join('×') || 'N/A';

                html += `
                    <tr>
                        <td><strong>${part.name}</strong></td>
                        <td>${part.productName}</td>
                        <td>${part.qty}</td>
                        <td>${part.material || 'N/A'}</td>
                        <td class="small">${dimensions}</td>
                        <td class="small">${part.nestSheetName}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-primary" 
                                    onclick="quickSortPart('${part.id}', '${part.name}')">
                                <i class="fas fa-sort me-1"></i>Sort
                            </button>
                        </td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;

            content.innerHTML = html;
        }

        function quickSortPart(partId, partName) {
            // Close cut parts modal and pre-fill scan modal
            bootstrap.Modal.getInstance(document.getElementById('cutPartsModal')).hide();
            
            setTimeout(() => {
                document.getElementById('partBarcodeInput').value = partId;
                const scanModal = new bootstrap.Modal(document.getElementById('scanModal'));
                scanModal.show();
            }, 300);
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'primary'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        function showError(message) {
            showToast(message, 'error');
        }

        // Auto-focus on modal show
        document.getElementById('scanModal').addEventListener('shown.bs.modal', function () {
            document.getElementById('partBarcodeInput').focus();
            resetScanModal();
        });

        // Handle Enter key in barcode input
        document.getElementById('partBarcodeInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                scanPart();
            }
        });

        // Load first rack on page load
        document.addEventListener('DOMContentLoaded', function() {
            const firstTab = document.querySelector('.nav-link');
            if (firstTab && firstTab.id) {
                const rackId = firstTab.id.split('-')[1];
                loadRackDetails(rackId);
            }
            
            // Setup SignalR connection for real-time updates
            signalRConnection = setupSignalRConnection();
            
            // Add modal cleanup event listeners
            const binModal = document.getElementById('binDetailModal');
            binModal.addEventListener('hidden.bs.modal', function() {
                currentBinDetails = null;
                cleanupModalState();
            });
            
            // Check initial assembly readiness
            checkInitialAssemblyReadiness();
        });

        function checkInitialAssemblyReadiness() {
            // Check if any products are ready for assembly on page load
            fetch('/Sorting/GetAssemblyReadinessCount')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.count > 0) {
                        updateAssemblyReadinessButton(data.count);
                    }
                })
                .catch(error => {
                    console.error('Error checking initial assembly readiness:', error);
                });
        }

        // SignalR real-time updates
        function setupSignalRConnection() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/hubs/status")
                .withAutomaticReconnect()
                .build();

            connection.start().then(function () {
                console.log("SignalR Connected - Sorting Station");
                
                // Join sorting station group
                connection.invoke("JoinGroup", "sorting-station").catch(err => console.error(err));
                
                // Join work order group if active work order exists
                const activeWorkOrderId = '@ViewBag.ActiveWorkOrderId';
                if (activeWorkOrderId) {
                    connection.invoke("JoinGroup", `workorder-${activeWorkOrderId}`).catch(err => console.error(err));
                }
                
            }).catch(function (err) {
                console.error("SignalR Connection Error: " + err.toString());
                // Retry connection in 5 seconds
                setTimeout(() => setupSignalRConnection(), 5000);
            });

            // Handle part sorted updates
            connection.on("PartSorted", function (data) {
                console.log("PartSorted event received:", data);
                showToast(`Part '${data.partName}' sorted to ${data.binLabel}`, 'success');
                
                // Always refresh current rack to ensure consistency
                if (currentRackId) {
                    console.log(`Refreshing rack ${currentRackId} due to PartSorted event`);
                    loadRackDetails(currentRackId);
                }
            });

            // Handle rack occupancy updates (real-time badge updates)
            connection.on("RackOccupancyUpdate", function (data) {
                console.log("RackOccupancyUpdate event received:", data);
                updateRackBadge(data.rackId, data.occupiedBins, data.totalBins);
            });

            // Handle cut parts count updates (real-time count updates)
            connection.on("CutPartsCountUpdate", function (data) {
                console.log("CutPartsCountUpdate event received:", data);
                updateCutPartsCount(data.count);
            });

            // Handle product ready for assembly notifications
            connection.on("ProductReadyForAssembly", function (data) {
                showAssemblyReadyNotification(data);
                
                // Update assembly readiness button
                if (data.totalReadyProducts !== undefined) {
                    updateAssemblyReadinessButton(data.totalReadyProducts);
                }
            });

            // Handle status updates with enhanced logging
            connection.on("StatusUpdate", function (data) {
                console.log("StatusUpdate event received:", data);
                if (data.type === "part-sorted") {
                    // Force refresh current rack for any part-sorted update
                    if (currentRackId) {
                        console.log(`Refreshing rack ${currentRackId} due to StatusUpdate`);
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update rack badge if rack info is available
                    if (data.rackId) {
                        refreshRackBadge(data.rackId);
                    }
                }
            });

            // Connection closed handler
            connection.onclose(function () {
                console.log("SignalR Connection Closed");
                showToast("Connection lost - attempting to reconnect...", 'warning');
            });

            // Reconnection handlers
            connection.onreconnecting(function () {
                console.log("SignalR Reconnecting...");
                showToast("Reconnecting to server...", 'info');
            });

            connection.onreconnected(function () {
                console.log("SignalR Reconnected");
                showToast("Reconnected to server", 'success');
                
                // Rejoin groups after reconnection
                connection.invoke("JoinGroup", "sorting-station").catch(err => console.error(err));
                const activeWorkOrderId = '@ViewBag.ActiveWorkOrderId';
                if (activeWorkOrderId) {
                    connection.invoke("JoinGroup", `workorder-${activeWorkOrderId}`).catch(err => console.error(err));
                }
            });

            return connection;
        }

        function getCurrentlySelectedRackId() {
            const activeTab = document.querySelector('.nav-link.active');
            if (activeTab && activeTab.id) {
                return activeTab.id.split('-')[1];
            }
            return null;
        }

        function updateRackBadge(rackId, occupiedBins, totalBins) {
            const badge = document.querySelector(`#rack-${rackId}-badge`);
            if (badge) {
                badge.textContent = `${occupiedBins}/${totalBins}`;
                console.log(`Updated rack ${rackId} badge to ${occupiedBins}/${totalBins}`);
            } else {
                console.warn(`Badge not found for rack ${rackId}`);
            }
        }

        function refreshRackBadge(rackId) {
            fetch(`/Sorting/GetRackOccupancy/${rackId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateRackBadge(rackId, data.occupiedBins, data.totalBins);
                    }
                })
                .catch(error => {
                    console.error('Error fetching rack occupancy:', error);
                });
        }

        function updateCutPartsCount(count) {
            currentCutPartsCount = count;
            const countElement = document.getElementById('cutPartsCount');
            if (countElement) {
                countElement.textContent = count;
            }
        }

        function showScanSuccessAnimation(data) {
            // Visual confirmation of successful scan
            const statusIcon = document.getElementById('scanStatusIcon');
            if (statusIcon) {
                statusIcon.innerHTML = '<i class="fas fa-check-circle text-success fa-2x"></i>';
                statusIcon.style.animation = 'pulse 0.5s ease-in-out';
            }
        }

        function showAssemblyReadinessAlert(readinessData) {
            // Enhanced assembly readiness with clear next steps
            if (readinessData.isReady) {
                const guidance = document.getElementById('placementGuidance');
                const messageDiv = document.getElementById('placementMessage');
                
                messageDiv.innerHTML = `
                    <div class="d-flex align-items-center">
                        <i class="fas fa-tools fa-2x text-success me-3"></i>
                        <div>
                            <div class="fw-bold text-success">🎉 Product Ready for Assembly!</div>
                            <div class="mt-1"><strong>${readinessData.productName}</strong></div>
                            <div class="small mt-1">
                                <i class="fas fa-arrow-right me-1"></i>
                                Next: Move to Assembly Station to complete this product
                            </div>
                        </div>
                    </div>
                `;
                guidance.className = 'alert alert-success';
                guidance.style.display = 'block';
                
                // Play success sound (if supported)
                playSuccessSound();
            }
        }

        function showErrorSuggestions(suggestions) {
            // Show helpful suggestions for scan errors
            const guidance = document.getElementById('placementGuidance');
            const messageDiv = document.getElementById('placementMessage');
            
            let suggestionHtml = '<div><strong>Suggested actions:</strong><ul class="mt-2">';
            suggestions.forEach(suggestion => {
                suggestionHtml += `<li>${suggestion}</li>`;
            });
            suggestionHtml += '</ul></div>';
            
            messageDiv.innerHTML = suggestionHtml;
            guidance.className = 'alert alert-warning';
            guidance.style.display = 'block';
        }

        function playSuccessSound() {
            // Play a subtle success sound (browser permitting)
            try {
                const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYgCT2X2O/AciMFl');
                audio.volume = 0.1;
                audio.play().catch(() => {}); // Ignore errors if audio can't play
            } catch (e) {
                // Ignore audio errors
            }
        }

        function showAssemblyReadyNotification(data) {
            // Create special assembly ready notification with enhanced content
            const toastContainer = document.getElementById('toast-container') || createToastContainer();
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white bg-success border-0';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('data-bs-autohide', 'false'); // Keep visible until manually dismissed
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-tools fa-2x me-3"></i>
                            <div>
                                <div class="fw-bold">🎉 Product Ready for Assembly!</div>
                                <div class="small">
                                    ${data.productName} (${data.productNumber || data.productId})
                                </div>
                                <div class="small text-light">All parts sorted - ready for assembly station</div>
                                <div class="small mt-1">
                                    <i class="fas fa-arrow-right me-1"></i>
                                    Next: Move to Assembly Station
                                </div>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 10000 }); // Show longer for assembly notifications
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
            
            // Play success sound for assembly readiness
            playSuccessSound();
        }

        // Bin detail modal functions
        let currentBinDetails = null;

        function showBinDetailModal(rackId, row, column, label) {
            const modal = new bootstrap.Modal(document.getElementById('binDetailModal'));
            const content = document.getElementById('binDetailContent');
            const clearBtn = document.getElementById('clearBinBtn');
            
            // Update modal title
            document.getElementById('binDetailModalLabel').innerHTML = 
                `<i class="fas fa-box me-2"></i>Bin ${label} Details`;
            
            // Show loading state
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading bin details...</div>
                </div>
            `;
            
            clearBtn.style.display = 'none';
            modal.show();
            
            // Fetch bin details
            fetch(`/Sorting/GetBinDetails?rackId=${encodeURIComponent(rackId)}&row=${row}&column=${column}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        currentBinDetails = data.bin;
                        displayBinDetails(data.bin);
                        
                        // Show clear button if bin has contents
                        if (data.bin.parts && data.bin.parts.length > 0) {
                            clearBtn.style.display = 'block';
                        }
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load bin details: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading bin details:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading bin details.
                        </div>
                    `;
                });
        }

        function displayBinDetails(bin) {
            const content = document.getElementById('binDetailContent');
            
            let html = `
                <div class="row mb-4">
                    <div class="col-md-6">
                        <h6>Bin Information</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Label:</strong></td><td>${bin.label}</td></tr>
                            <tr><td><strong>Position:</strong></td><td>Row ${bin.row}, Column ${bin.column}</td></tr>
                            <tr><td><strong>Status:</strong></td><td><span class="badge bg-${getBinStatusBadgeClass(bin.status)}">${bin.statusText}</span></td></tr>
                            <tr><td><strong>Progress:</strong></td><td>${bin.partsCount}/${bin.maxCapacity} parts (${bin.capacityPercentage}%)</td></tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6>Assignment Details</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Product:</strong></td><td>${bin.productName || 'Not assigned'}</td></tr>
                            <tr><td><strong>Work Order:</strong></td><td>${bin.workOrderId || 'Not assigned'}</td></tr>
                            <tr><td><strong>Assigned:</strong></td><td>${bin.assignedDate || 'N/A'}</td></tr>
                            <tr><td><strong>Last Updated:</strong></td><td>${bin.lastUpdatedDate || 'N/A'}</td></tr>
                        </table>
                    </div>
                </div>
            `;
            
            if (bin.parts && bin.parts.length > 0) {
                html += `
                    <h6>Parts in Bin (${bin.parts.length})</h6>
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead>
                                <tr>
                                    <th>Part Name</th>
                                    <th>Product</th>
                                    <th>Qty</th>
                                    <th>Material</th>
                                    <th>Dimensions</th>
                                    <th>Sorted Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                `;
                
                bin.parts.forEach(part => {
                    const dimensions = [
                        part.length && `L:${part.length}`,
                        part.width && `W:${part.width}`,
                        part.thickness && `T:${part.thickness}`
                    ].filter(Boolean).join('×') || 'N/A';
                    
                    html += `
                        <tr>
                            <td><strong>${part.name}</strong></td>
                            <td>${part.productName}</td>
                            <td>${part.qty}</td>
                            <td>${part.material || 'N/A'}</td>
                            <td class="small">${dimensions}</td>
                            <td class="small">${part.sortedDate}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="removePartFromBin('${part.id}', '${part.name}')"
                                        title="Remove this part from bin">
                                    <i class="fas fa-times"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                html += `
                            </tbody>
                        </table>
                    </div>
                `;
            } else {
                html += `
                    <div class="text-center text-muted mt-4">
                        <i class="fas fa-inbox fa-3x mb-3"></i>
                        <p>This bin is empty</p>
                    </div>
                `;
            }
            
            if (bin.notes) {
                html += `
                    <div class="mt-3">
                        <h6>Notes</h6>
                        <div class="alert alert-info">${bin.notes}</div>
                    </div>
                `;
            }
            
            content.innerHTML = html;
        }

        function getBinStatusBadgeClass(status) {
            switch (status) {
                case 'empty': return 'secondary';
                case 'partial': return 'info';
                case 'full': return 'success';
                case 'blocked': return 'danger';
                case 'reserved': return 'warning';
                default: return 'secondary';
            }
        }

        function removePartFromBin(partId, partName) {
            if (!confirm(`Are you sure you want to remove part "${partName}" from this bin?\n\nThis will change the part status back to "Cut" and it will need to be sorted again.`)) {
                return;
            }
            
            fetch('/Sorting/RemovePartFromBin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `partId=${encodeURIComponent(partId)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(`Part "${partName}" removed from bin successfully`, 'success');
                    
                    // Check if bin is now empty and close modal, otherwise refresh
                    if (data.updatedCutPartsCount !== undefined) {
                        // If the operation succeeded, check if we should close or refresh the modal
                        const binModal = bootstrap.Modal.getInstance(document.getElementById('binDetailModal'));
                        if (binModal) {
                            binModal.hide();
                        }
                        // Clean up any stuck modal state
                        cleanupModalState();
                    }
                    
                    // Refresh the rack display
                    if (currentRackId) {
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update cut parts count
                    if (data.updatedCutPartsCount !== undefined) {
                        updateCutPartsCount(data.updatedCutPartsCount);
                    }
                } else {
                    showToast(`Failed to remove part: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error removing part from bin:', error);
                showToast('An error occurred while removing the part', 'error');
            });
        }

        function cleanupModalState() {
            // Force cleanup of any stuck modal state
            setTimeout(() => {
                // Remove any modal backdrops
                const backdrops = document.querySelectorAll('.modal-backdrop');
                backdrops.forEach(backdrop => backdrop.remove());
                
                // Reset body classes and styles
                document.body.classList.remove('modal-open');
                document.body.style.removeProperty('overflow');
                document.body.style.removeProperty('padding-right');
                
                // Reset any modal instances
                const modalElement = document.getElementById('binDetailModal');
                if (modalElement) {
                    modalElement.style.display = '';
                    modalElement.classList.remove('show');
                    modalElement.setAttribute('aria-hidden', 'true');
                    modalElement.removeAttribute('aria-modal');
                    modalElement.removeAttribute('role');
                }
            }, 250);
        }

        function showAssemblyReadiness() {
            const modal = new bootstrap.Modal(document.getElementById('assemblyReadinessModal'));
            const content = document.getElementById('assemblyReadinessContent');
            
            // Show loading
            content.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading assembly readiness...</div>
                </div>
            `;
            
            modal.show();
            
            fetch('/Sorting/GetAssemblyReadiness')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayAssemblyReadiness(data.products);
                    } else {
                        content.innerHTML = `
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Failed to load assembly readiness: ${data.message}
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error loading assembly readiness:', error);
                    content.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-times-circle me-2"></i>
                            An error occurred while loading assembly readiness.
                        </div>
                    `;
                });
        }

        function displayAssemblyReadiness(products) {
            const content = document.getElementById('assemblyReadinessContent');
            
            if (!products || products.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-clock fa-3x mb-3"></i>
                        <p>No products are ready for assembly yet.</p>
                        <small>Products will appear here when all their parts have been sorted.</small>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="alert alert-success">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-check-circle fa-2x me-3"></i>
                        <div>
                            <div class="fw-bold">Great news! You have ${products.length} product(s) ready for assembly.</div>
                            <div class="small mt-1">All parts for these products have been sorted and are ready to be assembled.</div>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Product Number</th>
                                <th>Parts Count</th>
                                <th>Sorting Complete</th>
                                <th>Rack Locations</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            products.forEach(product => {
                html += `
                    <tr class="table-success">
                        <td>
                            <div class="fw-bold">${product.name}</div>
                            <div class="small text-muted">${product.workOrderName}</div>
                        </td>
                        <td><code>${product.productNumber}</code></td>
                        <td>
                            <span class="badge bg-success">${product.sortedPartsCount}/${product.totalPartsCount}</span>
                        </td>
                        <td>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-check-circle text-success me-2"></i>
                                <div>
                                    <div class="small fw-bold text-success">Complete</div>
                                    <div class="small text-muted">${product.completedDate}</div>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="small">
                                ${product.rackLocations.map(loc => 
                                    `<span class="badge bg-secondary me-1">${loc}</span>`
                                ).join('')}
                            </div>
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-success" 
                                    onclick="navigateToAssemblyStationForProduct('${product.id}')">
                                <i class="fas fa-tools me-1"></i>Assemble
                            </button>
                        </td>
                    </tr>
                `;
            });

            html += `
                        </tbody>
                    </table>
                </div>
                <div class="mt-3 p-3 bg-light rounded">
                    <h6><i class="fas fa-lightbulb me-2"></i>Next Steps:</h6>
                    <ol class="mb-0 small">
                        <li><strong>Navigate to Assembly Station</strong> - Click the "Go to Assembly Station" button below</li>
                        <li><strong>Scan any part</strong> from the ready product to mark entire product as assembled</li>
                        <li><strong>Collect components</strong> - Get doors, drawer fronts, and adjustable shelves from their special racks</li>
                        <li><strong>Complete assembly</strong> - All product parts will be marked as assembled automatically</li>
                    </ol>
                </div>
            `;

            content.innerHTML = html;
        }

        function navigateToAssemblyStation() {
            // Navigate to Assembly Station
            window.location.href = '/Assembly';
        }

        function navigateToAssemblyStationForProduct(productId) {
            // Navigate to Assembly Station with specific product pre-selected
            window.location.href = `/Assembly?productId=${encodeURIComponent(productId)}`;
        }

        function updateAssemblyReadinessButton(count) {
            const button = document.getElementById('assemblyReadyButton');
            const countSpan = document.getElementById('readyProductsCount');
            
            if (count > 0) {
                countSpan.textContent = count;
                button.style.display = 'block';
                button.classList.add('btn-pulse'); // Add pulsing animation
            } else {
                button.style.display = 'none';
                button.classList.remove('btn-pulse');
            }
        }

        function clearEntireBin() {
            if (!currentBinDetails) return;
            
            const partCount = currentBinDetails.parts ? currentBinDetails.parts.length : 0;
            if (partCount === 0) {
                showToast('Bin is already empty', 'info');
                return;
            }
            
            if (!confirm(`Are you sure you want to clear bin "${currentBinDetails.label}"?\n\nThis will remove all ${partCount} parts and change their status back to "Cut". They will need to be sorted again.`)) {
                return;
            }
            
            fetch('/Sorting/ClearBin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `rackId=${encodeURIComponent(currentBinDetails.rackId)}&row=${currentBinDetails.row}&column=${currentBinDetails.column}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(`Bin "${currentBinDetails.label}" cleared successfully. ${data.partsRemoved} parts removed.`, 'success');
                    
                    // Close the modal and ensure backdrop is removed
                    const modal = bootstrap.Modal.getInstance(document.getElementById('binDetailModal'));
                    modal.hide();
                    
                    // Clean up modal state
                    cleanupModalState();
                    
                    // Refresh the rack display
                    if (currentRackId) {
                        loadRackDetails(currentRackId);
                    }
                    
                    // Update cut parts count
                    if (data.updatedCutPartsCount !== undefined) {
                        updateCutPartsCount(data.updatedCutPartsCount);
                    }
                    
                    // Update assembly readiness
                    if (data.assemblyReadyCount !== undefined) {
                        updateAssemblyReadinessButton(data.assemblyReadyCount);
                    }
                } else {
                    showToast(`Failed to clear bin: ${data.message}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error clearing bin:', error);
                showToast('An error occurred while clearing the bin', 'error');
            });
        }
    </script>

    <style>
        .rack-grid {
            display: table;
            margin: 0 auto;
            border-collapse: separate;
            border-spacing: 2px;
        }

        .grid-header-row, .grid-row {
            display: table-row;
        }

        .grid-header-corner, .grid-header-col, .grid-header-row-label, .grid-bin {
            display: table-cell;
            width: 50px;
            height: 50px;
            text-align: center;
            vertical-align: middle;
            border: 1px solid #dee2e6;
            position: relative;
        }

        .grid-header-corner, .grid-header-col, .grid-header-row-label {
            background-color: #f8f9fa;
            font-weight: bold;
            font-size: 0.8rem;
        }

        .grid-bin {
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.7rem;
        }

        .grid-bin:hover {
            transform: scale(1.05);
            z-index: 10;
            border-color: #004F00;
        }

        .bin-label {
            font-weight: bold;
            line-height: 1;
        }

        .bin-content {
            font-size: 0.6rem;
            opacity: 0.8;
        }

        .bin-warning {
            position: absolute;
            top: 2px;
            right: 2px;
            color: #dc3545;
            font-size: 0.6rem;
        }

        .bin-empty {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .bin-partial {
            background-color: #cff4fc;
            border-color: #0dcaf0;
            color: #055160;
        }

        .bin-full {
            background-color: #d1e7dd;
            border-color: #198754;
            color: #0f5132;
        }

        .bin-blocked {
            background-color: #f8d7da;
            border-color: #dc3545;
            color: #721c24;
        }

        .bin-reserved {
            background-color: #fff3cd;
            border-color: #ffc107;
            color: #664d03;
        }

        .rack-legend {
            text-align: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.9rem;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border: 1px solid #dee2e6;
            border-radius: 3px;
        }

        @@media (max-width: 768px) {
            .grid-bin, .grid-header-corner, .grid-header-col, .grid-header-row-label {
                width: 40px;
                height: 40px;
                font-size: 0.6rem;
            }
            
            .rack-grid {
                border-spacing: 1px;
            }
        }

        /* Enhanced animations for better UX */
        .btn-pulse {
            animation: btn-pulse 2s infinite;
        }

        @@keyframes btn-pulse {
            0% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(25, 135, 84, 0.7);
            }
            70% {
                transform: scale(1.05);
                box-shadow: 0 0 0 10px rgba(25, 135, 84, 0);
            }
            100% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(25, 135, 84, 0);
            }
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Success feedback animations */
        .scan-success {
            animation: scan-success 0.6s ease-out;
        }

        @@keyframes scan-success {
            0% { 
                opacity: 0; 
                transform: translateY(-10px) scale(0.8); 
            }
            50% { 
                opacity: 1; 
                transform: translateY(0) scale(1.1); 
            }
            100% { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }
    </style>
}