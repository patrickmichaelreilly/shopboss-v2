@model ShopBoss.Web.Services.WorkOrderManagementData
@{
    ViewData["Title"] = $"Modify Work Order - {Model.WorkOrder.Name}";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tree-view.css" />
    <style>
        .tree-view {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            background-color: #ffffff;
        }
        
        .tree-node {
            padding: 0.25rem 0;
        }
        
        .tree-node.level-0 { margin-left: 0; }
        .tree-node.level-1 { margin-left: 1.5rem; }
        .tree-node.level-2 { margin-left: 3rem; }
        .tree-node.level-3 { margin-left: 4.5rem; }
        .tree-node.level-4 { margin-left: 6rem; }
        
        .tree-toggle {
            cursor: pointer;
            user-select: none;
            color: #6c757d;
            display: inline-flex !important;
            align-items: center;
            justify-content: center;
            min-width: 16px;
            height: 16px;
        }
        
        .tree-toggle:hover {
            color: #495057;
            background-color: #e9ecef;
            border-radius: 2px;
        }
        
        .tree-toggle i {
            font-size: 12px !important;
            line-height: 1;
        }
        
        .tree-checkbox {
            margin-right: 0.5rem;
        }
        
        .tree-checkbox.indeterminate {
            opacity: 0.6;
        }
        
        .tree-node.selected {
            background-color: #e3f2fd;
            border-radius: 0.25rem;
            padding: 0.125rem 0.25rem;
        }
        
        .tree-node.partially-selected {
            background-color: #fff3e0;
            border-radius: 0.25rem;
            padding: 0.125rem 0.25rem;
        }
        
        .selection-summary {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .selection-warning {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 0.375rem;
            padding: 0.75rem;
            margin-bottom: 1rem;
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
        
        .alert-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            max-width: 400px;
        }
    </style>
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0">
                    <i class="fas fa-edit me-2"></i>Modify Work Order
                </h3>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Work Orders
                </a>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Status Management:</strong> Use the dropdowns to update item statuses. 
                    Changes are saved automatically and updated in real-time.
                </div>

                <!-- Work Order Information Section (Unified Pattern) -->
                <div class="mb-4">
                    <h5>Work Order Information</h5>
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <strong>Work Order Name:</strong><br>
                                    <span class="text-muted" id="work-order-name-detail">@Model.WorkOrder.Name</span>
                                </div>
                                <div class="col-md-4">
                                    <strong>Work Order ID:</strong><br>
                                    <span class="text-muted" id="work-order-id">@Model.WorkOrder.Id</span>
                                </div>
                                <div class="col-md-4">
                                    <strong>Imported Date:</strong><br>
                                    <span class="text-muted" id="work-order-imported">@Model.WorkOrder.ImportedDate.ToString("yyyy-MM-dd HH:mm")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <h5>Status Statistics</h5>
                    <div class="row">
                        <div class="col-lg col-md-4 col-6 mb-3">
                            <div class="card border-primary h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-boxes fa-2x text-primary mb-2"></i>
                                    <h4 id="totalProducts" class="mb-1">0</h4>
                                    <small class="text-muted">Products</small>
                                    <div class="mt-1">
                                        <div class="row g-1 text-center">
                                            <div class="col-6"><small class="text-muted" id="products-pending">0 Pending</small></div>
                                            <div class="col-6"><small class="text-warning" id="products-cut">0 Cut</small></div>
                                        </div>
                                        <div class="row g-1 text-center">
                                            <div class="col-4"><small class="text-info" id="products-sorted">0 Sorted</small></div>
                                            <div class="col-4"><small class="text-success text-nowrap" id="products-assembled">0 Assembled</small></div>
                                            <div class="col-4"><small class="text-primary" id="products-shipped">0 Shipped</small></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg col-md-4 col-6 mb-3">
                            <div class="card border-success h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-puzzle-piece fa-2x text-success mb-2"></i>
                                    <h4 id="totalParts" class="mb-1">0</h4>
                                    <small class="text-muted">Parts</small>
                                    <div class="mt-1">
                                        <div class="row g-1 text-center">
                                            <div class="col-6"><small class="text-muted" id="parts-pending">0 Pending</small></div>
                                            <div class="col-6"><small class="text-warning" id="parts-cut">0 Cut</small></div>
                                        </div>
                                        <div class="row g-1 text-center">
                                            <div class="col-4"><small class="text-info" id="parts-sorted">0 Sorted</small></div>
                                            <div class="col-4"><small class="text-success text-nowrap" id="parts-assembled">0 Assembled</small></div>
                                            <div class="col-4"><small class="text-primary" id="parts-shipped">0 Shipped</small></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg col-md-4 col-6 mb-3">
                            <div class="card border-dark h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-th-large fa-2x text-dark mb-2"></i>
                                    <h4 id="totalDetachedProducts" class="mb-1">0</h4>
                                    <small class="text-muted">Detached Products</small>
                                    <div class="mt-1">
                                        <div class="row g-1 text-center">
                                            <div class="col-6"><small class="text-muted" id="detachedproducts-pending">0 Pending</small></div>
                                            <div class="col-6"><small class="text-primary" id="detachedproducts-shipped">0 Shipped</small></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg col-md-4 col-6 mb-3">
                            <div class="card border-info h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-tools fa-2x text-info mb-2"></i>
                                    <h4 id="totalHardware" class="mb-1">0</h4>
                                    <small class="text-muted">Hardware</small>
                                    <div class="mt-1">
                                        <div class="row g-1 text-center">
                                            <div class="col-6"><small class="text-muted" id="hardware-pending">0 Pending</small></div>
                                            <div class="col-6"><small class="text-warning" id="hardware-cut">0 Cut</small></div>
                                        </div>
                                        <div class="row g-1 text-center">
                                            <div class="col-4"><small class="text-info" id="hardware-sorted">0 Sorted</small></div>
                                            <div class="col-4"><small class="text-success text-nowrap" id="hardware-assembled">0 Assembled</small></div>
                                            <div class="col-4"><small class="text-primary" id="hardware-shipped">0 Shipped</small></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg col-md-4 col-6 mb-3">
                            <div class="card border-secondary h-100">
                                <div class="card-body text-center">
                                    <i class="fas fa-cut fa-2x text-secondary mb-2"></i>
                                    <h4 id="totalNestSheets" class="mb-1">0</h4>
                                    <small class="text-muted">Nest Sheets</small>
                                    <div class="mt-1">
                                        <div class="row g-1 text-center">
                                            <div class="col-6"><small class="text-success" id="nestsheets-processed">0 Processed</small></div>
                                            <div class="col-6"><small class="text-warning" id="nestsheets-pending">0 Pending</small></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Controls Section -->
                <div class="mb-3">
                    <div class="row g-3 align-items-end">
                        <div class="col-md-4">
                            <label for="searchInput" class="form-label">Search</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="searchInput" class="form-control" 
                                       placeholder="Search by product name, part name, or item ID...">
                                <button type="button" id="clearSearchBtn" class="btn btn-outline-secondary">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button type="button" id="expandAllBtn" class="btn btn-outline-primary me-2">
                                <i class="fas fa-expand-alt me-1"></i>Expand All
                            </button>
                            <button type="button" id="collapseAllBtn" class="btn btn-outline-secondary">
                                <i class="fas fa-compress-alt me-1"></i>Collapse All
                            </button>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input type="checkbox" id="selectAllItems" class="form-check-input">
                                <label for="selectAllItems" class="form-check-label">Select All</label>
                            </div>
                            <div id="selection-info" class="text-muted">
                                <small><span id="selectedCount">0</span> items selected</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bulk Actions Section -->
                <div class="mb-3" id="bulk-actions" style="display: none;">
                    <div class="card bg-light">
                        <div class="card-body">
                            <div class="row g-3 align-items-center">
                                <div class="col-md-3">
                                    <label for="bulkStatusSelect" class="form-label">Bulk Status Change:</label>
                                    <select id="bulkStatusSelect" class="form-select">
                                        <option value="">Select Status</option>
                                        <option value="Pending">Pending</option>
                                        <option value="Cut">Cut</option>
                                        <option value="Sorted">Sorted</option>
                                        <option value="Assembled">Assembled</option>
                                        <option value="Shipped">Shipped</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-check mt-4">
                                        <input type="checkbox" id="bulkCascadeOption" class="form-check-input">
                                        <label for="bulkCascadeOption" class="form-check-label">Cascade to Parts</label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <button type="button" id="applyBulkChangesBtn" class="btn btn-warning mt-4" disabled>
                                        <i class="fas fa-edit me-1"></i>Apply Changes
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tree View Container -->
                <div class="tree-view" style="position: relative; min-height: 400px;">
                    <div id="workOrderTree"></div>
                    <div class="loading-overlay" id="loadingOverlay">
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">Processing...</div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex justify-content-end mt-4">
                    <button type="button" id="refreshDataBtn" class="btn btn-outline-primary">
                        <i class="fas fa-sync me-2"></i>Refresh Data
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Container -->
<div class="alert-container" id="alertContainer"></div>

@section Scripts {
    <script src="~/js/WorkOrderTreeView.js"></script>
    <script>
        let treeView;
        let selectedItems = new Set();
        const workOrderId = '@Model.WorkOrder.Id';

        $(document).ready(function() {
            if (!workOrderId) {
                showError('Work order ID is required');
                return;
            }

            initializeModifyWorkOrder();
        });

        async function initializeModifyWorkOrder() {
            try {
                // Initialize the tree view
                treeView = new WorkOrderTreeView('workOrderTree', {
                    mode: 'modify',
                    apiUrl: '/api/WorkOrderTreeApi',
                    workOrderId: workOrderId,
                    onSelectionChange: handleSelectionChange,
                    onStatusChange: handleStatusChange,
                    onDataLoaded: handleDataLoaded
                });

                // Setup additional event handlers
                setupEventHandlers();

            } catch (error) {
                console.error('Error initializing modify work order:', error);
                showError('Failed to initialize interface: ' + error.message);
            }
        }

        function handleDataLoaded(data) {
            console.log('Tree data loaded:', data);
            
            // The WorkOrderTreeView component should provide the items directly
            // If data is the API response, access data.Items; if it's already the items array, use it directly
            let items = data;
            if (data && data.Items) {
                items = data.Items;
            } else if (data && data.items) {
                items = data.items;
            }
            
            if (items && Array.isArray(items)) {
                calculateAndUpdateStatistics(items);
            }
        }

        function calculateAndUpdateStatistics(items) {
            const stats = {
                products: { total: 0, pending: 0, cut: 0, sorted: 0, assembled: 0, shipped: 0 },
                parts: { total: 0, pending: 0, cut: 0, sorted: 0, assembled: 0, shipped: 0 },
                hardware: { total: 0, pending: 0, cut: 0, sorted: 0, assembled: 0, shipped: 0 },
                detachedproducts: { total: 0, pending: 0, shipped: 0 },
                nestsheets: { total: 0, processed: 0, pending: 0 }
            };

            // Recursively count items by type and status
            function countItems(items) {
                items.forEach(item => {
                    if (item.type === 'product') {
                        stats.products.total++;
                        if (item.status) {
                            stats.products[item.status.toLowerCase()]++;
                        }
                    } else if (item.type === 'part') {
                        stats.parts.total++;
                        if (item.status) {
                            stats.parts[item.status.toLowerCase()]++;
                        }
                    } else if (item.type === 'hardware') {
                        stats.hardware.total++;
                        if (item.status) {
                            stats.hardware[item.status.toLowerCase()]++;
                        }
                    } else if (item.type === 'nestsheet') {
                        stats.nestsheets.total++;
                        if (item.status === 'Processed') {
                            stats.nestsheets.processed++;
                        } else {
                            stats.nestsheets.pending++;
                        }
                    } else if (item.type === 'detached_product') {
                        stats.detachedproducts.total++;
                        if (item.status === 'Shipped') {
                            stats.detachedproducts.shipped++;
                        } else {
                            stats.detachedproducts.pending++;
                        }
                    }

                    if (item.children && item.children.length > 0) {
                        countItems(item.children);
                    }
                });
            }

            countItems(items);

            // Update UI
            document.getElementById('totalProducts').textContent = stats.products.total;
            document.getElementById('products-pending').textContent = `${stats.products.pending} Pending`;
            document.getElementById('products-cut').textContent = `${stats.products.cut} Cut`;
            document.getElementById('products-sorted').textContent = `${stats.products.sorted} Sorted`;
            document.getElementById('products-assembled').textContent = `${stats.products.assembled} Assembled`;
            document.getElementById('products-shipped').textContent = `${stats.products.shipped} Shipped`;

            document.getElementById('totalParts').textContent = stats.parts.total;
            document.getElementById('parts-pending').textContent = `${stats.parts.pending} Pending`;
            document.getElementById('parts-cut').textContent = `${stats.parts.cut} Cut`;
            document.getElementById('parts-sorted').textContent = `${stats.parts.sorted} Sorted`;
            document.getElementById('parts-assembled').textContent = `${stats.parts.assembled} Assembled`;
            document.getElementById('parts-shipped').textContent = `${stats.parts.shipped} Shipped`;

            document.getElementById('totalHardware').textContent = stats.hardware.total;
            document.getElementById('hardware-pending').textContent = `${stats.hardware.pending} Pending`;
            document.getElementById('hardware-cut').textContent = `${stats.hardware.cut} Cut`;
            document.getElementById('hardware-sorted').textContent = `${stats.hardware.sorted} Sorted`;
            document.getElementById('hardware-assembled').textContent = `${stats.hardware.assembled} Assembled`;
            document.getElementById('hardware-shipped').textContent = `${stats.hardware.shipped} Shipped`;

            document.getElementById('totalDetachedProducts').textContent = stats.detachedproducts.total;
            document.getElementById('detachedproducts-pending').textContent = `${stats.detachedproducts.pending} Pending`;
            document.getElementById('detachedproducts-shipped').textContent = `${stats.detachedproducts.shipped} Shipped`;

            document.getElementById('totalNestSheets').textContent = stats.nestsheets.total;
            document.getElementById('nestsheets-processed').textContent = `${stats.nestsheets.processed} Processed`;
            document.getElementById('nestsheets-pending').textContent = `${stats.nestsheets.pending} Pending`;
        }

        function setupEventHandlers() {
            // Search functionality
            $('#searchInput').on('input', function() {
                const searchTerm = $(this).val();
                if (treeView) {
                    treeView.filterNodes(searchTerm);
                }
            });

            $('#clearSearchBtn').click(function() {
                $('#searchInput').val('');
                if (treeView) {
                    treeView.filterNodes('');
                }
            });

            // Tree controls
            $('#expandAllBtn').click(function() {
                if (treeView) {
                    treeView.expandAll();
                }
            });

            $('#collapseAllBtn').click(function() {
                if (treeView) {
                    treeView.collapseAll();
                }
            });

            // Selection controls
            $('#selectAllItems').change(function() {
                const isChecked = $(this).is(':checked');
                if (treeView) {
                    if (isChecked) {
                        treeView.selectAll();
                    } else {
                        treeView.clearAll();
                    }
                }
            });

            // Bulk actions
            $('#bulkStatusSelect').change(updateBulkActionsState);
            $('#applyBulkChangesBtn').click(applyBulkStatusChanges);

            // Refresh button
            $('#refreshDataBtn').click(function() {
                if (treeView && treeView.refreshData) {
                    treeView.refreshData();
                }
            });
        }

        function handleSelectionChange(summary) {
            selectedItems = new Set(summary.selectedIds || []);
            updateSelectionDisplay();
            updateBulkActionsState();
        }

        async function handleStatusChange(nodeId, newStatus, itemType) {
            try {
                console.log(`Status change: ${nodeId} -> ${newStatus} (${itemType})`);
                
                // Call the existing UpdateStatus endpoint
                const response = await fetch('/Admin/UpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        itemId: nodeId,
                        itemType: itemType,
                        newStatus: newStatus,
                        workOrderId: workOrderId,
                        cascadeToChildren: false
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showSuccess(`${itemType} status updated to ${newStatus}`);
                    // Refresh statistics after status change
                    setTimeout(() => {
                        if (treeView && treeView.refreshData) {
                            treeView.refreshData();
                        }
                    }, 500);
                } else {
                    showError(`Failed to update status: ${result.message}`);
                    // Refresh tree to revert changes
                    if (treeView && treeView.refreshData) {
                        treeView.refreshData();
                    }
                }
            } catch (error) {
                console.error('Error updating status:', error);
                showError('Error updating status');
                if (treeView && treeView.refreshData) {
                    treeView.refreshData();
                }
            }
        }

        function updateSelectionDisplay() {
            document.getElementById('selectedCount').textContent = selectedItems.size;
            
            // Show/hide bulk actions based on selection
            const bulkActions = document.getElementById('bulk-actions');
            if (selectedItems.size > 0) {
                bulkActions.style.display = 'block';
            } else {
                bulkActions.style.display = 'none';
            }
        }

        function updateBulkActionsState() {
            const hasSelection = selectedItems.size > 0;
            const hasStatus = $('#bulkStatusSelect').val() !== '';
            
            $('#applyBulkChangesBtn').prop('disabled', !hasSelection || !hasStatus);
        }

        async function applyBulkStatusChanges() {
            const selectedItemsArray = Array.from(selectedItems);
            const newStatus = $('#bulkStatusSelect').val();
            const cascadeToChildren = $('#bulkCascadeOption').is(':checked');

            if (selectedItemsArray.length === 0) {
                showError('Please select items to update.');
                return;
            }

            if (!newStatus) {
                showError('Please select a status to apply.');
                return;
            }

            if (!confirm(`Apply status "${newStatus}" to ${selectedItemsArray.length} selected items?`)) {
                return;
            }

            try {
                showLoading(true);

                // Get selected items from tree view
                const selectedItemsData = treeView?.getSelectedItems();
                if (!selectedItemsData || selectedItemsData.length === 0) {
                    showError('No items selected');
                    return;
                }
                
                const updates = selectedItemsData.map(item => ({
                    ItemId: item.id,
                    ItemType: item.type,
                    NewStatus: newStatus,
                    CascadeToChildren: cascadeToChildren
                }));

                const response = await fetch('/Admin/BulkUpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        updates: updates,
                        workOrderId: workOrderId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(result.message || 'Bulk update completed successfully');
                    
                    // Clear selections and refresh tree
                    selectedItems.clear();
                    updateSelectionDisplay();
                    
                    // Reload tree data
                    setTimeout(() => {
                        if (treeView && treeView.refreshData) {
                            treeView.refreshData();
                        }
                    }, 1500);
                } else {
                    showError(result.message || 'Bulk update failed');
                }
            } catch (error) {
                console.error('Error applying bulk changes:', error);
                showError('Network error occurred during bulk update');
            } finally {
                showLoading(false);
            }
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            overlay.style.display = show ? 'flex' : 'none';
        }

        function showSuccess(message) {
            showAlert(message, 'success');
        }

        function showError(message) {
            showAlert(message, 'danger');
        }

        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertId = 'alert-' + Date.now();
            
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            alertContainer.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                const alert = document.getElementById(alertId);
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }
    </script>
}