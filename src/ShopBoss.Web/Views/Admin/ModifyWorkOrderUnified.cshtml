@model string

@{
    ViewData["Title"] = "Modify Work Order";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tree-view.css" />
    <style>
        .status-management-container {
            padding: 1rem;
        }
        
        .work-order-header {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .stat-card {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            text-align: center;
        }
        
        .stat-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }
        
        .stat-number {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 0.25rem;
        }
        
        .stat-label {
            color: #6c757d;
            font-size: 0.875rem;
        }
        
        .controls-section {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        
        .tree-container {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            min-height: 600px;
            position: relative;
        }
        
        .alert-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            max-width: 400px;
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
    </style>
}

<div class="status-management-container">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Modify Work Order</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Work Orders</a></li>
                    <li class="breadcrumb-item active" aria-current="page" id="work-order-name">Loading...</li>
                </ol>
            </nav>
        </div>
        <div>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Work Orders
            </a>
        </div>
    </div>

    <!-- Work Order Header -->
    <div class="work-order-header" id="work-order-header" style="display: none;">
        <div class="row">
            <div class="col-md-3">
                <strong>Work Order ID:</strong><br>
                <span class="text-muted" id="work-order-id">-</span>
            </div>
            <div class="col-md-3">
                <strong>Work Order Name:</strong><br>
                <span class="text-muted" id="work-order-name-detail">-</span>
            </div>
            <div class="col-md-3">
                <strong>Imported Date:</strong><br>
                <span class="text-muted" id="work-order-imported">-</span>
            </div>
            <div class="col-md-3">
                <strong>Total Items:</strong><br>
                <span class="text-muted" id="work-order-total-items">-</span>
            </div>
        </div>
    </div>

    <!-- Statistics Grid -->
    <div class="stats-grid" id="stats-grid" style="display: none;">
        <div class="stat-card">
            <div class="stat-icon text-primary">
                <i class="fas fa-boxes"></i>
            </div>
            <div class="stat-number" id="products-count">0</div>
            <div class="stat-label">Products</div>
            <div class="mt-1">
                <small class="text-info" id="products-details">0 Parts â€¢ 0 Subassemblies</small>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon text-warning">
                <i class="fas fa-tools"></i>
            </div>
            <div class="stat-number" id="hardware-count">0</div>
            <div class="stat-label">Hardware Items</div>
            <div class="mt-1">
                <small class="text-info" id="hardware-details">Total Qty: 0</small>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon text-info">
                <i class="fas fa-puzzle-piece"></i>
            </div>
            <div class="stat-number" id="detached-count">0</div>
            <div class="stat-label">Detached Products</div>
            <div class="mt-1">
                <small class="text-info" id="detached-details">Total Qty: 0</small>
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon text-secondary">
                <i class="fas fa-cut"></i>
            </div>
            <div class="stat-number" id="nestsheets-count">0</div>
            <div class="stat-label">Nest Sheets</div>
            <div class="mt-1">
                <small class="text-success" id="nestsheets-processed">0 Processed</small><br/>
                <small class="text-warning" id="nestsheets-pending">0 Pending</small><br/>
                <small class="text-info" id="nestsheets-parts">0 Parts Total</small>
            </div>
        </div>
    </div>

    <!-- Controls Section -->
    <div class="controls-section">
        <div class="row g-3 align-items-end">
            <div class="col-md-4">
                <label for="searchInput" class="form-label">Search</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" id="searchInput" class="form-control" 
                           placeholder="Search by product name, part name, or item ID...">
                    <button type="button" id="clearSearchBtn" class="btn btn-outline-secondary">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-3">
                <button type="button" id="expandAllBtn" class="btn btn-outline-primary me-2">
                    <i class="fas fa-expand-alt me-1"></i>Expand All
                </button>
                <button type="button" id="collapseAllBtn" class="btn btn-outline-secondary">
                    <i class="fas fa-compress-alt me-1"></i>Collapse All
                </button>
            </div>
            <div class="col-md-2">
                <div class="form-check">
                    <input type="checkbox" id="selectAllItems" class="form-check-input">
                    <label for="selectAllItems" class="form-check-label">Select All</label>
                </div>
            </div>
            <div class="col-md-3">
                <div id="selection-info" class="text-muted">
                    <small><span id="selectedCount">0</span> items selected</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Actions Section -->
    <div class="controls-section" id="bulk-actions" style="display: none;">
        <div class="row g-3 align-items-center">
            <div class="col-md-3">
                <label for="bulkStatusSelect" class="form-label">Bulk Status Change:</label>
                <select id="bulkStatusSelect" class="form-select">
                    <option value="">Select Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Cut">Cut</option>
                    <option value="Sorted">Sorted</option>
                    <option value="Assembled">Assembled</option>
                    <option value="Shipped">Shipped</option>
                </select>
            </div>
            <div class="col-md-3">
                <div class="form-check mt-4">
                    <input type="checkbox" id="bulkCascadeOption" class="form-check-input">
                    <label for="bulkCascadeOption" class="form-check-label">Cascade to Parts</label>
                </div>
            </div>
            <div class="col-md-3">
                <button type="button" id="applyBulkChangesBtn" class="btn btn-warning mt-4" disabled>
                    <i class="fas fa-edit me-1"></i>Apply Changes
                </button>
            </div>
        </div>
    </div>

    <!-- Tree Container -->
    <div class="tree-container">
        <div id="workOrderTree"></div>
        <div class="loading-overlay" id="loadingOverlay">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Processing...</div>
            </div>
        </div>
    </div>

    <!-- Alert Container -->
    <div class="alert-container" id="alertContainer"></div>
</div>

@section Scripts {
    <script src="~/js/WorkOrderTreeView.js"></script>
    <script>
        let treeView;
        let selectedItems = new Set();
        const workOrderId = '@Model';

        $(document).ready(function() {
            if (!workOrderId) {
                showError('Work order ID is required');
                return;
            }

            initializeModifyWorkOrder();
        });

        async function initializeModifyWorkOrder() {
            try {
                // Initialize the tree view
                treeView = new WorkOrderTreeView('workOrderTree', {
                    mode: 'modify',
                    workOrderId: workOrderId,
                    enableSelection: true,
                    enableModification: true,
                    enableBulkActions: true,
                    onNodeSelected: handleNodeSelection,
                    onStatusChanged: handleStatusChange
                });

                // Load work order data and update UI
                await loadWorkOrderInfo();

                // Setup additional event handlers
                setupEventHandlers();

            } catch (error) {
                console.error('Error initializing modify work order:', error);
                showError('Failed to initialize interface: ' + error.message);
            }
        }

        async function loadWorkOrderInfo() {
            try {
                const response = await fetch(`/api/workorder/${workOrderId}/summary`);
                const result = await response.json();

                if (result.success && result.workOrder) {
                    updateWorkOrderHeader(result.workOrder);
                }

                // Load tree data to get statistics
                const treeResponse = await fetch(`/api/workorder/${workOrderId}/tree`);
                const treeResult = await treeResponse.json();

                if (treeResult.success && treeResult.data) {
                    updateStatistics(treeResult.data);
                }
            } catch (error) {
                console.error('Error loading work order info:', error);
            }
        }

        function updateWorkOrderHeader(workOrder) {
            document.getElementById('work-order-name').textContent = workOrder.name;
            document.getElementById('work-order-id').textContent = workOrder.id;
            document.getElementById('work-order-name-detail').textContent = workOrder.name;
            document.getElementById('work-order-imported').textContent = new Date(workOrder.importedDate).toLocaleString();
            
            document.getElementById('work-order-header').style.display = 'block';
        }

        function updateStatistics(data) {
            // Products
            const productsCount = data.productNodes.length;
            const totalParts = data.productNodes.reduce((sum, pn) => sum + pn.parts.length, 0);
            const totalSubassemblies = data.productNodes.reduce((sum, pn) => sum + pn.subassemblies.length, 0);
            
            document.getElementById('products-count').textContent = productsCount;
            document.getElementById('products-details').textContent = `${totalParts} Parts â€¢ ${totalSubassemblies} Subassemblies`;

            // Hardware
            const hardwareCount = data.workOrder.hardware.length;
            const hardwareQty = data.workOrder.hardware.reduce((sum, h) => sum + h.qty, 0);
            
            document.getElementById('hardware-count').textContent = hardwareCount;
            document.getElementById('hardware-details').textContent = `Total Qty: ${hardwareQty}`;

            // Detached Products
            const detachedCount = data.workOrder.detachedProducts.length;
            const detachedQty = data.workOrder.detachedProducts.reduce((sum, d) => sum + d.qty, 0);
            
            document.getElementById('detached-count').textContent = detachedCount;
            document.getElementById('detached-details').textContent = `Total Qty: ${detachedQty}`;

            // Nest Sheets
            const nestSummary = data.nestSheetSummary;
            document.getElementById('nestsheets-count').textContent = nestSummary.totalNestSheets;
            document.getElementById('nestsheets-processed').textContent = `${nestSummary.processedNestSheets} Processed`;
            document.getElementById('nestsheets-pending').textContent = `${nestSummary.pendingNestSheets} Pending`;
            document.getElementById('nestsheets-parts').textContent = `${nestSummary.totalPartsOnNestSheets} Parts Total`;

            // Total items
            const totalItems = totalParts + totalSubassemblies + hardwareCount + detachedCount;
            document.getElementById('work-order-total-items').textContent = `${totalItems} items`;

            document.getElementById('stats-grid').style.display = 'grid';
        }

        function setupEventHandlers() {
            // Search functionality
            $('#searchInput').on('input', function() {
                const searchTerm = $(this).val();
                if (treeView) {
                    treeView.filterNodes(searchTerm);
                }
            });

            $('#clearSearchBtn').click(function() {
                $('#searchInput').val('');
                if (treeView) {
                    treeView.filterNodes('');
                }
            });

            // Tree controls
            $('#expandAllBtn').click(function() {
                if (treeView) {
                    treeView.expandAll();
                }
            });

            $('#collapseAllBtn').click(function() {
                if (treeView) {
                    treeView.collapseAll();
                }
            });

            // Selection controls
            $('#selectAllItems').change(function() {
                const isChecked = $(this).is(':checked');
                if (treeView) {
                    if (isChecked) {
                        treeView.selectAll();
                    } else {
                        treeView.selectNone();
                    }
                }
            });

            // Bulk actions
            $('#bulkStatusSelect').change(updateBulkActionsState);
            $('#applyBulkChangesBtn').click(applyBulkStatusChanges);
        }

        function handleNodeSelection(event) {
            if (event.isSelected) {
                selectedItems.add(event.nodeId);
            } else {
                selectedItems.delete(event.nodeId);
            }

            updateSelectionDisplay();
            updateBulkActionsState();
        }

        function handleStatusChange(event) {
            if (event.success) {
                showSuccess(event.message || 'Status updated successfully');
            } else {
                showError(event.message || 'Failed to update status');
            }
        }

        function updateSelectionDisplay() {
            document.getElementById('selectedCount').textContent = selectedItems.size;
            
            // Show/hide bulk actions based on selection
            const bulkActions = document.getElementById('bulk-actions');
            if (selectedItems.size > 0) {
                bulkActions.style.display = 'block';
            } else {
                bulkActions.style.display = 'none';
            }
        }

        function updateBulkActionsState() {
            const hasSelection = selectedItems.size > 0;
            const hasStatus = $('#bulkStatusSelect').val() !== '';
            
            $('#applyBulkChangesBtn').prop('disabled', !hasSelection || !hasStatus);
        }

        async function applyBulkStatusChanges() {
            const selectedItemsArray = Array.from(selectedItems);
            const newStatus = $('#bulkStatusSelect').val();
            const cascadeToChildren = $('#bulkCascadeOption').is(':checked');

            if (selectedItemsArray.length === 0) {
                showError('Please select items to update.');
                return;
            }

            if (!newStatus) {
                showError('Please select a status to apply.');
                return;
            }

            if (!confirm(`Apply status "${newStatus}" to ${selectedItemsArray.length} selected items?`)) {
                return;
            }

            try {
                showLoading(true);

                // Build updates array by getting item info from tree
                const updates = [];
                selectedItemsArray.forEach(nodeId => {
                    const element = document.querySelector(`[data-item-id="${nodeId}"]`);
                    if (element) {
                        const itemType = element.dataset.type;
                        updates.push({
                            ItemId: nodeId,
                            ItemType: itemType,
                            NewStatus: newStatus,
                            CascadeToChildren: cascadeToChildren
                        });
                    }
                });

                const response = await fetch('/Admin/BulkUpdateStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        updates: updates,
                        workOrderId: workOrderId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess(result.message || 'Bulk update completed successfully');
                    
                    // Clear selections and refresh tree
                    selectedItems.clear();
                    updateSelectionDisplay();
                    
                    // Reload tree data
                    setTimeout(() => {
                        if (treeView) {
                            treeView.loadWorkOrderData();
                        }
                    }, 1500);
                } else {
                    showError(result.message || 'Bulk update failed');
                }
            } catch (error) {
                console.error('Error applying bulk changes:', error);
                showError('Network error occurred during bulk update');
            } finally {
                showLoading(false);
            }
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            overlay.style.display = show ? 'flex' : 'none';
        }

        function showSuccess(message) {
            showAlert(message, 'success');
        }

        function showError(message) {
            showAlert(message, 'danger');
        }

        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertId = 'alert-' + Date.now();
            
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            alertContainer.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                const alert = document.getElementById(alertId);
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }
    </script>
}