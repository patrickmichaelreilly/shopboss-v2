@model List<StorageRack>
@{
    ViewData["Title"] = "Rack Configuration";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-layer-group me-2"></i>Rack Configuration</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item active">Rack Configuration</li>
                </ol>
            </nav>
        </div>
        <div>
            <a asp-action="CreateRack" class="btn btn-success">
                <i class="fas fa-plus me-2"></i>Add New Rack
            </a>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        @if (Model.Count == 0)
        {
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No Racks Configured</h4>
                        <p class="text-muted">Add your first storage rack to begin configuration.</p>
                        <a asp-action="CreateRack" class="btn btn-success">
                            <i class="fas fa-plus me-2"></i>Add First Rack
                        </a>
                    </div>
                </div>
            </div>
        }
        else
        {
            @foreach (var rack in Model)
            {
                <div class="col-lg-6 col-xl-4 mb-4">
                    <div class="card h-100 @(rack.IsActive ? "" : "border-secondary")">
                        <div class="card-header d-flex justify-content-between align-items-center @(rack.IsActive ? "bg-primary text-white" : "bg-secondary text-white")">
                            <div>
                                <h5 class="mb-0">
                                    <i class="fas fa-layer-group me-2"></i>@rack.Name
                                </h5>
                                <small class="opacity-75">@(rack.Type.ToString().Replace("And", " & "))</small>
                            </div>
                            <div>
                                @if (!rack.IsActive)
                                {
                                    <span class="badge bg-light text-dark">Inactive</span>
                                }
                                @if (rack.IsPortable)
                                {
                                    <span class="badge bg-warning text-dark">
                                        <i class="fas fa-dolly me-1"></i>Mobile
                                    </span>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            @if (!string.IsNullOrEmpty(rack.Description))
                            {
                                <p class="text-muted small mb-3">@rack.Description</p>
                            }

                            <div class="row text-center mb-3">
                                <div class="col-4">
                                    <div class="fw-bold text-primary fs-4">@rack.TotalBins</div>
                                    <small class="text-muted">Total Bins</small>
                                </div>
                                <div class="col-4">
                                    <div class="fw-bold text-success fs-4">@rack.OccupiedBins</div>
                                    <small class="text-muted">Occupied</small>
                                </div>
                                <div class="col-4">
                                    <div class="fw-bold text-info fs-4">@rack.AvailableBins</div>
                                    <small class="text-muted">Available</small>
                                </div>
                            </div>

                            <div class="progress mb-3" style="height: 8px;">
                                <div class="progress-bar bg-success" 
                                     style="width: @(rack.OccupancyPercentage)%"
                                     title="@(rack.OccupancyPercentage.ToString("F1"))% occupied">
                                </div>
                            </div>

                            <div class="row small text-muted">
                                <div class="col-6">
                                    <strong>Dimensions:</strong><br>
                                    @rack.Rows × @rack.Columns
                                </div>
                                <div class="col-6">
                                    <strong>Location:</strong><br>
                                    @(string.IsNullOrEmpty(rack.Location) ? "Not specified" : rack.Location)
                                </div>
                            </div>

                            @if (rack.Length.HasValue || rack.Width.HasValue || rack.Height.HasValue)
                            {
                                <div class="mt-2 small text-muted">
                                    <strong>Physical Size:</strong><br>
                                    @(rack.Length?.ToString() ?? "?") × @(rack.Width?.ToString() ?? "?") × @(rack.Height?.ToString() ?? "?") mm
                                </div>
                            }

                            <div class="mt-3 small text-muted">
                                <strong>Created:</strong> @rack.CreatedDate.ToShortDateString()
                                @if (rack.LastModifiedDate != rack.CreatedDate)
                                {
                                    @:<br><strong>Modified:</strong> @rack.LastModifiedDate?.ToShortDateString()
                                }
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100" role="group">
                                <a asp-action="EditRack" asp-route-id="@rack.Id" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-edit me-1"></i>Edit
                                </a>
                                <button type="button" 
                                        class="btn btn-outline-@(rack.IsActive ? "warning" : "success") btn-sm"
                                        onclick="toggleRackStatus('@rack.Id', '@rack.Name')">
                                    <i class="fas fa-@(rack.IsActive ? "pause" : "play") me-1"></i>
                                    @(rack.IsActive ? "Deactivate" : "Activate")
                                </button>
                                <button type="button" 
                                        class="btn btn-outline-danger btn-sm"
                                        onclick="confirmDeleteRack('@rack.Id', '@rack.Name', @rack.OccupiedBins)"
                                        @(rack.OccupiedBins > 0 ? "disabled title='Cannot delete rack with assigned parts'" : "")>
                                    <i class="fas fa-trash me-1"></i>Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Summary Statistics -->
    @if (Model.Count > 0)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Configuration Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-2">
                                <div class="fw-bold text-primary fs-4">@Model.Count</div>
                                <small class="text-muted">Total Racks</small>
                            </div>
                            <div class="col-md-2">
                                <div class="fw-bold text-success fs-4">@Model.Count(r => r.IsActive)</div>
                                <small class="text-muted">Active Racks</small>
                            </div>
                            <div class="col-md-2">
                                <div class="fw-bold text-info fs-4">@Model.Sum(r => r.TotalBins)</div>
                                <small class="text-muted">Total Bins</small>
                            </div>
                            <div class="col-md-2">
                                <div class="fw-bold text-warning fs-4">@Model.Sum(r => r.OccupiedBins)</div>
                                <small class="text-muted">Occupied Bins</small>
                            </div>
                            <div class="col-md-2">
                                <div class="fw-bold text-secondary fs-4">@Model.Count(r => r.IsPortable)</div>
                                <small class="text-muted">Mobile Carts</small>
                            </div>
                            <div class="col-md-2">
                                <div class="fw-bold text-dark fs-4">@Model.GroupBy(r => r.Type).Count()</div>
                                <small class="text-muted">Rack Types</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteRackModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Rack Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the rack <strong id="deleteRackName"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This action cannot be undone. All bins in this rack will be permanently removed.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" asp-action="DeleteRack" style="display: inline;">
                    <input type="hidden" name="id" id="deleteRackId">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete Rack
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function confirmDeleteRack(rackId, rackName, occupiedBins) {
            if (occupiedBins > 0) {
                alert('Cannot delete rack "' + rackName + '" - it contains ' + occupiedBins + ' assigned parts. Please move all parts before deleting.');
                return;
            }

            document.getElementById('deleteRackId').value = rackId;
            document.getElementById('deleteRackName').textContent = rackName;
            
            var modal = new bootstrap.Modal(document.getElementById('deleteRackModal'));
            modal.show();
        }

        function toggleRackStatus(rackId, rackName) {
            fetch('@Url.Action("ToggleRackStatus")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: 'id=' + encodeURIComponent(rackId)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the rack status.');
            });
        }
    </script>
}