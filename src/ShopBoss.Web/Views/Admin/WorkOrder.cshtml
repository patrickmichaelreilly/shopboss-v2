@model ShopBoss.Web.Models.WorkOrder

@{
    ViewData["Title"] = $"Work Order - {Model.Name}";
}

@section Styles {
    <style>
        .tree-view {
            max-height: 600px;
            overflow-y: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            background-color: #ffffff;
        }
        
        .tree-node {
            padding: 0.25rem 0;
            border-left: 2px solid transparent;
            margin-left: 1rem;
        }
        
        .tree-node.level-0 { 
            margin-left: 0; 
            font-weight: 600;
            border-left: 3px solid #0d6efd;
            padding-left: 0.5rem;
        }
        .tree-node.level-1 { 
            margin-left: 1.5rem; 
            border-left: 2px solid #6c757d;
            padding-left: 0.5rem;
        }
        .tree-node.level-2 { margin-left: 3rem; }
        .tree-node.level-3 { margin-left: 4.5rem; }
        .tree-node.level-4 { margin-left: 6rem; }
        
        .tree-toggle {
            cursor: pointer;
            user-select: none;
            color: #6c757d;
            display: inline-flex !important;
            align-items: center;
            justify-content: center;
            min-width: 16px;
            height: 16px;
        }
        
        .tree-toggle:hover {
            color: #495057;
            background-color: #e9ecef;
            border-radius: 2px;
        }
        
        .tree-toggle i {
            font-size: 12px !important;
            line-height: 1;
        }
        
        .category-header {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .category-header.products { border-left: 4px solid #0d6efd; }
        .category-header.hardware { border-left: 4px solid #fd7e14; }
        .category-header.detached { border-left: 4px solid #6f42c1; }
        
        .hardware-consolidated {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 0.25rem;
            padding: 0.5rem;
            margin: 0.25rem 0;
        }
        
        .hardware-count {
            font-weight: bold;
            color: #856404;
        }
        
        .search-controls {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            margin-bottom: 1rem;
        }
    </style>
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>Work Order Details</h2>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="Index">Work Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
            </ol>
        </nav>
    </div>
    <div class="btn-group" role="group">
        <a asp-action="Modify" asp-route-id="@Model.Id" class="btn btn-warning">
            <i class="fas fa-edit me-2"></i>Modify Work Order
        </a>
        <a asp-action="Index" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i>Back to List
        </a>
        <button type="button" class="btn btn-outline-danger" onclick="confirmDelete('@Model.Id', '@Model.Name')">
            <i class="fas fa-trash me-2"></i>Delete
        </button>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-info-circle me-2"></i>Work Order Information
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <strong>Work Order ID:</strong><br>
                        <span class="text-muted">@Model.Id</span>
                    </div>
                    <div class="col-md-3">
                        <strong>Work Order Name:</strong><br>
                        <span class="text-muted">@Model.Name</span>
                    </div>
                    <div class="col-md-3">
                        <strong>Imported Date:</strong><br>
                        <span class="text-muted">@Model.ImportedDate.ToString("yyyy-MM-dd HH:mm")</span>
                    </div>
                    <div class="col-md-3">
                        <strong>Total Items:</strong><br>
                        <span class="text-muted">@(Model.Products.Sum(p => p.Parts.Count + p.Subassemblies.Count) + Model.Hardware.Count + Model.DetachedProducts.Count) items</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card border-primary h-100">
            <div class="card-body text-center">
                <i class="fas fa-boxes fa-2x text-primary mb-2"></i>
                <h4 class="mb-1">@Model.Products.Count</h4>
                <small class="text-muted">Products</small>
                <div class="mt-2">
                    <small class="text-info">
                        @Model.Products.Sum(p => p.Parts.Count) Parts • 
                        @Model.Products.Sum(p => p.Subassemblies.Count) Subassemblies
                    </small>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card border-warning h-100">
            <div class="card-body text-center">
                <i class="fas fa-tools fa-2x text-warning mb-2"></i>
                <h4 class="mb-1" id="uniqueHardwareCount">@Model.Hardware.Count</h4>
                <small class="text-muted">Hardware Items</small>
                <div class="mt-2">
                    <small class="text-info">
                        Total Qty: @Model.Hardware.Sum(h => h.Qty)
                    </small>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card border-info h-100">
            <div class="card-body text-center">
                <i class="fas fa-puzzle-piece fa-2x text-info mb-2"></i>
                <h4 class="mb-1">@Model.DetachedProducts.Count</h4>
                <small class="text-muted">Detached Products</small>
                <div class="mt-2">
                    <small class="text-info">
                        Total Qty: @Model.DetachedProducts.Sum(d => d.Qty)
                    </small>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 mb-3">
        <div class="card border-secondary h-100">
            <div class="card-body text-center">
                <i class="fas fa-cut fa-2x text-secondary mb-2"></i>
                <h4 class="mb-1">@Model.NestSheets.Count</h4>
                <small class="text-muted">Nest Sheets</small>
                <div class="mt-2">
                    <small class="text-info">
                        @Model.NestSheets.Sum(n => n.Parts.Count) Parts Total
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-sitemap me-2"></i>Work Order Structure
                </h5>
            </div>
            <div class="card-body">
                <div class="search-controls">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="btn-group" role="group">
                                <button type="button" id="expandAllBtn" class="btn btn-outline-primary btn-sm">
                                    <i class="fas fa-expand-alt me-1"></i>Expand All
                                </button>
                                <button type="button" id="collapseAllBtn" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-compress-alt me-1"></i>Collapse All
                                </button>
                                <button type="button" id="toggleHardwareBtn" class="btn btn-outline-warning btn-sm">
                                    <i class="fas fa-layer-group me-1"></i>Toggle Hardware Consolidation
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <input type="text" id="searchFilter" class="form-control form-control-sm" 
                                   placeholder="Search items..." style="max-width: 250px; float: right;">
                        </div>
                    </div>
                </div>
                
                <div id="treeView" class="tree-view">
                    <!-- Tree view content will be built by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<form id="deleteForm" method="post" style="display: none;">
    <input type="hidden" id="deleteId" name="id" />
</form>

@section Scripts {
    <script>
        // Global variables
        let consolidateHardware = true;
        let workOrderData = {
            id: '@Model.Id',
            name: '@Model.Name',
            importedDate: '@Model.ImportedDate.ToString("yyyy-MM-dd HH:mm")',
            products: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Products.Select(p => new {
                id = p.Id,
                productNumber = p.ProductNumber,
                name = p.Name,
                qty = p.Qty,
                length = p.Length,
                width = p.Width,
                parts = p.Parts.Select(part => new {
                    id = part.Id,
                    name = part.Name,
                    qty = part.Qty,
                    length = part.Length,
                    width = part.Width,
                    thickness = part.Thickness,
                    material = part.Material
                }),
                subassemblies = p.Subassemblies.Select(sub => new {
                    id = sub.Id,
                    name = sub.Name,
                    qty = sub.Qty,
                    parts = sub.Parts.Select(part => new {
                        id = part.Id,
                        name = part.Name,
                        qty = part.Qty,
                        length = part.Length,
                        width = part.Width,
                        thickness = part.Thickness,
                        material = part.Material
                    }),
                    childSubassemblies = sub.ChildSubassemblies.Select(child => new {
                        id = child.Id,
                        name = child.Name,
                        qty = child.Qty,
                        parts = child.Parts.Select(part => new {
                            id = part.Id,
                            name = part.Name,
                            qty = part.Qty,
                            length = part.Length,
                            width = part.Width,
                            thickness = part.Thickness,
                            material = part.Material
                        })
                    })
                })
            }))),
            hardware: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Hardware.Select(h => new {
                id = h.Id,
                name = h.Name,
                qty = h.Qty
            }))),
            detachedProducts: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.DetachedProducts.Select(d => new {
                id = d.Id,
                productNumber = d.ProductNumber,
                name = d.Name,
                qty = d.Qty,
                length = d.Length,
                width = d.Width,
                thickness = d.Thickness,
                material = d.Material
            }))),
            nestSheets: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.NestSheets.Select(n => new {
                id = n.Id,
                name = n.Name,
                length = n.Length,
                width = n.Width,
                thickness = n.Thickness,
                material = n.Material,
                parts = n.Parts.Select(p => new {
                    id = p.Id,
                    name = p.Name,
                    qty = p.Qty,
                    length = p.Length,
                    width = p.Width,
                    thickness = p.Thickness,
                    material = p.Material
                })
            })))
        };
        
        // DOM elements
        const treeView = document.getElementById('treeView');
        const searchFilter = document.getElementById('searchFilter');
        const expandAllBtn = document.getElementById('expandAllBtn');
        const collapseAllBtn = document.getElementById('collapseAllBtn');
        const toggleHardwareBtn = document.getElementById('toggleHardwareBtn');
        const uniqueHardwareCount = document.getElementById('uniqueHardwareCount');
        
        // Build the three-node structure tree view
        function buildWorkOrderTree() {
            treeView.innerHTML = '';
            
            // Create the four main categories
            createProductsSection();
            createHardwareSection();
            createDetachedProductsSection();
            createNestSheetsSection();
        }
        
        function createProductsSection() {
            if (!workOrderData.products || workOrderData.products.length === 0) return;
            
            const categoryNode = createCategoryHeader('Products', workOrderData.products.length, 'fas fa-boxes', 'products');
            treeView.appendChild(categoryNode);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'block'; // Start expanded
            
            workOrderData.products.forEach(product => {
                const productNode = createProductNode(product);
                content.appendChild(productNode);
            });
            
            categoryNode.appendChild(content);
        }
        
        function createHardwareSection() {
            if (!workOrderData.hardware || workOrderData.hardware.length === 0) return;
            
            let hardwareItems;
            let displayCount;
            
            if (consolidateHardware) {
                hardwareItems = consolidateHardwareItems(workOrderData.hardware);
                displayCount = hardwareItems.length;
            } else {
                hardwareItems = workOrderData.hardware;
                displayCount = hardwareItems.length;
            }
            
            const categoryNode = createCategoryHeader('Hardware', displayCount, 'fas fa-tools', 'hardware');
            treeView.appendChild(categoryNode);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'block'; // Start expanded
            
            hardwareItems.forEach(hardware => {
                const hardwareNode = createHardwareNode(hardware, consolidateHardware);
                content.appendChild(hardwareNode);
            });
            
            categoryNode.appendChild(content);
            
            // Update the statistics card
            uniqueHardwareCount.textContent = displayCount;
        }
        
        function createDetachedProductsSection() {
            if (!workOrderData.detachedProducts || workOrderData.detachedProducts.length === 0) return;
            
            const categoryNode = createCategoryHeader('Detached Products', workOrderData.detachedProducts.length, 'fas fa-puzzle-piece', 'detached');
            treeView.appendChild(categoryNode);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'block'; // Start expanded
            
            workOrderData.detachedProducts.forEach(detached => {
                const detachedNode = createDetachedProductNode(detached);
                content.appendChild(detachedNode);
            });
            
            categoryNode.appendChild(content);
        }
        
        function createNestSheetsSection() {
            if (!workOrderData.nestSheets || workOrderData.nestSheets.length === 0) return;
            
            const categoryNode = createCategoryHeader('Nest Sheets', workOrderData.nestSheets.length, 'fas fa-cut', 'nestsheets');
            treeView.appendChild(categoryNode);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'block'; // Start expanded
            
            workOrderData.nestSheets.forEach(nestSheet => {
                const nestSheetNode = createNestSheetNode(nestSheet);
                content.appendChild(nestSheetNode);
            });
            
            categoryNode.appendChild(content);
        }
        
        function createCategoryHeader(title, count, icon, cssClass) {
            const node = document.createElement('div');
            node.className = `tree-node level-0 category-header ${cssClass}`;
            
            node.innerHTML = `
                <div class="d-flex align-items-center">
                    <span class="tree-toggle me-2" data-expanded="true" style="width: 16px; display: inline-block;">
                        <i class="fas fa-chevron-down" style="font-size: 12px;"></i>
                    </span>
                    <span class="me-2"><i class="${icon}"></i></span>
                    <span class="flex-grow-1">${title} (${count})</span>
                </div>
            `;
            
            // Handle expand/collapse
            const toggle = node.querySelector('.tree-toggle');
            if (toggle) {
                toggle.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const isExpanded = toggle.dataset.expanded === 'true';
                    toggle.dataset.expanded = !isExpanded;
                    const icon = toggle.querySelector('i');
                    if (icon) {
                        icon.className = `fas fa-chevron-${!isExpanded ? 'down' : 'right'}`;
                    }
                    
                    const content = node.querySelector('.tree-content');
                    if (content) {
                        content.style.display = !isExpanded ? 'block' : 'none';
                    }
                });
            }
            
            return node;
        }
        
        function createProductNode(product) {
            const displayName = product.productNumber && product.productNumber !== product.name ? 
                `${product.productNumber} - ${product.name}` :
                `${product.productNumber || product.name}`;
            
            const node = createTreeNode('🚪', `${displayName} (Qty: ${product.qty || 1})`, 'product', false, 1);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'none';
            
            // Add parts
            if (product.parts && product.parts.length > 0) {
                product.parts.forEach(part => {
                    const partNode = createPartNode(part);
                    content.appendChild(partNode);
                });
            }
            
            // Add subassemblies
            if (product.subassemblies && product.subassemblies.length > 0) {
                product.subassemblies.forEach(subassembly => {
                    const subassemblyNode = createSubassemblyNode(subassembly);
                    content.appendChild(subassemblyNode);
                });
            }
            
            node.appendChild(content);
            return node;
        }
        
        function createPartNode(part) {
            const dimensions = [];
            if (part.length) dimensions.push(`${part.length}mm L`);
            if (part.width) dimensions.push(`${part.width}mm W`);
            if (part.thickness) dimensions.push(`${part.thickness}mm T`);
            
            const dimStr = dimensions.length > 0 ? ` (${dimensions.join(' × ')})` : '';
            const material = part.material ? `, ${part.material}` : '';
            
            return createTreeNode('📄', 
                `${part.name} - Qty: ${part.qty}${dimStr}${material}`, 
                'part', false, 2);
        }
        
        function createSubassemblyNode(subassembly) {
            const node = createTreeNode('📁', 
                `${subassembly.name} - Qty: ${subassembly.qty}`, 
                'subassembly', false, 2);
            
            const content = document.createElement('div');
            content.className = 'tree-content';
            content.style.display = 'none';
            
            // Add parts to subassembly
            if (subassembly.parts && subassembly.parts.length > 0) {
                subassembly.parts.forEach(part => {
                    const partNode = createPartNode(part);
                    partNode.className = partNode.className.replace('level-2', 'level-3');
                    content.appendChild(partNode);
                });
            }
            
            // Add nested subassemblies
            if (subassembly.childSubassemblies && subassembly.childSubassemblies.length > 0) {
                subassembly.childSubassemblies.forEach(nested => {
                    const nestedNode = createSubassemblyNode(nested);
                    nestedNode.className = nestedNode.className.replace('level-2', 'level-3');
                    content.appendChild(nestedNode);
                });
            }
            
            node.appendChild(content);
            return node;
        }
        
        function createHardwareNode(hardware, isConsolidated = false) {
            const icon = isConsolidated ? '🔧' : '🔩';
            const className = isConsolidated ? 'hardware-consolidated' : '';
            
            const qtyDisplay = isConsolidated && hardware.totalQty ? 
                `Total Qty: ${hardware.totalQty} (${hardware.count} items)` :
                `Qty: ${hardware.qty}`;
            
            const node = createTreeNode(icon, 
                `${hardware.name} - ${qtyDisplay}`, 
                'hardware', false, 1);
            
            if (isConsolidated) {
                node.querySelector('.d-flex').classList.add('hardware-consolidated');
            }
            
            return node;
        }
        
        function createDetachedProductNode(detached) {
            const dimensions = [];
            if (detached.length) dimensions.push(`${detached.length}mm L`);
            if (detached.width) dimensions.push(`${detached.width}mm W`);
            if (detached.thickness) dimensions.push(`${detached.thickness}mm T`);
            
            const dimStr = dimensions.length > 0 ? ` (${dimensions.join(' × ')})` : '';
            const material = detached.material ? `, ${detached.material}` : '';
            
            return createTreeNode('📄', 
                `${detached.productNumber || detached.name} - Qty: ${detached.qty}${dimStr}${material}`, 
                'detached', false, 1);
        }
        
        function createNestSheetNode(nestSheet) {
            const dimensions = [];
            if (nestSheet.length) dimensions.push(`${nestSheet.length}mm L`);
            if (nestSheet.width) dimensions.push(`${nestSheet.width}mm W`);
            if (nestSheet.thickness) dimensions.push(`${nestSheet.thickness}mm T`);
            
            const dimStr = dimensions.length > 0 ? ` (${dimensions.join(' × ')})` : '';
            const material = nestSheet.material ? `, ${nestSheet.material}` : '';
            const partsCount = nestSheet.parts ? ` - ${nestSheet.parts.length} parts` : '';
            
            return createTreeNode('📋', 
                `${nestSheet.name}${dimStr}${material}${partsCount}`, 
                'nestsheet', false, 1);
        }
        
        function createTreeNode(icon, text, type, expanded = false, level = 0) {
            const node = document.createElement('div');
            node.className = `tree-node level-${level}`;
            node.dataset.type = type;
            
            const hasChildren = type === 'product' || type === 'subassembly';
            
            node.innerHTML = `
                <div class="d-flex align-items-center">
                    ${hasChildren ? 
                        `<span class="tree-toggle me-2" data-expanded="${expanded}" style="width: 16px; display: inline-block;">
                            <i class="fas fa-${expanded ? 'chevron-down' : 'chevron-right'}" style="font-size: 12px;"></i>
                        </span>` : 
                        '<span class="me-2" style="width: 16px; display: inline-block;"></span>'
                    }
                    <span class="me-2">${icon}</span>
                    <span class="flex-grow-1">${text}</span>
                </div>
            `;
            
            // Handle expand/collapse for items with children
            if (hasChildren) {
                const toggle = node.querySelector('.tree-toggle');
                if (toggle) {
                    toggle.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const isExpanded = toggle.dataset.expanded === 'true';
                        toggle.dataset.expanded = !isExpanded;
                        const icon = toggle.querySelector('i');
                        if (icon) {
                            icon.className = `fas fa-chevron-${!isExpanded ? 'down' : 'right'}`;
                        }
                        
                        const content = node.querySelector('.tree-content');
                        if (content) {
                            content.style.display = !isExpanded ? 'block' : 'none';
                        }
                    });
                }
            }
            
            return node;
        }
        
        function consolidateHardwareItems(hardwareList) {
            const consolidated = {};
            
            hardwareList.forEach(item => {
                const key = item.name.trim().toLowerCase();
                if (consolidated[key]) {
                    consolidated[key].totalQty += item.qty;
                    consolidated[key].count += 1;
                } else {
                    consolidated[key] = {
                        id: item.id,
                        name: item.name,
                        qty: item.qty,
                        totalQty: item.qty,
                        count: 1
                    };
                }
            });
            
            return Object.values(consolidated);
        }
        
        // Event handlers
        expandAllBtn.addEventListener('click', () => {
            const toggles = treeView.querySelectorAll('.tree-toggle');
            toggles.forEach(toggle => {
                toggle.dataset.expanded = 'true';
                toggle.querySelector('i').className = 'fas fa-chevron-down';
                const content = toggle.closest('.tree-node').querySelector('.tree-content');
                if (content) content.style.display = 'block';
            });
        });
        
        collapseAllBtn.addEventListener('click', () => {
            const toggles = treeView.querySelectorAll('.tree-toggle');
            toggles.forEach(toggle => {
                if (!toggle.closest('.category-header')) { // Don't collapse main categories
                    toggle.dataset.expanded = 'false';
                    toggle.querySelector('i').className = 'fas fa-chevron-right';
                    const content = toggle.closest('.tree-node').querySelector('.tree-content');
                    if (content) content.style.display = 'none';
                }
            });
        });
        
        toggleHardwareBtn.addEventListener('click', () => {
            consolidateHardware = !consolidateHardware;
            toggleHardwareBtn.innerHTML = consolidateHardware ? 
                '<i class="fas fa-layer-group me-1"></i>Show Individual Items' :
                '<i class="fas fa-list me-1"></i>Consolidate Hardware';
            buildWorkOrderTree();
        });
        
        // Search functionality
        searchFilter.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const nodes = treeView.querySelectorAll('.tree-node');
            
            nodes.forEach(node => {
                const text = node.textContent.toLowerCase();
                const shouldShow = searchTerm === '' || text.includes(searchTerm);
                node.style.display = shouldShow ? 'block' : 'none';
            });
        });
        
        // Delete confirmation
        function confirmDelete(id, name) {
            if (confirm(`Are you sure you want to delete work order "${name}"? This action cannot be undone.`)) {
                document.getElementById('deleteId').value = id;
                document.getElementById('deleteForm').action = '@Url.Action("DeleteWorkOrder")';
                document.getElementById('deleteForm').submit();
            }
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            buildWorkOrderTree();
        });
    </script>
}