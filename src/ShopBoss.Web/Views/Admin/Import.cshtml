@{
    ViewData["Title"] = "Import Work Order";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tree-view.css" />
    <style>
        .progress-container {
            background: #f8f9fa;
            border-radius: 0.5rem;
            padding: 1.5rem;
            border: 1px solid #dee2e6;
        }
        
        .stage-indicator {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            font-weight: 500;
        }
        
        .stage-indicator.active {
            background-color: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
    </style>
}

<div class="container-fluid mt-3">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-upload me-2"></i>Import Work Order
                    </h3>
                    <div>
                        <a asp-action="Index" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Work Orders
                        </a>
                    </div>
                </div>
                <div class="card-body">

                    <!-- Step 1: File Upload -->
                    <div id="uploadStep" class="step-content">
                        <div class="mb-4">
                            <h5>Select SDF File</h5>
                            <div class="mb-3">
                                <div id="dropZone" class="border border-2 border-dashed rounded p-4 text-center bg-light" style="min-height: 150px; cursor: pointer;">
                                    <div class="d-flex flex-column align-items-center justify-content-center h-100">
                                        <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                        <p class="mb-2"><strong>Drop your SDF file here</strong></p>
                                        <p class="text-muted mb-0">or click to browse</p>
                                    </div>
                                </div>
                                <input type="file" id="sdfFile" accept=".sdf" class="d-none" required>
                                <div id="fileInfo" class="mt-2 d-none">
                                    <div class="alert alert-success">
                                        <i class="fas fa-file-database me-2"></i>
                                        <span id="fileName"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="button" id="startImportBtn" class="btn btn-primary btn-lg" disabled>
                                <i class="fas fa-play me-2"></i>Start Import Process
                            </button>
                        </div>
                    </div>

                    <!-- Step 2: Import Progress -->
                    <div id="progressStep" class="step-content d-none">
                        <div class="mb-4">
                            <h5>Import Progress</h5>
                            <div class="progress-container">
                                <div class="mb-3">
                                    <div class="progress" style="height: 25px;">
                                        <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" 
                                             role="progressbar" style="width: 0%;">0%</div>
                                    </div>
                                </div>
                                <div class="row text-center">
                                    <div class="col-md-6">
                                        <small class="text-muted">Current Stage</small>
                                        <div id="currentStage" class="stage-indicator active">Initializing...</div>
                                    </div>
                                    <div class="col-md-6">
                                        <small class="text-muted">Time Remaining</small>
                                        <div class="stage-indicator">
                                            <span id="timeRemaining">Calculating...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Preview Results -->
                    <div id="previewStep" class="step-content d-none">
                        <div class="mb-4">
                            <h5>Import Information</h5>
                            <div class="card">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <label for="workOrderNameInput" class="form-label"><strong>Work Order Name:</strong></label>
                                            <input type="text" id="workOrderNameInput" class="form-control" 
                                                   placeholder="Loading..." />
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Import Session:</strong><br>
                                            <span id="sessionId" class="text-muted">Loading...</span>
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Import Date:</strong><br>
                                            <span class="text-muted" id="preview-date">Loading...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Statistics Cards -->
                        <div class="mb-4">
                            <h5>Import Statistics</h5>
                            <div class="row">
                                <div class="col-lg col-md-4 col-6 mb-3">
                                    <div class="card border-primary h-100">
                                        <div class="card-body text-center">
                                            <i class="fas fa-boxes fa-2x text-primary mb-2"></i>
                                            <h4 class="mb-1" id="totalProducts">0</h4>
                                            <small class="text-muted">Products</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg col-md-4 col-6 mb-3">
                                    <div class="card border-success h-100">
                                        <div class="card-body text-center">
                                            <i class="fas fa-puzzle-piece fa-2x text-success mb-2"></i>
                                            <h4 class="mb-1" id="totalParts">0</h4>
                                            <small class="text-muted">Parts</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg col-md-4 col-6 mb-3">
                                    <div class="card border-dark h-100">
                                        <div class="card-body text-center">
                                            <i class="fas fa-th-large fa-2x text-dark mb-2"></i>
                                            <h4 class="mb-1" id="totalDetachedProducts">0</h4>
                                            <small class="text-muted">Detached Products</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg col-md-4 col-6 mb-3">
                                    <div class="card border-info h-100">
                                        <div class="card-body text-center">
                                            <i class="fas fa-tools fa-2x text-info mb-2"></i>
                                            <h4 class="mb-1" id="totalHardware">0</h4>
                                            <small class="text-muted">Hardware</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg col-md-4 col-6 mb-3">
                                    <div class="card border-secondary h-100">
                                        <div class="card-body text-center">
                                            <i class="fas fa-cut fa-2x text-secondary mb-2"></i>
                                            <h4 class="mb-1" id="totalNestSheets">0</h4>
                                            <small class="text-muted">Nest Sheets</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Tree Partial in Import Mode -->
                        <div class="mb-4">
                            <h5>Data Preview</h5>
                            @{
                                var treeOptions = ShopBoss.Web.Models.WorkOrderTreeViewOptions.ForImport("placeholder", "importTreeView", false);
                            }
                            @await Html.PartialAsync("_WorkOrderTreeView", treeOptions)
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" id="finalImportBtn" class="btn btn-success me-md-2" disabled>
                                <i class="fas fa-check me-2"></i>Import to Database
                            </button>
                            <button type="button" id="startOverBtn" class="btn btn-outline-secondary">
                                <i class="fas fa-redo me-2"></i>Start Over
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/WorkOrderTreeView.js"></script>
    <script>
        // Global variables
        let currentSessionId = null;
        let signalRConnection = null;
        let treeComponent = null;
        
        // DOM elements
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('sdfFile');
        const fileInfo = document.getElementById('fileInfo');
        const fileName = document.getElementById('fileName');
        const startImportBtn = document.getElementById('startImportBtn');
        
        // Steps
        const uploadStep = document.getElementById('uploadStep');
        const progressStep = document.getElementById('progressStep');
        const previewStep = document.getElementById('previewStep');
        
        // Progress elements
        const progressBar = document.getElementById('progressBar');
        const currentStage = document.getElementById('currentStage');
        const timeRemaining = document.getElementById('timeRemaining');
        
        // Preview elements
        const sessionIdSpan = document.getElementById('sessionId');
        const workOrderNameInput = document.getElementById('workOrderNameInput');
        const totalProducts = document.getElementById('totalProducts');
        const totalParts = document.getElementById('totalParts');
        const totalDetachedProducts = document.getElementById('totalDetachedProducts');
        const totalHardware = document.getElementById('totalHardware');
        const totalNestSheets = document.getElementById('totalNestSheets');
        const finalImportBtn = document.getElementById('finalImportBtn');
        const startOverBtn = document.getElementById('startOverBtn');

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', async function() {
            await initializeSignalR();
            initializeFileUpload();
            
            // Set current date
            document.getElementById('preview-date').textContent = new Date().toLocaleString();
        });

        // Initialize SignalR connection
        async function initializeSignalR() {
            signalRConnection = new signalR.HubConnectionBuilder()
                .withUrl("/importProgress")
                .build();

            signalRConnection.on("ImportProgress", function (data) {
                updateProgress(data.percentage, data.stage, data.estimatedTimeRemaining);
            });

            signalRConnection.on("ImportComplete", function (data) {
                handleImportComplete(data);
            });

            signalRConnection.on("ImportError", function (data) {
                handleImportError(data.error);
            });

            try {
                await signalRConnection.start();
                console.log("SignalR connected");
            } catch (err) {
                console.error("SignalR connection failed: " + err);
            }
        }

        // Initialize file upload handlers
        function initializeFileUpload() {
            dropZone.addEventListener('click', () => fileInput.click());
            
            dropZone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropZone.classList.add('border-primary');
            });

            dropZone.addEventListener('dragleave', (e) => {
                e.preventDefault();
                dropZone.classList.remove('border-primary');
            });

            dropZone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropZone.classList.remove('border-primary');
                
                const files = e.dataTransfer.files;
                if (files.length > 0 && files[0].name.toLowerCase().endsWith('.sdf')) {
                    fileInput.files = files;
                    showFileInfo(files[0]);
                } else {
                    alert('Please select an SDF file.');
                }
            });

            fileInput.addEventListener('change', (e) => {
                if (e.target.files[0]) {
                    showFileInfo(e.target.files[0]);
                }
            });
        }

        function showFileInfo(file) {
            fileName.textContent = file.name + ' (' + formatBytes(file.size) + ')';
            fileInfo.classList.remove('d-none');
            startImportBtn.disabled = false;
        }

        function formatBytes(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Start import process
        startImportBtn.addEventListener('click', async () => {
            const file = fileInput.files[0];
            if (!file) {
                alert('Please select a file.');
                return;
            }

            // INSTANT UI FEEDBACK - Disable button and show progress immediately
            startImportBtn.disabled = true;
            startImportBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
            
            // Show progress step immediately with upload stage
            uploadStep.classList.add('d-none');
            progressStep.classList.remove('d-none');
            updateProgress(0, 'Uploading file...', null);

            try {
                // Upload file to new import endpoint
                const formData = new FormData();
                formData.append('file', file);

                const uploadResponse = await fetch('/admin/import/upload', {
                    method: 'POST',
                    body: formData
                });

                if (!uploadResponse.ok) {
                    const error = await uploadResponse.json();
                    throw new Error(error.error || 'Upload failed');
                }

                const uploadResult = await uploadResponse.json();
                currentSessionId = uploadResult.sessionId;
                
                // Update progress after successful upload
                updateProgress(30, 'File uploaded, connecting...', null);

                // Join SignalR group
                if (signalRConnection) {
                    await signalRConnection.invoke("JoinImportGroup", currentSessionId);
                }
                
                // Update progress after SignalR connection
                updateProgress(50, 'Starting import process...', null);

                // Start import with fast endpoint
                const startResponse = await fetch('/admin/import/faststart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sessionId: currentSessionId })
                });

                if (!startResponse.ok) {
                    const error = await startResponse.json();
                    throw new Error(error.error || 'Failed to start import');
                }
                
                // FastImportService will take over progress reporting from here
                updateProgress(70, 'Processing SDF file...', null);

            } catch (error) {
                console.error('Import error:', error);
                alert('Error: ' + error.message);
                resetToUpload();
            }
        });

        // Update progress display
        function updateProgress(percentage, stage, estimatedTime) {
            progressBar.style.width = percentage + '%';
            progressBar.textContent = percentage + '%';
            currentStage.textContent = stage || 'Processing...';
            
            if (estimatedTime && estimatedTime > 0) {
                const minutes = Math.floor(estimatedTime / 60);
                const seconds = Math.floor(estimatedTime % 60);
                timeRemaining.textContent = minutes + 'm ' + seconds + 's';
            } else {
                timeRemaining.textContent = 'Calculating...';
            }
        }

        // Handle import completion
        async function handleImportComplete(data) {
            progressStep.classList.add('d-none');
            previewStep.classList.remove('d-none');
            
            // Update statistics
            if (data.statistics) {
                totalProducts.textContent = data.statistics.totalProducts || 0;
                totalParts.textContent = data.statistics.totalParts || 0;
                totalDetachedProducts.textContent = data.statistics.totalDetachedProducts || 0;
                totalHardware.textContent = data.statistics.totalHardware || 0;
                totalNestSheets.textContent = data.statistics.totalNestSheets || 0;
            }
            
            // Get detailed data
            try {
                const statusResponse = await fetch('/admin/import/status?sessionId=' + currentSessionId);
                if (statusResponse.ok) {
                    const statusData = await statusResponse.json();
                    sessionIdSpan.textContent = statusData.sessionId;
                    workOrderNameInput.value = statusData.workOrderName || 'New Import Work Order';
                }
                
                // Initialize tree view
                initializeTreeView();
            } catch (error) {
                console.error('Error fetching import details:', error);
            }
        }

        // Initialize tree view with imported data
        async function initializeTreeView() {
            // The tree is now handled by the _WorkOrderTreeView partial
            try {
                // Update the sessionId in the tree view partial
                if (window.importTreeView_treeView && window.importTreeView_treeView.updateSessionId) {
                    window.importTreeView_treeView.updateSessionId(currentSessionId);
                }
                
                if (window.importTreeView_treeView && window.importTreeView_treeView.getInstance()) {
                    const treeInstance = window.importTreeView_treeView.getInstance();
                    
                    // Load tree data from import session
                    const response = await fetch(`/admin/import/tree?sessionId=${currentSessionId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const treeData = await response.json();
                    treeInstance.setData(treeData);
                }
                
                // Enable final import button
                finalImportBtn.disabled = false;
            } catch (error) {
                console.error('Error loading tree data:', error);
                const treeContainer = document.getElementById('importTreeView');
                if (treeContainer) {
                    treeContainer.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Failed to load import data: ${error.message}
                        </div>`;
                }
            }
        }

        // Handle import error
        function handleImportError(error) {
            alert('Import failed: ' + error);
            resetToUpload();
        }

        // Reset to upload step
        function resetToUpload() {
            uploadStep.classList.remove('d-none');
            progressStep.classList.add('d-none');
            previewStep.classList.add('d-none');
            
            fileInput.value = '';
            fileInfo.classList.add('d-none');
            startImportBtn.disabled = true;
            startImportBtn.innerHTML = '<i class="fas fa-play me-2"></i>Start Import Process';
            
            currentSessionId = null;
        }

        // Start over button
        startOverBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to start over?')) {
                resetToUpload();
            }
        });

        // Final import button - Phase I4: Convert to database
        finalImportBtn.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to import this data to the database?')) {
                return;
            }

            try {
                // Disable button and show loading state
                finalImportBtn.disabled = true;
                finalImportBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Importing...';

                // Get current work order name for import (from editable input)
                const workOrderName = workOrderNameInput.value || 'New Import Work Order';

                // Call the conversion endpoint
                const response = await fetch('/admin/import/convert', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: currentSessionId,
                        workOrderName: workOrderName
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    
                    // Handle duplicate detection scenario
                    if (errorData.duplicateInfo && errorData.duplicateInfo.hasDuplicates) {
                        const duplicateModal = await showDuplicateModal(errorData);
                        if (duplicateModal.confirmed) {
                            // Retry with allowDuplicates = true
                            await retryImportWithDuplicates(duplicateModal.workOrderName);
                            return;
                        }
                    } else {
                        throw new Error(errorData.error || 'Import failed');
                    }
                } else {
                    const result = await response.json();
                    
                    // Show success message
                    showSuccessMessage(result);
                    
                    // Redirect to work orders page after a delay
                    setTimeout(() => {
                        window.location.href = '/admin';
                    }, 3000);
                }
            } catch (error) {
                console.error('Import error:', error);
                alert('Error during import: ' + error.message);
            } finally {
                // Re-enable button
                finalImportBtn.disabled = false;
                finalImportBtn.innerHTML = '<i class="fas fa-check me-2"></i>Import to Database';
            }
        });

        // Retry import with allowDuplicates = true
        async function retryImportWithDuplicates(workOrderName) {
            try {
                const response = await fetch('/admin/import/convert', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        sessionId: currentSessionId,
                        workOrderName: workOrderName
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Import failed');
                }

                const result = await response.json();
                showSuccessMessage(result);
                
                // Redirect to work orders page after a delay
                setTimeout(() => {
                    window.location.href = '/admin';
                }, 3000);
            } catch (error) {
                console.error('Retry import error:', error);
                alert('Error during retry import: ' + error.message);
            }
        }

        // Show duplicate detection modal
        async function showDuplicateModal(errorData) {
            return new Promise((resolve) => {
                const modal = document.createElement('div');
                modal.className = 'modal fade';
                modal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Duplicate Work Order Detected</h5>
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <strong>Duplicate Found:</strong> ${errorData.details.join(', ')}
                                </div>
                                <p>You can proceed with a unique name or cancel the import.</p>
                                <div class="mb-3">
                                    <label class="form-label">New Work Order Name:</label>
                                    <input type="text" class="form-control" id="newWorkOrderName" 
                                           value="${errorData.duplicateInfo.suggestedNewName || 'New Import Work Order'}" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" id="proceedWithDuplicate">Proceed with Import</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
                const bootstrapModal = new bootstrap.Modal(modal);
                bootstrapModal.show();
                
                document.getElementById('proceedWithDuplicate').addEventListener('click', () => {
                    const newName = document.getElementById('newWorkOrderName').value;
                    bootstrapModal.hide();
                    modal.remove();
                    resolve({ confirmed: true, workOrderName: newName });
                });
                
                modal.addEventListener('hidden.bs.modal', () => {
                    modal.remove();
                    resolve({ confirmed: false });
                });
            });
        }

        // Show success message
        function showSuccessMessage(result) {
            const successAlert = document.createElement('div');
            successAlert.className = 'alert alert-success alert-dismissible fade show';
            successAlert.innerHTML = `
                <i class="fas fa-check-circle me-2"></i>
                <strong>Import Successful!</strong> Work Order "${result.workOrderId}" has been imported to the database.
                <br><small>Products: ${result.statistics.convertedProducts}, Parts: ${result.statistics.convertedParts}, 
                Hardware: ${result.statistics.convertedHardware}</small>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Insert at the top of the preview step
            previewStep.insertBefore(successAlert, previewStep.firstChild);
        }
    </script>
}