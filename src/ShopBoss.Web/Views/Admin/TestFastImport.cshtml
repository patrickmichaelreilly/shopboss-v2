@{
    ViewData["Title"] = "Test Fast Import";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tree-view.css" />
}

<div class="container-fluid mt-3">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-bolt me-2"></i>Fast Import Test
                    </h3>
                    <div>
                        <a asp-action="Import" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Back to Import
                        </a>
                    </div>
                </div>
                <div class="card-body">

                    @if (!string.IsNullOrEmpty(ViewBag.Error))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @ViewBag.Error
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            To test: Copy your SDF file to <code>C:\test\MicrovellumWorkOrder.sdf</code> and refresh this page.
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(ViewBag.Success))
                    {
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle me-2"></i>
                            @ViewBag.Success
                        </div>
                        
                        <!-- Tree Partial using FastImportService results -->
                        <div class="mb-4">
                            <h5>Fast Import Results - TreeView</h5>
                            @if (ViewBag.TreeData != null)
                            {
                                <!-- Custom options for direct data loading (no API call) -->
                                var treeOptions = new ShopBoss.Web.Models.WorkOrderTreeViewOptions
                                {
                                    ContainerId = "testFastImportTreeView",
                                    Mode = "import",
                                    ApiUrl = "", // Empty - we'll load data directly
                                    SessionId = "direct",
                                    ShowInstructions = false,
                                    ShowAuditHistory = false
                                };
                                @await Html.PartialAsync("_WorkOrderTreeView", treeOptions)
                            }
                        </div>
                        
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            This TreeView is generated from FastImportService â†’ WorkOrder entities, proving the conversion works!
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/WorkOrderTreeView.js"></script>
    @if (ViewBag.TreeData != null)
    {
        <script>
            // Override the TreeView initialization to use direct data instead of API call
            document.addEventListener('DOMContentLoaded', function() {
                // Wait for the partial's script to run, then intercept and replace its behavior
                setTimeout(function() {
                    try {
                        // Get the tree data from FastImportService
                        var treeData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.TreeData));
                        console.log('FastImportService data loaded:', treeData);
                        
                        // Get the TreeView instance wrapper
                        var treeViewWrapper = window.testFastImportTreeView_treeView;
                        if (treeViewWrapper && treeViewWrapper.getInstance) {
                            const treeInstance = treeViewWrapper.getInstance();
                            if (treeInstance) {
                                // Directly set the data, bypassing any API calls
                                if (treeInstance.setData) {
                                    treeInstance.setData(treeData);
                                } else if (treeInstance.loadData) {
                                    treeInstance.loadData(treeData);
                                } else {
                                    // Fallback: set properties directly
                                    treeInstance.data = treeData;
                                    treeInstance.render();
                                }
                                console.log('FastImportService TreeView loaded with', treeData.Items?.length || 0, 'items');
                            } else {
                                console.error('TreeView instance not ready, retrying...');
                                // Retry after another delay
                                setTimeout(function() {
                                    const retryInstance = treeViewWrapper.getInstance();
                                    if (retryInstance) {
                                        if (retryInstance.setData) {
                                            retryInstance.setData(treeData);
                                        } else if (retryInstance.loadData) {
                                            retryInstance.loadData(treeData);
                                        }
                                        console.log('FastImportService TreeView loaded (retry) with', treeData.Items?.length || 0, 'items');
                                    }
                                }, 1000);
                            }
                        } else {
                            console.error('TreeView wrapper not found:', 'testFastImportTreeView_treeView');
                            console.log('Available window objects:', Object.keys(window).filter(k => k.includes('tree') || k.includes('Tree')));
                        }
                    } catch (error) {
                        console.error('Error loading FastImportService tree data:', error);
                    }
                }, 1000); // Wait 1 second for TreeView to fully initialize
            });
        </script>
    }
}