@{
    ViewData["Title"] = "Tree View Component Test Harness";
}

@section Styles {
    <link rel="stylesheet" href="~/css/tree-view.css" />
    <style>
        .test-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .mode-switcher {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 0.375rem;
            margin-bottom: 2rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }
        
        .stat-card {
            background: #fff;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            text-align: center;
        }
        
        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #0d6efd;
        }
        
        .test-output {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 1rem;
            max-height: 200px;
            overflow-y: auto;
            font-family: monospace;
            font-size: 0.875rem;
        }
    </style>
}

<div class="test-container">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title mb-0">
                <i class="fas fa-tree me-2"></i>Tree View Component Test Harness
            </h3>
        </div>
        <div class="card-body">
            <div class="mode-switcher">
                <h5>Component Mode</h5>
                <div class="btn-group" role="group">
                    <input type="radio" class="btn-check" name="mode" id="mode-import" value="import" checked>
                    <label class="btn btn-outline-primary" for="mode-import">Import Mode</label>
                    
                    <input type="radio" class="btn-check" name="mode" id="mode-modify" value="modify">
                    <label class="btn btn-outline-secondary" for="mode-modify">Modify Mode</label>
                </div>
                
                <div class="mt-3">
                    <label for="workOrderSelect" class="form-label">Test Work Order:</label>
                    <select id="workOrderSelect" class="form-select" style="max-width: 300px;">
                        <option value="">Select a work order...</option>
                        <option value="sample-data">Use Sample Data</option>
                    </select>
                </div>
            </div>
            
            <!-- Statistics Panel -->
            <div class="stats-panel mb-4">
                <h5>Component Statistics</h5>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="stat-products">0</div>
                        <div class="text-muted">Products</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-parts">0</div>
                        <div class="text-muted">Parts</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-subassemblies">0</div>
                        <div class="text-muted">Subassemblies</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-hardware">0</div>
                        <div class="text-muted">Hardware</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="stat-selected">0</div>
                        <div class="text-muted">Selected</div>
                    </div>
                </div>
            </div>
            
            <!-- Tree View Component Container -->
            <div class="tree-component-container">
                <h5>Tree View Component</h5>
                <div id="treeViewTestContainer" class="border rounded p-3" style="min-height: 400px;">
                    <div class="text-center py-4">
                        <i class="fas fa-info-circle fa-2x text-muted mb-2"></i>
                        <p class="text-muted">Select a work order and mode to test the component</p>
                    </div>
                </div>
            </div>
            
            <!-- Test Output -->
            <div class="test-output-container mt-4">
                <h5>Component Events Log</h5>
                <div id="testOutput" class="test-output">
                    <div class="text-muted">Component events will appear here...</div>
                </div>
                <div class="mt-2">
                    <button type="button" id="clearLog" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-trash me-1"></i>Clear Log
                    </button>
                    <button type="button" id="performanceTest" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-stopwatch me-1"></i>Performance Test
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/WorkOrderTreeView.js"></script>
    <script>
        let treeView = null;
        const testOutput = document.getElementById('testOutput');
        const workOrderSelect = document.getElementById('workOrderSelect');
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', async () => {
            await loadWorkOrders();
            setupEventListeners();
            logEvent('Test harness initialized');
        });
        
        async function loadWorkOrders() {
            try {
                // In a real implementation, this would load from an API
                // For now, we'll add some sample options
                workOrderSelect.innerHTML = `
                    <option value="">Select a work order...</option>
                    <option value="sample-data">Use Sample Data</option>
                `;
                
                logEvent('Work orders loaded');
            } catch (error) {
                logEvent('Error loading work orders: ' + error.message, 'error');
            }
        }
        
        function setupEventListeners() {
            // Mode change handler
            document.querySelectorAll('input[name="mode"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    if (treeView) {
                        treeView.setMode(radio.value);
                        logEvent(`Mode changed to: ${radio.value}`);
                    }
                });
            });
            
            // Work order selection handler
            workOrderSelect.addEventListener('change', (e) => {
                if (e.target.value) {
                    initializeTreeView(e.target.value);
                }
            });
            
            // Clear log button
            document.getElementById('clearLog').addEventListener('click', () => {
                testOutput.innerHTML = '<div class="text-muted">Component events will appear here...</div>';
            });
            
            // Performance test button
            document.getElementById('performanceTest').addEventListener('click', performanceTest);
        }
        
        function initializeTreeView(workOrderId) {
            const selectedMode = document.querySelector('input[name="mode"]:checked').value;
            
            try {
                // Destroy existing tree view
                if (treeView) {
                    document.getElementById('treeViewTestContainer').innerHTML = '';
                }
                
                if (workOrderId === 'sample-data') {
                    // Create tree view with sample data
                    treeView = new WorkOrderTreeView('treeViewTestContainer', {
                        mode: selectedMode,
                        apiUrl: '/api/Modify',
                        workOrderId: null, // Will use sample data instead
                        onSelectionChange: handleSelectionChange,
                        onStatusChange: handleStatusChange
                    });
                    
                    // Load sample data
                    const sampleData = generateSampleData();
                    treeView.setData(sampleData);
                    
                    logEvent(`Tree view initialized with sample data in ${selectedMode} mode`);
                } else {
                    // Create tree view with real work order data
                    treeView = new WorkOrderTreeView('treeViewTestContainer', {
                        mode: selectedMode,
                        apiUrl: '/api/Modify',
                        workOrderId: workOrderId,
                        onSelectionChange: handleSelectionChange,
                        onStatusChange: handleStatusChange
                    });
                    
                    logEvent(`Tree view initialized for work order ${workOrderId} in ${selectedMode} mode`);
                }
            } catch (error) {
                logEvent('Error initializing tree view: ' + error.message, 'error');
            }
        }
        
        function handleSelectionChange(summary) {
            updateStatistics(summary.counts);
            logEvent(`Selection changed: ${JSON.stringify(summary.counts)}`);
        }
        
        function handleStatusChange(nodeId, newStatus) {
            logEvent(`Status changed: ${nodeId} -> ${newStatus}`);
        }
        
        function updateStatistics(counts) {
            document.getElementById('stat-products').textContent = counts.products || 0;
            document.getElementById('stat-parts').textContent = counts.parts || 0;
            document.getElementById('stat-subassemblies').textContent = counts.subassemblies || 0;
            document.getElementById('stat-hardware').textContent = counts.hardware || 0;
            document.getElementById('stat-selected').textContent = 
                (counts.products || 0) + (counts.parts || 0) + (counts.subassemblies || 0) + (counts.hardware || 0);
        }
        
        function generateSampleData() {
            return {
                workOrderId: 'sample-work-order',
                workOrderName: 'Sample Test Work Order',
                items: [
                    {
                        id: 'product_1',
                        name: 'Sample Product 1',
                        type: 'product',
                        quantity: 2,
                        status: 'Pending',
                        children: [
                            {
                                id: 'part_1_1',
                                name: 'Top Panel',
                                type: 'part',
                                quantity: 2,
                                status: 'Pending',
                                children: []
                            },
                            {
                                id: 'part_1_2',
                                name: 'Bottom Panel',
                                type: 'part',
                                quantity: 2,
                                status: 'Cut',
                                children: []
                            },
                            {
                                id: 'subassembly_1_1',
                                name: 'Door Assembly',
                                type: 'subassembly',
                                quantity: 1,
                                status: 'Pending',
                                children: [
                                    {
                                        id: 'part_1_1_1',
                                        name: 'Door Frame',
                                        type: 'part',
                                        quantity: 1,
                                        status: 'Sorted',
                                        children: []
                                    },
                                    {
                                        id: 'part_1_1_2',
                                        name: 'Door Panel',
                                        type: 'part',
                                        quantity: 1,
                                        status: 'Assembled',
                                        children: []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        id: 'product_2',
                        name: 'Sample Product 2',
                        type: 'product',
                        quantity: 1,
                        status: 'Cut',
                        children: [
                            {
                                id: 'part_2_1',
                                name: 'Side Panel Left',
                                type: 'part',
                                quantity: 1,
                                status: 'Shipped',
                                children: []
                            },
                            {
                                id: 'part_2_2',
                                name: 'Side Panel Right',
                                type: 'part',
                                quantity: 1,
                                status: 'Shipped',
                                children: []
                            }
                        ]
                    },
                    {
                        id: 'hardware_1',
                        name: 'Sample Hardware Item',
                        type: 'hardware',
                        quantity: 10,
                        status: 'Pending',
                        children: []
                    }
                ]
            };
        }
        
        function performanceTest() {
            const startTime = performance.now();
            logEvent('Starting performance test...');
            
            try {
                // Generate a large dataset for testing
                const largeData = generateLargeDataset(100, 5, 3); // 100 products, 5 parts each, 3 subassemblies each
                
                const renderStart = performance.now();
                treeView.setData(largeData);
                const renderEnd = performance.now();
                
                const totalTime = renderEnd - startTime;
                const renderTime = renderEnd - renderStart;
                
                logEvent(`Performance test completed:`);
                logEvent(`  Total time: ${totalTime.toFixed(2)}ms`);
                logEvent(`  Render time: ${renderTime.toFixed(2)}ms`);
                logEvent(`  Items rendered: ${countItems(largeData)}`);
                logEvent(`  Render rate: ${(countItems(largeData) / renderTime * 1000).toFixed(0)} items/sec`);
                
            } catch (error) {
                logEvent('Performance test failed: ' + error.message, 'error');
            }
        }
        
        function generateLargeDataset(productCount, partsPerProduct, subassembliesPerProduct) {
            const items = [];
            
            for (let p = 1; p <= productCount; p++) {
                const product = {
                    id: `product_${p}`,
                    name: `Performance Test Product ${p}`,
                    type: 'product',
                    quantity: 1,
                    status: 'Pending',
                    children: []
                };
                
                // Add parts
                for (let pt = 1; pt <= partsPerProduct; pt++) {
                    product.children.push({
                        id: `part_${p}_${pt}`,
                        name: `Part ${pt} of Product ${p}`,
                        type: 'part',
                        quantity: 1,
                        status: 'Pending',
                        children: []
                    });
                }
                
                // Add subassemblies with parts
                for (let s = 1; s <= subassembliesPerProduct; s++) {
                    const subassembly = {
                        id: `subassembly_${p}_${s}`,
                        name: `Subassembly ${s} of Product ${p}`,
                        type: 'subassembly',
                        quantity: 1,
                        status: 'Pending',
                        children: []
                    };
                    
                    for (let spt = 1; spt <= 2; spt++) {
                        subassembly.children.push({
                            id: `part_${p}_${s}_${spt}`,
                            name: `Subassembly Part ${spt}`,
                            type: 'part',
                            quantity: 1,
                            status: 'Pending',
                            children: []
                        });
                    }
                    
                    product.children.push(subassembly);
                }
                
                items.push(product);
            }
            
            return {
                workOrderId: 'performance-test',
                workOrderName: 'Performance Test Dataset',
                items: items
            };
        }
        
        function countItems(data) {
            let count = 0;
            
            function countRecursive(items) {
                items.forEach(item => {
                    count++;
                    if (item.children && item.children.length > 0) {
                        countRecursive(item.children);
                    }
                });
            }
            
            if (data.items) {
                countRecursive(data.items);
            }
            
            return count;
        }
        
        function logEvent(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const icon = type === 'error' ? '❌' : type === 'warning' ? '⚠️' : 'ℹ️';
            const color = type === 'error' ? 'color: red;' : type === 'warning' ? 'color: orange;' : '';
            
            const logEntry = document.createElement('div');
            logEntry.innerHTML = `<span style="${color}">${icon} [${timestamp}] ${message}</span>`;
            
            if (testOutput.children.length === 1 && testOutput.children[0].classList.contains('text-muted')) {
                testOutput.innerHTML = '';
            }
            
            testOutput.appendChild(logEntry);
            testOutput.scrollTop = testOutput.scrollHeight;
        }
    </script>
}