@model StorageRack
@{
    ViewData["Title"] = "Edit Rack";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-edit me-2"></i>Edit Rack</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item"><a asp-action="RackConfiguration">Rack Configuration</a></li>
                    <li class="breadcrumb-item active">Edit @Model.Name</li>
                </ol>
            </nav>
        </div>
        <div>
            <a asp-action="RackConfiguration" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Configuration
            </a>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-layer-group me-2"></i>Rack Details</h5>
                </div>
                <div class="card-body">
                    <form asp-action="EditRack" method="post">
                        <input asp-for="Id" type="hidden">
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Name" class="form-label">Rack Name <span class="text-danger">*</span></label>
                                    <input asp-for="Name" class="form-control" required>
                                    <span asp-validation-for="Name" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Type" class="form-label">Rack Type <span class="text-danger">*</span></label>
                                    <select asp-for="Type" class="form-select" required>
                                        <option value="">Select rack type...</option>
                                        <option value="Standard">Standard (Carcass Parts)</option>
                                        <option value="DoorsAndDrawerFronts">Doors & Drawer Fronts</option>
                                        <option value="AdjustableShelves">Adjustable Shelves</option>
                                        <option value="Hardware">Hardware</option>
                                        <option value="Cart">Mobile Cart</option>
                                    </select>
                                    <span asp-validation-for="Type" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="2"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Location" class="form-label">Location</label>
                                    <input asp-for="Location" class="form-control">
                                    <span asp-validation-for="Location" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mt-4">
                                    <input asp-for="IsPortable" class="form-check-input" type="checkbox">
                                    <label asp-for="IsPortable" class="form-check-label">
                                        <i class="fas fa-dolly me-1"></i>Mobile/Portable Rack
                                    </label>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <h6 class="mb-3"><i class="fas fa-th me-2"></i>Grid Configuration</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Rows" class="form-label">Rows <span class="text-danger">*</span></label>
                                    <input asp-for="Rows" type="number" class="form-control" min="1" max="10" required onchange="updateGridPreview()">
                                    <span asp-validation-for="Rows" class="text-danger"></span>
                                    <div class="form-text">Number of horizontal rows (1-10)</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Columns" class="form-label">Columns <span class="text-danger">*</span></label>
                                    <input asp-for="Columns" type="number" class="form-control" min="1" max="12" required onchange="updateGridPreview()">
                                    <span asp-validation-for="Columns" class="text-danger"></span>
                                    <div class="form-text">Number of vertical columns (1-12)</div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Current Bins:</strong> @Model.TotalBins total bins (@Model.OccupiedBins occupied, @Model.AvailableBins available).
                            <br><strong>Bin Management:</strong> Individual bins can be added, removed, or modified through the rack management interface.
                        </div>

                        @if (Model.OccupiedBins > 0)
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Warning:</strong> This rack currently has @Model.OccupiedBins bins with assigned parts. 
                                Use caution when modifying rack properties to avoid losing part assignments.
                            </div>
                        }

                        <hr>

                        <h6 class="mb-3"><i class="fas fa-ruler me-2"></i>Physical Dimensions (Optional)</h6>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Length" class="form-label">Length (mm)</label>
                                    <input asp-for="Length" type="number" class="form-control" min="1">
                                    <span asp-validation-for="Length" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Width" class="form-label">Width (mm)</label>
                                    <input asp-for="Width" type="number" class="form-control" min="1">
                                    <span asp-validation-for="Width" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label asp-for="Height" class="form-label">Height (mm)</label>
                                    <input asp-for="Height" type="number" class="form-control" min="1">
                                    <span asp-validation-for="Height" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input asp-for="IsActive" class="form-check-input" type="checkbox">
                                    <label asp-for="IsActive" class="form-check-label">
                                        <i class="fas fa-check-circle me-1"></i>Active (available for use)
                                    </label>
                                    <div class="form-text">Inactive racks will not be used for new part assignments</div>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <div class="d-flex justify-content-between">
                            <a asp-action="RackConfiguration" class="btn btn-secondary">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Update Rack
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Bin Management Section -->
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-th me-2"></i>Bin Management</h5>
                </div>
                <div class="card-body">
                    <div id="binManagementContent">
                        <div class="text-center">
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="small text-muted mt-2">Loading bins...</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button type="button" class="btn btn-outline-success btn-sm" onclick="addNewBin()">
                            <i class="fas fa-plus me-1"></i>Add Bin
                        </button>
                        <button type="button" class="btn btn-outline-warning btn-sm" onclick="saveBinChanges()">
                            <i class="fas fa-save me-1"></i>Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let rackBins = [];
        let binsModified = false;

        // Grid preview update function
        function updateGridPreview() {
            if (rackBins.length > 0) {
                displayBins();
            }
        }

        // Rack edit form functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Load bin data when page loads
            loadRackBins();
        });

        async function loadRackBins() {
            try {
                const response = await fetch(`/admin/api/racks/@Model.Id/bins`);
                if (response.ok) {
                    rackBins = await response.json();
                    displayBins();
                } else {
                    throw new Error('Failed to load bins');
                }
            } catch (error) {
                console.error('Error loading bins:', error);
                document.getElementById('binManagementContent').innerHTML = `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Failed to load bins. Please refresh the page.
                    </div>
                `;
            }
        }

        function displayBins() {
            const content = document.getElementById('binManagementContent');
            
            if (rackBins.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <p class="mb-0">No bins configured</p>
                    </div>
                `;
                return;
            }

            // Get current grid dimensions from form inputs
            const rows = parseInt(document.querySelector('input[name="Rows"]').value) || 4;
            const cols = parseInt(document.querySelector('input[name="Columns"]').value) || 8;
            const totalBins = rackBins.length;
            
            // Create CSS Grid with current dimensions
            let html = `<div class="rack-grid-preview" style="grid-template-rows: repeat(${rows}, 1fr); grid-template-columns: repeat(${cols}, 1fr);">`;
            
            // Generate grid items from flat bin list (left to right, top to bottom)
            for (let i = 0; i < totalBins; i++) {
                const bin = rackBins[i];
                const statusClass = bin.Status === 'Empty' ? 'bin-empty' : 
                                  bin.Status === 'Partial' ? 'bin-partial' :
                                  bin.Status === 'Full' ? 'bin-full' : 'bin-occupied';
                                  
                html += `
                    <div class="grid-bin-edit ${statusClass}" data-bin-index="${i}">
                        <div class="bin-content-edit">
                            <div class="bin-label-edit">
                                <input type="text" 
                                       class="form-control form-control-sm bin-label-input" 
                                       value="${bin.BinLabel || ''}"
                                       onchange="updateBinLabel(${i}, this.value)">
                            </div>
                            <div class="bin-status-info">
                                <small class="text-muted">${bin.Status}</small>
                                ${bin.PartsCount > 0 ? `<small class="text-muted">${bin.PartsCount} parts</small>` : ''}
                            </div>
                            <div class="bin-actions">
                                <button type="button" class="btn btn-outline-danger btn-xs" 
                                        onclick="removeBin(${i})"
                                        ${bin.Status !== 'Empty' ? 'disabled title="Cannot remove bin with parts"' : ''}>
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Fill empty grid cells if needed
            for (let i = totalBins; i < rows * cols; i++) {
                html += `<div class="grid-bin-edit bin-empty" style="visibility: hidden;"></div>`;
            }
            
            html += '</div>';
            
            // Add legend
            html += `
                <div class="rack-legend mt-3">
                    <div class="d-flex justify-content-center flex-wrap gap-3">
                        <div class="legend-item">
                            <div class="legend-color bin-empty"></div>
                            <span>Empty</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-partial"></div>
                            <span>Partial</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-full"></div>
                            <span>Full</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color bin-occupied"></div>
                            <span>Occupied</span>
                        </div>
                    </div>
                </div>
            `;
            
            content.innerHTML = html;
        }

        function updateBinLabel(index, newLabel) {
            rackBins[index].BinLabel = newLabel;
            binsModified = true;
            updateSaveButtonState();
        }

        function addNewBin() {
            // Generate next available label
            const existingLabels = rackBins.map(b => b.Label);
            let newLabel = generateNextLabel(existingLabels);
            
            const newBin = {
                Id: 'new-' + Date.now(), // Temporary ID for new bins
                BinLabel: newLabel,
                Status: 'Empty',
                PartsCount: 0,
                IsNew: true
            };
            
            rackBins.push(newBin);
            binsModified = true;
            displayBins();
            updateSaveButtonState();
        }

        function generateNextLabel(existingLabels) {
            // Try A01, A02, etc. then B01, B02, etc.
            for (let row = 0; row < 26; row++) {
                for (let col = 1; col <= 99; col++) {
                    const label = String.fromCharCode(65 + row) + col.toString().padStart(2, '0');
                    if (!existingLabels.includes(label)) {
                        return label;
                    }
                }
            }
            return 'Z99'; // Fallback
        }

        function removeBin(index) {
            if (rackBins[index].Status !== 'Empty') {
                alert('Cannot remove bin with assigned parts');
                return;
            }
            
            if (confirm(`Remove bin "${rackBins[index].BinLabel}"?`)) {
                rackBins.splice(index, 1);
                binsModified = true;
                displayBins();
                updateSaveButtonState();
            }
        }

        function updateSaveButtonState() {
            const saveButton = document.querySelector('button[onclick="saveBinChanges()"]');
            if (binsModified) {
                saveButton.classList.remove('btn-outline-warning');
                saveButton.classList.add('btn-warning');
                saveButton.innerHTML = '<i class="fas fa-save me-1"></i>Save Changes *';
            } else {
                saveButton.classList.remove('btn-warning');
                saveButton.classList.add('btn-outline-warning');
                saveButton.innerHTML = '<i class="fas fa-save me-1"></i>Save Changes';
            }
        }

        async function saveBinChanges() {
            if (!binsModified) return;

            try {
                const saveButton = document.querySelector('button[onclick="saveBinChanges()"]');
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';

                const response = await fetch(`/admin/api/racks/@Model.Id/bins`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(rackBins)
                });

                if (response.ok) {
                    binsModified = false;
                    updateSaveButtonState();
                    // Reload bins to get updated data from server
                    await loadRackBins();
                    
                    // Show success message
                    const alert = document.createElement('div');
                    alert.className = 'alert alert-success alert-dismissible fade show mt-2';
                    alert.innerHTML = `
                        <i class="fas fa-check me-2"></i>Bin changes saved successfully
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.getElementById('binManagementContent').insertAdjacentElement('afterend', alert);
                    
                    // Auto-dismiss after 3 seconds
                    setTimeout(() => {
                        if (alert.parentNode) alert.remove();
                    }, 3000);
                } else {
                    throw new Error('Failed to save changes');
                }
            } catch (error) {
                console.error('Error saving bins:', error);
                alert('Failed to save bin changes. Please try again.');
            } finally {
                const saveButton = document.querySelector('button[onclick="saveBinChanges()"]');
                saveButton.disabled = false;
                updateSaveButtonState();
            }
        }
    </script>

    <style>
        /* Grid-based rack preview (matches Sorting station) */
        .rack-grid-preview {
            display: grid;
            margin: 0 auto;
            gap: 4px;
            width: 100%;
            max-height: 400px;
            overflow-y: auto;
            /* grid-template-rows and grid-template-columns set dynamically via JavaScript */
        }

        .grid-bin-edit {
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            border: 2px solid #dee2e6;
            position: relative;
            transition: all 0.2s ease;
            min-height: 80px;
            background-color: #f8f9fa;
        }

        .grid-bin-edit:hover {
            transform: scale(1.05);
            z-index: 10;
            border-color: #004F00;
        }

        .bin-content-edit {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            padding: 4px;
            width: 100%;
        }

        .bin-label-edit {
            margin-bottom: 2px;
            width: 100%;
        }

        .bin-label-input {
            font-weight: bold;
            text-align: center;
            font-size: 0.75rem;
            padding: 2px 4px;
            border: 1px solid #ccc;
            border-radius: 3px;
            width: 100%;
            max-width: 60px;
        }

        .bin-status-info {
            text-align: center;
            margin: 2px 0;
        }

        .bin-status-info small {
            display: block;
            font-size: 0.65rem;
            line-height: 1.1;
        }

        .bin-actions {
            text-align: center;
            margin-top: 2px;
        }

        .btn-xs {
            padding: 1px 4px;
            font-size: 0.6rem;
            line-height: 1.2;
        }

        /* Status colors (matching Sorting station) */
        .grid-bin-edit.bin-empty {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .grid-bin-edit.bin-partial {
            background-color: #cff4fc;
            border-color: #0dcaf0;
            color: #055160;
        }

        .grid-bin-edit.bin-full {
            background-color: #d1e7dd;
            border-color: #198754;
            color: #0f5132;
        }

        .grid-bin-edit.bin-occupied {
            background-color: #fff3cd;
            border-color: #ffc107;
            color: #664d03;
        }

        /* Legend styles (matching Sorting station) */
        .rack-legend {
            text-align: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8rem;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border: 1px solid #dee2e6;
            border-radius: 3px;
        }
    </style>
}