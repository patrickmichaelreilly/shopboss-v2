@model StorageRack
@{
    ViewData["Title"] = "Edit Rack";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="fas fa-edit me-2"></i>Edit Rack</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Dashboard</a></li>
                    <li class="breadcrumb-item"><a asp-action="RackConfiguration">Rack Configuration</a></li>
                    <li class="breadcrumb-item active">Edit @Model.Name</li>
                </ol>
            </nav>
        </div>
        <div>
            <a asp-action="RackConfiguration" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Configuration
            </a>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-layer-group me-2"></i>Rack Details</h5>
                </div>
                <div class="card-body">
                    <form asp-action="EditRack" method="post" onsubmit="return prepareBinData()">
                        <input asp-for="Id" type="hidden">
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Name" class="form-label">Rack Name <span class="text-danger">*</span></label>
                                    <input asp-for="Name" class="form-control" required>
                                    <span asp-validation-for="Name" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Type" class="form-label">Rack Type <span class="text-danger">*</span></label>
                                    <select asp-for="Type" class="form-select" required>
                                        <option value="">Select rack type...</option>
                                        <option value="Standard">Standard (Carcass Parts)</option>
                                        <option value="DoorsAndDrawerFronts">Doors & Drawer Fronts</option>
                                        <option value="AdjustableShelves">Adjustable Shelves</option>
                                        <option value="Hardware">Hardware</option>
                                        <option value="Cart">Mobile Cart</option>
                                    </select>
                                    <span asp-validation-for="Type" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="2"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Location" class="form-label">Location</label>
                                    <input asp-for="Location" class="form-control">
                                    <span asp-validation-for="Location" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mt-4">
                                    <input asp-for="IsPortable" class="form-check-input" type="checkbox">
                                    <label asp-for="IsPortable" class="form-check-label">
                                        <i class="fas fa-dolly me-1"></i>Mobile/Portable Rack
                                    </label>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <h6 class="mb-3"><i class="fas fa-th me-2"></i>Grid Configuration</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Rows" class="form-label">Rows <span class="text-danger">*</span></label>
                                    <input asp-for="Rows" type="number" class="form-control" min="1" max="10" required onchange="updateGridPreview()">
                                    <span asp-validation-for="Rows" class="text-danger"></span>
                                    <div class="form-text">Number of horizontal rows (1-10)</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Columns" class="form-label">Columns <span class="text-danger">*</span></label>
                                    <input asp-for="Columns" type="number" class="form-control" min="1" max="12" required onchange="updateGridPreview()">
                                    <span asp-validation-for="Columns" class="text-danger"></span>
                                    <div class="form-text">Number of vertical columns (1-12)</div>
                                </div>
                            </div>
                        </div>


                        @if (Model.OccupiedBins > 0)
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Warning:</strong> This rack currently has @Model.OccupiedBins bins with assigned parts. 
                                Use caution when modifying rack properties to avoid losing part assignments.
                            </div>
                        }

                        <hr>

                        <h6 class="mb-3"><i class="fas fa-th me-2"></i>Bin Management</h6>
                        <div id="binManagementContent">
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="small text-muted mt-2">Loading bins...</p>
                            </div>
                        </div>

                        <!-- Hidden field to store bin data -->
                        <input type="hidden" id="binDataField" name="BinData" value="" />

                        <hr>

                        <div class="d-flex justify-content-between">
                            <a asp-action="RackConfiguration" class="btn btn-secondary">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-2"></i>Update Rack
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        let rackBins = [];

        // Grid preview update function
        function updateGridPreview() {
            displayBins();
        }

        // Rack edit form functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Load bin data when page loads
            loadRackBins();
        });

        async function loadRackBins() {
            try {
                const response = await fetch(`/admin/api/racks/@Model.Id/bins`);
                
                if (response.ok) {
                    const responseText = await response.text();
                    rackBins = JSON.parse(responseText);
                    displayBins();
                } else {
                    throw new Error('Failed to load bins');
                }
            } catch (error) {
                console.error('Error loading bins:', error);
                document.getElementById('binManagementContent').innerHTML = `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Failed to load bins. Please refresh the page.
                    </div>
                `;
            }
        }

        function displayBins() {
            const content = document.getElementById('binManagementContent');
            
            // Get current grid dimensions from form inputs
            const rows = parseInt(document.querySelector('input[name="Rows"]').value) || 4;
            const cols = parseInt(document.querySelector('input[name="Columns"]').value) || 8;
            const requiredBins = rows * cols;
            
            // Dynamically adjust rackBins array to match required number
            while (rackBins.length < requiredBins) {
                const newIndex = rackBins.length;
                const row = Math.floor(newIndex / cols) + 1;
                const col = (newIndex % cols) + 1;
                const binLabel = `${String.fromCharCode('A'.charCodeAt(0) + row - 1)}${col.toString().padStart(2, '0')}`;
                
                rackBins.push({
                    id: `new-${newIndex}`, // Temporary ID for new bins
                    label: binLabel,
                    status: 'Empty',
                    partsCount: 0,
                    isNew: true
                });
            }
            
            // Trim excess bins (only if they're empty or new)
            if (rackBins.length > requiredBins) {
                const binsToRemove = rackBins.slice(requiredBins);
                const hasOccupiedBins = binsToRemove.some(bin => bin.status !== 'Empty' && !bin.isNew);
                
                if (!hasOccupiedBins) {
                    rackBins = rackBins.slice(0, requiredBins);
                }
            }
            
            if (rackBins.length === 0) {
                content.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-inbox fa-2x mb-2"></i>
                        <p class="mb-0">No bins configured</p>
                    </div>
                `;
                return;
            }
            
            // Create CSS Grid with current dimensions
            let html = `<div class="rack-grid-preview" style="grid-template-rows: repeat(${rows}, 1fr); grid-template-columns: repeat(${cols}, 1fr);">`;
            
            // Generate grid items for all required bins
            for (let i = 0; i < requiredBins; i++) {
                const bin = rackBins[i] || { id: `empty-${i}`, label: '', status: 'Empty', partsCount: 0, isNew: true };
                
                const statusClass = bin.status === 'Empty' ? 'bin-empty' : 
                                  bin.status === 'Partial' ? 'bin-partial' :
                                  bin.status === 'Full' ? 'bin-full' : 'bin-occupied';
                                  
                html += `
                    <div class="grid-bin-edit ${statusClass}" data-bin-index="${i}">
                        <div class="bin-content-edit">
                            <div class="bin-label-edit">
                                <input type="text" 
                                       class="form-control form-control-sm bin-label-input" 
                                       value="${bin.label || ''}"
                                       onchange="updateBinLabel(${i}, this.value)">
                            </div>
                            <div class="bin-status-info">
                                <small class="text-muted">${bin.status}</small>
                                ${bin.partsCount > 0 ? `<small class="text-muted">${bin.partsCount} parts</small>` : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            html += '</div>';
            content.innerHTML = html;
        }

        function updateBinLabel(index, newLabel) {
            rackBins[index].label = newLabel;
        }

        function prepareBinData() {
            // Convert bin data to server format and store in hidden field
            const binUpdates = rackBins.map(bin => ({
                Id: bin.id,
                Label: bin.label
            }));
            
            document.getElementById('binDataField').value = JSON.stringify(binUpdates);
            return true; // Allow form submission to continue
        }



    </script>

    <style>
        /* Grid-based rack preview (matches Sorting station) */
        .rack-grid-preview {
            display: grid;
            margin: 0 auto;
            gap: 4px;
            width: 100%;
            max-height: 400px;
            overflow: hidden; /* Prevent all overflow from hover effects */
            /* grid-template-rows and grid-template-columns set dynamically via JavaScript */
        }

        .grid-bin-edit {
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            border: 2px solid #dee2e6;
            position: relative;
            transition: all 0.2s ease;
            min-height: 80px;
            background-color: #f8f9fa;
        }

        .grid-bin-edit:hover {
            transform: scale(1.02);
            z-index: 10;
            border-color: #004F00;
        }

        .bin-content-edit {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100%;
            padding: 4px;
            width: 100%;
        }

        .bin-label-edit {
            margin-bottom: 2px;
            width: 100%;
        }

        .bin-label-input {
            font-weight: bold;
            text-align: center;
            font-size: 0.75rem;
            padding: 2px 4px;
            border: 1px solid #ccc;
            border-radius: 3px;
            width: 100%;
            max-width: 60px;
        }

        .bin-status-info {
            text-align: center;
            margin: 2px 0;
        }

        .bin-status-info small {
            display: block;
            font-size: 0.65rem;
            line-height: 1.1;
        }


        /* Status colors (matching Sorting station) */
        .grid-bin-edit.bin-empty {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .grid-bin-edit.bin-partial {
            background-color: #cff4fc;
            border-color: #0dcaf0;
            color: #055160;
        }

        .grid-bin-edit.bin-full {
            background-color: #d1e7dd;
            border-color: #198754;
            color: #0f5132;
        }

        .grid-bin-edit.bin-occupied {
            background-color: #fff3cd;
            border-color: #ffc107;
            color: #664d03;
        }

    </style>
}